import{_ as s,c as n,o as a,U as l}from"./chunks/framework.BWp8c4Qg.js";const b=JSON.parse('{"title":"二分查找","description":"","frontmatter":{},"headers":[],"relativePath":"algo-data-str/algorithm/binarySearch.md","filePath":"algo-data-str/algorithm/binarySearch.md","lastUpdated":1711771551000}'),p={name:"algo-data-str/algorithm/binarySearch.md"},o=l(`<h1 id="二分查找" tabindex="-1">二分查找 <a class="header-anchor" href="#二分查找" aria-label="Permalink to &quot;二分查找&quot;">​</a></h1><p>二分查找（Binary Search）简单来说就是折半，步骤就是，找到中间值，然后查找左右区间，一直递归下去。 二分查找的时间复杂度是O(logn)</p><h2 id="基本框架" tabindex="-1">基本框架 <a class="header-anchor" href="#基本框架" aria-label="Permalink to &quot;基本框架&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> binary </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">arr</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> left</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> right</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#82AAFF;">  where</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">left</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> right</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> mid</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> left</span><span style="color:#89DDFF;"> +</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">right</span><span style="color:#89DDFF;"> -</span><span style="color:#BABED8;"> left</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">arr</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">mid</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> arr</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">left</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // condition1 </span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">arr</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">right</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> arr</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">mid</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // condition2</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // condition3</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 结束</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="局限性" tabindex="-1">局限性 <a class="header-anchor" href="#局限性" aria-label="Permalink to &quot;局限性&quot;">​</a></h2><ul><li>二分查找依赖顺序表结构,二分查找针对的是有序数据</li><li>数据量太小不适合二分查找：直接顺序遍历即可，没有太大优势</li><li>数据量太大也不适合二分查找：如果查找1GB的数据，数组为了支持随机访问的特性，要求内存空间连续，对内存的要求比较苛刻。</li></ul><h2 id="实现indexof" tabindex="-1">实现indexOf <a class="header-anchor" href="#实现indexof" aria-label="Permalink to &quot;实现indexOf&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 非递归实现，利用指针</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> search </span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">nums</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> target</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;"> let</span><span style="color:#BABED8;"> left</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span></span>
<span class="line"><span style="color:#C792EA;"> let</span><span style="color:#BABED8;"> right</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> nums</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;"> while</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">left</span><span style="color:#89DDFF;"> &lt;=</span><span style="color:#BABED8;"> right</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> mid</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;">  left</span><span style="color:#89DDFF;"> +</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">right</span><span style="color:#89DDFF;"> -</span><span style="color:#BABED8;"> left</span><span style="color:#89DDFF;"> &gt;&gt;</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">nums</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">mid</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">   return</span><span style="color:#BABED8;"> mid</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">nums</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">mid</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">   left</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> mid</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">   right</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> mid</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;"> return</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 递归实现</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> search </span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">nums</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> l</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> r</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> l</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">l</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#BABED8;"> r</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> mid</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> l</span><span style="color:#89DDFF;"> +</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">l</span><span style="color:#89DDFF;"> -</span><span style="color:#BABED8;"> r</span><span style="color:#89DDFF;"> &gt;&gt;</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">nums</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">mid</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> mid</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">mid</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">    search</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> l</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> mid</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    search</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> mid</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> r</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h2 id="二分搜索" tabindex="-1"><a href="https://leetcode-cn.com/problems/binary-search/description/" target="_blank" rel="noreferrer">二分搜索</a> <a class="header-anchor" href="#二分搜索" aria-label="Permalink to &quot;[二分搜索](https://leetcode-cn.com/problems/binary-search/description/)&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 递归</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> binarySearch</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">nums</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> target</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#82AAFF;"> executiveFn</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> nums</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> target</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> executiveFn</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">nums</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> l</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> r</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> target</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 找到中间点</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> m</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> parseInt</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">l</span><span style="color:#89DDFF;"> +</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">r</span><span style="color:#89DDFF;"> -</span><span style="color:#BABED8;"> l</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;"> 2</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 判断返回条件</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">nums</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">m</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#BABED8;"> m</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 递归左边或者右边</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">nums</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">m</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#82AAFF;"> executiveFn</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> m</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> l</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> target</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">nums</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">m</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#82AAFF;"> executiveFn</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> r</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> m</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> target</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 双指针</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> search </span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">nums</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> target</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> left</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> right</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> nums</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> mid</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> ==</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#BABED8;"> nums</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> target</span><span style="color:#89DDFF;"> ?</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;"> :</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    while</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">left</span><span style="color:#89DDFF;"> &lt;=</span><span style="color:#BABED8;"> right</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        mid</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;">  left</span><span style="color:#89DDFF;"> +</span><span style="color:#82AAFF;"> parseInt</span><span style="color:#F07178;">((</span><span style="color:#BABED8;">right</span><span style="color:#89DDFF;"> -</span><span style="color:#BABED8;"> left</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">nums</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">mid</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            return</span><span style="color:#BABED8;"> mid</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">nums</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">mid</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">            left</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> mid</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">            right</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> mid</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h2 id="搜索插入位置" tabindex="-1"><a href="https://leetcode-cn.com/problems/search-insert-position/description/" target="_blank" rel="noreferrer">搜索插入位置</a> <a class="header-anchor" href="#搜索插入位置" aria-label="Permalink to &quot;[搜索插入位置](https://leetcode-cn.com/problems/search-insert-position/description/)&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> searchInsert</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">nums</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> target</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> len</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> nums</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">len</span><span style="color:#89DDFF;"> ||</span><span style="color:#BABED8;"> target</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> nums</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#F78C6C;"> 0</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#BABED8;"> nums</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">len</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> len</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> start</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> end</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> len</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">start</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> end</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> mid</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">start</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> end</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#BABED8;"> nums</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">mid</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      start</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> mid</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      end</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> mid</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> start</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>`,12),e=[o];function t(r,c,y,D,F,i){return a(),n("div",null,e)}const m=s(p,[["render",t]]);export{b as __pageData,m as default};
