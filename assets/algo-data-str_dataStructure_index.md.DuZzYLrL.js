import{_ as s,c as a,o as n,U as l}from"./chunks/framework.BgVg8wer.js";const B=JSON.parse('{"title":"数据结构","description":"","frontmatter":{},"headers":[],"relativePath":"algo-data-str/dataStructure/index.md","filePath":"algo-data-str/dataStructure/index.md","lastUpdated":1721107161000}'),p={name:"algo-data-str/dataStructure/index.md"},e=l(`<h1 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h1><h2 id="数组-array" tabindex="-1">数组(Array) <a class="header-anchor" href="#数组-array" aria-label="Permalink to &quot;数组(Array)&quot;">​</a></h2><p>数组(Array)是一种线性表数据结构。它用一组<code>连续的内存空间</code>，来存储一组具有相同类型的数据。</p><h3 id="如何实现随机访问" tabindex="-1">如何实现随机访问 <a class="header-anchor" href="#如何实现随机访问" aria-label="Permalink to &quot;如何实现随机访问&quot;">​</a></h3><p>数组支持随机访问，根据下标随机访问的时间复杂度为O(1)</p><ul><li>线性表：线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。其实除了数组，链表、队 列、栈等也是线性表结构。</li><li>连续的内存空间和相同类型的数据：实现了“随机访问”。弊端：这两个限制也让数组的很多 操作变得非常低效，比如要想在数组中删除、插入一个数据，为了保证连续性，就需要做大量的数据搬移工作。</li></ul><h3 id="插入和删除低效" tabindex="-1">插入和删除低效 <a class="header-anchor" href="#插入和删除低效" aria-label="Permalink to &quot;插入和删除低效&quot;">​</a></h3><ul><li>插入时，有最好和最差的情况，最好的情况就是直接插入最后的位置。反之，最坏的情况就是插入第一位，通常，可以先把需要插入的位置已有的元素，放到数组的最后一位，再替换需要插入的值。再进行交换。均摊复杂度O(n/2)</li><li>删除同理。</li></ul><h3 id="为什么数组要从0开始编号" tabindex="-1">为什么数组要从0开始编号 <a class="header-anchor" href="#为什么数组要从0开始编号" aria-label="Permalink to &quot;为什么数组要从0开始编号&quot;">​</a></h3><p>内存地址计算公式：<code>a[k]_address = base_address + k * type_size</code></p><p>如果数组从1开始计数，那我们计算数组元素a[k]的内存地址就会变为:<code>a[k]_address = base_address + (k-1)*type_size</code></p><p>每次随机访问数组元素都多了一次减法运算，对于CPU来说，就是多了一次减法指令，所以很多语言的数组从0开始</p><h2 id="链表-nodelist" tabindex="-1">链表(NodeList) <a class="header-anchor" href="#链表-nodelist" aria-label="Permalink to &quot;链表(NodeList)&quot;">​</a></h2><p>相比数组，链表是一种稍微复杂一点的数据结构。数组需要一块连续的内存空间来存储，链表恰恰相反，它并不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用。每个链表的结点除了存储数 据之外，还需要记录链上的下一个结点的地址。一般都叫next。</p><h3 id="单向链表" tabindex="-1">单向链表 <a class="header-anchor" href="#单向链表" aria-label="Permalink to &quot;单向链表&quot;">​</a></h3><p>链表中有两个结点较为特殊，它们分别是第一个结点和最后一个结点。我们习惯性地把第一个结点叫作头结点，把最 后一个结点叫作尾结点。其中，头结点用来记录链表的基地址。可以用用它来遍历整条链表。尾结点特殊的地方在于，指针为空，用来判断结束。</p><ul><li>插入，删除，只需要删除对应的结点</li><li>链表中数据并非连续内存，所以无法像数组那样，根据首地址和下标，通过寻址公式就能直接计算出对应的内存地址，而是需要根据指针一个结点一个结点地依次遍历，直到找到相应的结点。查询需要O(n)的复杂度。</li></ul><h3 id="循环链表" tabindex="-1">循环链表 <a class="header-anchor" href="#循环链表" aria-label="Permalink to &quot;循环链表&quot;">​</a></h3><p>循环链表是一种特殊的单链表。它跟单链表唯一的区别就在尾结点。循环链表的尾结点是指向链表的头结点。</p><h3 id="双向链表" tabindex="-1">双向链表 <a class="header-anchor" href="#双向链表" aria-label="Permalink to &quot;双向链表&quot;">​</a></h3><p>单向链表只有一个方向，结点只有一个后继指针next指向后面的结点。双向链表，它支持两个方向，每个结点不止有一个后继指针next指向后面的结点，还有一个前驱指针prev指向前面的结点。相对于单向链表来说比较浪费空间，但可以支持双向遍历。</p><p>优势</p><ul><li>在删除某一个点的前一个结点这样的操作中比较有优势。</li><li>对于一个有序链表，双向链表的按值查询的效率也要比单链表高一些。因为，我们可以记录上次查找的位置p，每次查询时，根 据要查找的值与p的大小关系，决定是往前还是往后查找，所以平均只需要查找一半的数据。</li></ul><h3 id="链表与数组的对比" tabindex="-1">链表与数组的对比 <a class="header-anchor" href="#链表与数组的对比" aria-label="Permalink to &quot;链表与数组的对比&quot;">​</a></h3><p>时间复杂度</p><ul><li>数组：插入,删除-O(n),随机访问-O(1)</li><li>链表：插入，删除-O(1),随机访问-O(n)</li></ul><p>数组简单易用，在实现上使用的是连续的内存空间，可以借助CPU的缓存机制，预读数组中的数据，所以访问效率更高。而链表在内存中并不是连续存储，所以 对CPU缓存不友好，没办法有效预读。</p><p>数组容量固定一经声明就要占用整块连续内存空间，链表本身没有大小的限制，天然地支持动态扩容，</p><h3 id="链表的应用" tabindex="-1">链表的应用 <a class="header-anchor" href="#链表的应用" aria-label="Permalink to &quot;链表的应用&quot;">​</a></h3><p>LRU缓存淘汰算法。缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的CPU缓存、数据库缓存、浏览器缓存等等。</p><p>常见的策略有三种:先进先出策 略FIFO(First In，First Out)、最少使用策略LFU(Least Frequently Used)、最近最少使用策略LRU(Least Recently Used)</p><p>我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。 1.如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。 2.如果此数据没有在缓存链表中，又可以分为两种情况:</p><ul><li>如果此时缓存未满，则将此结点直接插入到链表的头部;</li><li>如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> ListNode</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> value</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> key</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> value</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">prev</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> LRUCache</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">capacity</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">capacity</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> capacity</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">hashTable</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">dummyHead</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> ListNode</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">dummyTail</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> ListNode</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">dummyHead</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">dummyTail</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">dummyTail</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prev</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">dummyHead</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  get</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> node</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">hashTable</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">node</span><span style="color:#89DDFF;"> ==</span><span style="color:#89DDFF;"> null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#82AAFF;">moveToHead</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">node</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  put</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> value</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> node</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">hashTable</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">node</span><span style="color:#89DDFF;"> ==</span><span style="color:#89DDFF;"> null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">      let</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> ListNode</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">hashTable</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> newNode</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#82AAFF;">addToHead</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">newNode</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">capacity</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#82AAFF;">removeLRUItem</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      node</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> value</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#82AAFF;">moveToHead</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">node</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  moveToHead</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">node</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#82AAFF;">removeFromList</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">node</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#82AAFF;">addToHead</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">node</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#BABED8;">  </span></span>
<span class="line"><span style="color:#F07178;">  removeFromList</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">node</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> tempForPrev</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prev</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> tempForNext</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#BABED8;">    tempForPrev</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> tempForNext</span></span>
<span class="line"><span style="color:#BABED8;">    tempForNext</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prev</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> tempForPrev</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  addToHead</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">node</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    node</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prev</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">dummyHead</span></span>
<span class="line"><span style="color:#BABED8;">    node</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">dummyHead</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">dummyHead</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prev</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> node</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">dummyHead</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> node</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  removeLRUItem</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> tail</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">popTail</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">    delete</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">hashTable</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">--</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  popTail</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> tailItem</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">dummyTail</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prev</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#82AAFF;">removeFromList</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">tailItem</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> tailItem</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br></div></div><h2 id="栈-stack" tabindex="-1">栈(stack) <a class="header-anchor" href="#栈-stack" aria-label="Permalink to &quot;栈(stack)&quot;">​</a></h2><p>后进者先出，先进者后出，这就是典型的“栈”结构。 从栈的操作特性上来看，栈是一种“操作受限”的线性表，只允许在一端插入和删除数据。</p><p>栈既可以用数组来实现,也可以用链表来实现。用数组实现的栈，我们叫作<code>顺序栈</code>，用链表实现的栈，我们叫作<code>链式栈</code>。</p><h3 id="栈在函数调用时的作用" tabindex="-1">栈在函数调用时的作用 <a class="header-anchor" href="#栈在函数调用时的作用" aria-label="Permalink to &quot;栈在函数调用时的作用&quot;">​</a></h3><p>操作系统给每个线程分配了一块独立的内存空间，这块内存被组织成“栈”这种结构,用来存储函数调用时的临时变量。每进入一个函数，就会将临时变 量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。</p><h3 id="栈在表达式求值中的应用" tabindex="-1">栈在表达式求值中的应用 <a class="header-anchor" href="#栈在表达式求值中的应用" aria-label="Permalink to &quot;栈在表达式求值中的应用&quot;">​</a></h3><p>操作系统给每个线程分配了一块独立的内存空间，这块内存被组织成“栈”这种结构,用来存储函数调用时的临时变量。每进入一个函数，就会将临时变 量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。</p><h2 id="队列-queue" tabindex="-1">队列(queue) <a class="header-anchor" href="#队列-queue" aria-label="Permalink to &quot;队列(queue)&quot;">​</a></h2><p>队列只支持两个基本操作:入栈push()和出栈pop()。队列跟栈一样，也是一种操作受限的线性表数据结构。</p><p>顺序队列和链式队列,队列跟栈一样，也是一种抽象的数据结构。具有先进先出的特性，支持在队尾插入元素，在队头删除元素.用数组实现的队列叫作顺序队列， 用链表实现的队列叫作链式队列。</p><h3 id="顺序队列" tabindex="-1">顺序队列 <a class="header-anchor" href="#顺序队列" aria-label="Permalink to &quot;顺序队列&quot;">​</a></h3><p>基于数组队实现，定义头尾两个指针，入队时，时间复杂度O(N),出队时，先不做数组队搬运，等到有入队操作时，统一搬运。</p><h3 id="链式队列" tabindex="-1">链式队列 <a class="header-anchor" href="#链式队列" aria-label="Permalink to &quot;链式队列&quot;">​</a></h3><p>这个就很简单了。挂结点就行了</p><h3 id="循环队列" tabindex="-1">循环队列 <a class="header-anchor" href="#循环队列" aria-label="Permalink to &quot;循环队列&quot;">​</a></h3><p>顾名思义，形成唤醒，这样不需要做数组的搬运了。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> CircularQueue</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">capacity</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">items</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Array</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">capacity</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">capacity</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> capacity</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  enqueue</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">item</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> ((</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">%</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">capacity</span><span style="color:#89DDFF;"> ==</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">head</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#FF9CAC;"> false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    items</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">tail</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> item</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    tail</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">%</span><span style="color:#BABED8;"> n</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  dequeue</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;"> ==</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">tail</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> res</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> items</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">head</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">%</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">capacity</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="阻塞队列和并发队列" tabindex="-1">阻塞队列和并发队列 <a class="header-anchor" href="#阻塞队列和并发队列" aria-label="Permalink to &quot;阻塞队列和并发队列&quot;">​</a></h3><h4 id="阻塞队列" tabindex="-1">阻塞队列 <a class="header-anchor" href="#阻塞队列" aria-label="Permalink to &quot;阻塞队列&quot;">​</a></h4><p>就是在队列为空的时候，从队头取数据会被阻塞。因为此时还没有数据可取，直到队列中有了数据 才能返回,如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后再插入数据，然后再返回。</p><p>该特性可以实现一个生产者-消费者模型。这种基于阻塞队列实现的“生产者-消费者模型”，可以有效地协调生产和消费的速度。</p><p>同时还可以配置多个消费者，来对应一个生产者。</p><h4 id="并发队列" tabindex="-1">并发队列 <a class="header-anchor" href="#并发队列" aria-label="Permalink to &quot;并发队列&quot;">​</a></h4><p>在多线程的情况下，同时操作队列，这个时候就会存在线程安全问题。</p><p>线程安全的队列我们叫作并发队列，最简单直接的实现方式是直接在enqueue()、dequeue()方法上加锁，但是锁粒度大并发度会比较低，同一时刻仅允许一个存或者取操作。实际上，基于数组的循环队列，利用CAS原子操作，可以实现非常高效的并发队列。</p>`,59),o=[e];function r(t,c,D,F,i,y){return n(),a("div",null,o)}const u=s(p,[["render",r]]);export{B as __pageData,u as default};
