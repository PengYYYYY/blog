import{_ as a,c as n,R as l,o as p}from"./chunks/framework.B7niMGvM.js";const y=JSON.parse('{"title":"链表","description":"","frontmatter":{},"headers":[],"relativePath":"algo-data-str/dataStructure/linkedList.md","filePath":"algo-data-str/dataStructure/linkedList.md","lastUpdated":1735488038000}'),e={name:"algo-data-str/dataStructure/linkedList.md"};function o(t,s,r,c,i,D){return p(),n("div",null,s[0]||(s[0]=[l(`<h1 id="链表" tabindex="-1">链表 <a class="header-anchor" href="#链表" aria-label="Permalink to &quot;链表&quot;">​</a></h1><p>基础数据结构</p><h2 id="链表遍历框架" tabindex="-1">链表遍历框架 <a class="header-anchor" href="#链表遍历框架" aria-label="Permalink to &quot;链表遍历框架&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> ListNode</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> value</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 循环</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> traverse </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">head</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ListNode</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> cur</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> head</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;"> !=</span><span style="color:#89DDFF;"> null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    cur</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 递归</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> recursive </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">head</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ListNode</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">  recursive</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>`,4)]))}const u=a(e,[["render",o]]);export{y as __pageData,u as default};
