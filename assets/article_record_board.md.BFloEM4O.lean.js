import{F as i}from"./chunks/FigmaContainer.DJdEfKOl.js";import{c as o,R as r,G as t,m as e,a as l,o as d}from"./chunks/framework.B3N2cakB.js";const f=JSON.parse('{"title":"白板项目总结","description":"","frontmatter":{},"headers":[],"relativePath":"article/record/board.md","filePath":"article/record/board.md","lastUpdated":1725975545000}'),n={name:"article/record/board.md"},m=Object.assign(n,{setup(s){return(h,a)=>(d(),o("div",null,[a[0]||(a[0]=r('<h1 id="白板项目总结" tabindex="-1">白板项目总结 <a class="header-anchor" href="#白板项目总结" aria-label="Permalink to &quot;白板项目总结&quot;">​</a></h1><h2 id="白板项目介绍" tabindex="-1">白板项目介绍 <a class="header-anchor" href="#白板项目介绍" aria-label="Permalink to &quot;白板项目介绍&quot;">​</a></h2><p>是一款对标 <code>figjam</code>, <code>boardmix</code>, <code>miro</code> 的在线白板工具。</p><h3 id="拥有的元素" tabindex="-1">拥有的元素 <a class="header-anchor" href="#拥有的元素" aria-label="Permalink to &quot;拥有的元素&quot;">​</a></h3>',4)),t(i,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=2914-3665&t=hzW5L5zaX1dMDGIz-4"}),a[1]||(a[1]=r('<p>白板中有文本图形、画笔、连线、表格、便签、Section、图片、贴纸、纯文本、脑图等。</p><h2 id="渲染引擎" tabindex="-1">渲染引擎 <a class="header-anchor" href="#渲染引擎" aria-label="Permalink to &quot;渲染引擎&quot;">​</a></h2><p>Palette 核心是一个基于 Skia 的渲染引擎。Skia 是一个google开源的2d图形库，它是Chrome、Android、Flutter等知名产品的图形引擎。<a href="https://skia.org/" target="_blank" rel="noreferrer">Skia</a></p><h3 id="pixi-vs-skia" tabindex="-1">pixi vs skia <a class="header-anchor" href="#pixi-vs-skia" aria-label="Permalink to &quot;pixi vs skia&quot;">​</a></h3><p>为什么需要 skia，最开始 palette 是基于 pixi.js 做的。最开始的方向是对标 <code>figma</code>, pixi 有很多问题导致我们切换为 skia 渲染引擎，问题如下：</p><h3 id="skia-的问题" tabindex="-1">skia 的问题 <a class="header-anchor" href="#skia-的问题" aria-label="Permalink to &quot;skia 的问题&quot;">​</a></h3><p>Skia 是一个维护了近 20 年的方案，也存在很多的历史包袱，在一些场景下很难满足包体和性能的进一步优化需求。在包体方面，可以针对 Skia 做了定制和裁剪，而在性能方面，由于 Skia 需要兼容历史遗留的 CPU 绘制模式，在 API 上暴露会比较保守，很多针对现代 GPU 绘制管线可以进一步优化的接口都没暴露出来。</p><p><a href="https://github.com/Tencent/tgfx" target="_blank" rel="noreferrer">tgfx</a> 是腾讯 <code>PAG</code> 团队开发的跨平台的纯 GPU 绘图引擎，提供了完备的图片，矢量和文本的 2D 绘制能力。</p><h4 id="阴影和模糊性能以及清晰度的问题" tabindex="-1">阴影和模糊性能以及清晰度的问题 <a class="header-anchor" href="#阴影和模糊性能以及清晰度的问题" aria-label="Permalink to &quot;阴影和模糊性能以及清晰度的问题&quot;">​</a></h4><p>模糊和阴影本质都是高斯模糊，pixi 目前是通过 filter 自定义 shader 来实现高斯模糊的，性能很差并且质量也很差。</p>',10)),t(i,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=2914-3751&t=hzW5L5zaX1dMDGIz-4"}),a[2]||(a[2]=e("h5",{id:"自交图形切三角问题",tabindex:"-1"},[l("自交图形切三角问题 "),e("a",{class:"header-anchor",href:"#自交图形切三角问题","aria-label":'Permalink to "自交图形切三角问题"'},"​")],-1)),t(i,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=2914-3787&t=hzW5L5zaX1dMDGIz-4"}),a[3]||(a[3]=r('<p>自交图形会导致路径内外关系颠倒，pixi使用的<a href="https://github.com/mapbox/earcut" target="_blank" rel="noreferrer">切三角库</a>, 会错误的处理自交图形的切三角</p><h5 id="布尔运算问题" tabindex="-1">布尔运算问题 <a class="header-anchor" href="#布尔运算问题" aria-label="Permalink to &quot;布尔运算问题&quot;">​</a></h5><ul><li>目前市面上存在的布尔运算算法库主要是基于svg的，例如 <a href="https://paperjs.org/" target="_blank" rel="noreferrer"><code>paper.js</code></a>（Paper.js — Boolean Operations）。</li><li>布尔元算实现算法「Vatti clipping algorithm」和一篇92年发表在ACM上的论文，也叫 <a href="https://dl.acm.org/doi/10.1145/129902.129906" target="_blank" rel="noreferrer">瓦蒂裁切算法</a>。</li></ul><h4 id="背景模糊-毛玻璃-问题" tabindex="-1">背景模糊（毛玻璃）问题 <a class="header-anchor" href="#背景模糊-毛玻璃-问题" aria-label="Permalink to &quot;背景模糊（毛玻璃）问题&quot;">​</a></h4><p>布尔运算+高斯模糊的问题，需要给低层级的图像创建一个副本并做高斯模糊，再和上层路径做布尔运算（交集）</p>',5)),t(i,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=2914-3884&t=hzW5L5zaX1dMDGIz-4"}),a[4]||(a[4]=e("h4",{id:"曲线平滑度问题",tabindex:"-1"},[l("曲线平滑度问题 "),e("a",{class:"header-anchor",href:"#曲线平滑度问题","aria-label":'Permalink to "曲线平滑度问题"'},"​")],-1)),a[5]||(a[5]=e("p",null,"pixi在渲染贝塞尔曲线时会将贝塞尔微分成非常多的直线，但他不会随着缩放比例微分的更细，导致视口放大的很大是曲线表现的不是很光滑。",-1)),t(i,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=2914-3910&t=hzW5L5zaX1dMDGIz-4"}),a[6]||(a[6]=r('<h3 id="项目支持的渲染能力" tabindex="-1">项目支持的渲染能力 <a class="header-anchor" href="#项目支持的渲染能力" aria-label="Permalink to &quot;项目支持的渲染能力&quot;">​</a></h3><p>Palette 支持的渲染能力如下：</p><ul><li>填充：纯色、纹理、渐变</li><li>边框：内边框、外边框、居中边框、边框填纯色、边框填渐变、多边框、线帽、端点、虚线</li><li>阴影：内外阴影、多阴影、偏移、模糊系数、扩展</li><li>模糊：背景模糊、高斯模糊、模糊系数</li><li>通用能力：蒙版、布尔、编组、画板、层级、锁定、混合模式</li><li>文本：粗体、斜体、字号、字体、删除线、下划线、列表、对齐</li><li>路径：路径渲染、控制点操作</li><li>通用能力：历史记录、变换、端导出、palette 打开 sketch/figma 设计稿</li></ul><h2 id="项目架构" tabindex="-1">项目架构 <a class="header-anchor" href="#项目架构" aria-label="Permalink to &quot;项目架构&quot;">​</a></h2>',4)),t(i,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=1266-432&t=loY0TKO3kumeNLmD-4"}),a[7]||(a[7]=r('<ul><li>skia: 2D 图形库，由 C++ 用于高性能和高质量地渲染文本、形状和图像。Chrome、Flutter 都使用其作为图形渲染引擎。</li><li>canvaskit: 基于 Skia 的 WebAssembly 版本, 上层使用 WebGL 进行渲染，可以在 web 平台上提供 2D 和 3D 渲染。</li><li>palette-canvaskit: 负责与 canvaskit 渲染接口的交互，提供画布中所有基础元素的渲染。</li><li>palette-ink: 应用中的插件如基础图形、操作指针、笔、橡皮擦、bitmap、便签、文本等，解耦基础逻辑。</li><li>palette-text: 应用中的文本渲染器，从富文本到 svg 文本。</li><li>palette-vector: 几何相关的逻辑，用于钢笔工具等基础点，线逻辑。</li><li>palette-renderer: 在基础渲染器上的一层，负责对插件的渲染实现。</li><li>palette-handler: 核心控制器，管理上下游所有的控制器，图形操作等。</li><li>palette-constants: 应用中所有的基础变量，类型定义等。</li><li>palette-utils: 应用中所有的工具函数。</li></ul><h3 id="渲染引擎-1" tabindex="-1">渲染引擎 <a class="header-anchor" href="#渲染引擎-1" aria-label="Permalink to &quot;渲染引擎&quot;">​</a></h3><h3 id="坐标体系" tabindex="-1">坐标体系 <a class="header-anchor" href="#坐标体系" aria-label="Permalink to &quot;坐标体系&quot;">​</a></h3>',3)),t(i,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=3508-4464&t=loY0TKO3kumeNLmD-4"}),a[8]||(a[8]=e("ul",null,[e("li",null,"global变换矩阵"),e("li",null,"local变换矩阵"),e("li",null,"旋转中心"),e("li",null,"坐标体系")],-1)),a[9]||(a[9]=e("h3",{id:"容器、图形、渲染队列",tabindex:"-1"},[l("容器、图形、渲染队列 "),e("a",{class:"header-anchor",href:"#容器、图形、渲染队列","aria-label":'Permalink to "容器、图形、渲染队列"'},"​")],-1)),t(i,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=3508-4617&t=loY0TKO3kumeNLmD-4"}),a[10]||(a[10]=e("h3",{id:"渲染对象",tabindex:"-1"},[l("渲染对象 "),e("a",{class:"header-anchor",href:"#渲染对象","aria-label":'Permalink to "渲染对象"'},"​")],-1)),a[11]||(a[11]=e("p",null,"业务侧的渲染对象，画布中的每一个元素都会对应一个渲染实例。",-1)),t(i,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=3508-4935&t=loY0TKO3kumeNLmD-4"}),a[12]||(a[12]=e("h2",{id:"数据结构设计",tabindex:"-1"},[l("数据结构设计 "),e("a",{class:"header-anchor",href:"#数据结构设计","aria-label":'Permalink to "数据结构设计"'},"​")],-1)),a[13]||(a[13]=e("h3",{id:"figma-数据结构",tabindex:"-1"},[l("Figma 数据结构 "),e("a",{class:"header-anchor",href:"#figma-数据结构","aria-label":'Permalink to "Figma 数据结构"'},"​")],-1)),t(i,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=2658-1361&t=lro20nPzgjXTpsNK-4"}),a[14]||(a[14]=r('<p>Figma 的数据结构比较复杂，图形间关系如上图，不做太多赘述，需要注意的有以下几点：</p><ul><li>Figma <a href="https://www.figma.com/developers/api" target="_blank" rel="noreferrer">REST API</a> 与 <a href="https://www.figma.com/plugin-docs/api/api-reference/" target="_blank" rel="noreferrer">PLUGIN API</a> 数据结构存在差异</li><li>如何拿到 Figma 源数据，有以下几个方式 <ul><li>可以使用下面这个服务：<a href="https://pengyyyyy.github.io/figma-api-live/#/figma" target="_blank" rel="noreferrer">figma-api-live</a>，原理是通过 rest api。</li><li>通过 figma 插件，拿到画布上下文，</li><li>直接解析 figma 的 fig 文件，开源的 <a href="https://github.com/yagudaev/figma-to-json" target="_blank" rel="noreferrer">figma-to-json</a>，Figma CTO 写的 <a href="https://madebyevan.com/figma/fig-file-parser/" target="_blank" rel="noreferrer">fig-file-parser</a></li></ul></li></ul><h2 id="ai模版" tabindex="-1">AI模版 <a class="header-anchor" href="#ai模版" aria-label="Permalink to &quot;AI模版&quot;">​</a></h2><p>在白板落地了 <code>AI模版</code> 的功能，从 <code>idea</code> 到上线仅用时 <code>10</code> 天，具体实现可以参考 <a href="https://mp.weixin.qq.com/s/HrxQtfc8j-zD9kMRGhTn6w" target="_blank" rel="noreferrer">探索可视化分析模型</a></p><h2 id="辅助线" tabindex="-1">辅助线 <a class="header-anchor" href="#辅助线" aria-label="Permalink to &quot;辅助线&quot;">​</a></h2>',5)),t(i,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=3865-1786&t=oyHf5qQSFlbfnhzh-4"}),a[15]||(a[15]=e("ul",null,[e("li",null,[l("第一步：过滤 "),e("code",null,"视口内"),l(" 检测元素，X，Y 轴分区，构建分区元素组")]),e("li",null,"第二步：元素对比策略，如 Step 2 所示"),e("li",null,"第三步：绘制辅助线，绘制模式如 Step 3 所示")],-1)),a[16]||(a[16]=e("h2",{id:"连线",tabindex:"-1"},[l("连线 "),e("a",{class:"header-anchor",href:"#连线","aria-label":'Permalink to "连线"'},"​")],-1)),t(i,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=6656-2399&t=vx1kuKVAtuu5eXjb-4"}),a[17]||(a[17]=r('<ul><li>构建网格</li><li>寻路</li></ul><h2 id="历史记录" tabindex="-1">历史记录 <a class="header-anchor" href="#历史记录" aria-label="Permalink to &quot;历史记录&quot;">​</a></h2><p>也就是 <code>undo</code> 和 <code>redo</code></p><h3 id="指令模式" tabindex="-1">指令模式 <a class="header-anchor" href="#指令模式" aria-label="Permalink to &quot;指令模式&quot;">​</a></h3><p>场景如下:</p><ol><li>删除A</li><li>删除B</li><li>新增group</li></ol><p>撤销时的指令如下：</p><ol><li>删除group</li><li>新增B</li><li>新增A</li></ol><h3 id="快照模式" tabindex="-1">快照模式 <a class="header-anchor" href="#快照模式" aria-label="Permalink to &quot;快照模式&quot;">​</a></h3><p>核心就是保留现场，然后恢复现场。场景如下：</p><ol><li>录制开始</li><li>用户操作元素 我会给元素做脏标记</li><li>用户操作元素</li><li>录制结束 把所有脏的元素拿出来序列化 记做一个快照</li><li>进入撤销栈</li></ol><p>撤销时：</p><ol><li>从栈顶拿出快照，恢复现场即可</li></ol><h2 id="协同编辑" tabindex="-1">协同编辑 <a class="header-anchor" href="#协同编辑" aria-label="Permalink to &quot;协同编辑&quot;">​</a></h2><p>协同编辑还没具体实现，后续复用现有组件，先了解几个概念。</p><h3 id="ot-operational-transformation-算法" tabindex="-1">OT(Operational Transformation) 算法 <a class="header-anchor" href="#ot-operational-transformation-算法" aria-label="Permalink to &quot;OT(Operational Transformation) 算法&quot;">​</a></h3>',16)),t(i,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=3865-2349&t=oyHf5qQSFlbfnhzh-4"}),a[18]||(a[18]=e("p",null,[l("适用于文档，精细控制插入位置，核心是其流程中的 "),e("code",null,"Transform"),l(" 方法，没有固定的实现，需要根据实际情况来做。")],-1)),a[19]||(a[19]=e("h3",{id:"crdt-conflict-free-replicated-data-type-算法",tabindex:"-1"},[l("CRDT(Conflict-Free Replicated Data Type) 算法 "),e("a",{class:"header-anchor",href:"#crdt-conflict-free-replicated-data-type-算法","aria-label":'Permalink to "CRDT(Conflict-Free Replicated Data Type) 算法"'},"​")],-1)),a[20]||(a[20]=e("p",null,"冲突无关数据类型 CRDT（Conflict-Free Replicated Data Type）是一种解决分布式系统中数据同步问题的数据结构。CRDT的核心思想是确保所有副本之间的数据一致性，而无需进行复杂的操作转换。CRDT有两种主要类型：状态同步CRDT（State-based CRDT）和操作同步CRDT（Operation-based CRDT）。",-1)),a[21]||(a[21]=e("h3",{id:"crdt-like",tabindex:"-1"},[l("CRDT Like "),e("a",{class:"header-anchor",href:"#crdt-like","aria-label":'Permalink to "CRDT Like"'},"​")],-1)),t(i,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=3865-1889&t=oyHf5qQSFlbfnhzh-4"}),a[22]||(a[22]=e("p",null,[l("Figma 协同方案，细节协同可以参考这篇文章："),e("a",{href:"https://www.figma.com/blog/how-figmas-multiplayer-technology-works/",target:"_blank",rel:"noreferrer"},"https://www.figma.com/blog/how-figmas-multiplayer-technology-works/")],-1)),a[23]||(a[23]=e("p",null,"核心原则：最后写入者胜利（树形引用特殊处理）",-1)),a[24]||(a[24]=e("h2",{id:"总结",tabindex:"-1"},[l("总结 "),e("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1)),a[25]||(a[25]=e("p",null,"总的来说，整个白板编辑器项目非常复杂，本文只是总结了其中的冰山一角，总体也是比较笼统的介绍，更多的细节需要在开发实践中去体会。",-1))]))}});export{f as __pageData,m as default};
