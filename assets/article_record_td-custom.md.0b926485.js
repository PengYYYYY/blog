import{F as n}from"./chunks/FigmaContainer.baf06d35.js";import{o as p,c as t,b as a,d as s,e,a as l}from"./app.06fa9719.js";const i=s("h1",{id:"基于-tdesign-搭建一个业务组件库",tabindex:"-1"},[e("基于 TDesign 搭建一个业务组件库 "),s("a",{class:"header-anchor",href:"#基于-tdesign-搭建一个业务组件库","aria-hidden":"true"},"#")],-1),r=s("p",null,"本文讲述了如何利用 TDesign 基础组件库的能力，基于 TDesign 搭建一个业务组件库 TDesign Custom。包含组件库官网搭建，业务组件开发，Design Token 定制，单元测试，打包构建。覆盖整个组件库搭建流程。 许多前端团队都有搭建业务组件库的需求，那么如何基于 TDesign 搭建一个业务组件库呢？在本文中，我将向大家介绍使用 TDesign 搭建一个业务组件库的过程。",-1),o=s("p",null,[e("许多前端团队都有搭建业务组件库的需求，那么如何基于 TDesign 搭建一个业务组件库呢？在本文中，我将向大家介绍使用 TDesign 搭建一个业务组件库 "),s("a",{href:"https://pengyyyyy.github.io/tdesign-custom/#/vue/getting-started",target:"_blank",rel:"noreferrer"},"TDesign Custom "),e(" 的过程。")],-1),c=s("h2",{id:"如何开始",tabindex:"-1"},[e("如何开始 "),s("a",{class:"header-anchor",href:"#如何开始","aria-hidden":"true"},"#")],-1),d=s("h3",{id:"基于源码修改",tabindex:"-1"},[e("基于源码修改 "),s("a",{class:"header-anchor",href:"#基于源码修改","aria-hidden":"true"},"#")],-1),D=s("p",null,"这一路线就是直接 fork 源码，然后进行修改，这样做的优势是：可以做任何想做的定制。但是缺点也非常明显：TDesign 每周都在进行迭代，fork 源码很难同步最新的 TDesign 的 feature 和 bugfix，长此以往，业务组件库将变得难以维护。从上图可以看出，这样做就像开了一个 git 新分支一样，如果不做好这个分支的同步，肯定有一天会跟主版本的 TDesign 存在冲突。",-1),b=s("h3",{id:"基于-tdesign-npm-包",tabindex:"-1"},[e("基于 TDesign NPM 包 "),s("a",{class:"header-anchor",href:"#基于-tdesign-npm-包","aria-hidden":"true"},"#")],-1),u=s("p",null,"最理想的方式当然是最大程度的利用 TDesign 能力，构建一个标准的便于维护和迭代的业务组件库。目前 TDesign 的迭代和发布是稳定的，业务组件库只需要聚焦于业务组件的开发，其余能力完全复用 TDeisgn 即可。那一个业务组件库需要那些东西呢？",-1),C=s("p",null,"从上图可以看出，一个业务组件库需要以下内容：",-1),y=s("ul",null,[s("li",null,"基础组件，依赖 TDesign 的 NPM 包，自主选择 TDesign 版本"),s("li",null,"组件库官网：所有组件的预览能力（包括 TDesign 本身提供的组件）"),s("li",null,"业务组件开发：业务组件的编写，API文档等"),s("li",null,"样式定制：跟随业务特性等样式定制"),s("li",null,"单元测试：组件的单元测试，质量保证"),s("li",null,"构建与发布：发布和构建业务组件库 NPM 包")],-1),h=l(`<p>上文基于源码方案的潜在冲突问题也会引刃而解，对 TDesign 版本的选择控制权在业务组件库。</p><h2 id="组件库官网" tabindex="-1">组件库官网 <a class="header-anchor" href="#组件库官网" aria-hidden="true">#</a></h2><p>业务组件库的官网包含以下几点：</p><ul><li>可以基于 TDesign 风格进行一定的个性化定制</li><li>对业务组件示例进行预览</li><li>对 TDesign 本身提供的组件进行预览</li></ul><h3 id="站点构建" tabindex="-1">站点构建 <a class="header-anchor" href="#站点构建" aria-hidden="true">#</a></h3><p>组件库的官网可以通过很多方式构建，比如：storybook，vitepress, dumi。TDesign 也有自己的组件库文档工具。tdesign-site-components 是 TDesign 组件库官网的底座，基于 web-component，可以通过其搭建出 TDesign 风格的官网。</p><p>文件目录</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">site</span></span>
<span class="line"><span style="color:#A6ACCD;"> - docs // 使用 MD 文档存放，也可以用来展示一些团队知识库，如开发规范。</span></span>
<span class="line"><span style="color:#A6ACCD;"> - plugin-tdoc // tdoc 的 vite 插件</span></span>
<span class="line"><span style="color:#A6ACCD;"> - src</span></span>
<span class="line"><span style="color:#A6ACCD;">   - components</span></span>
<span class="line"><span style="color:#A6ACCD;">     - stackblitz // stackblitz 在线代码示例</span></span>
<span class="line"><span style="color:#A6ACCD;">     - base-usage // live demo 实现</span></span>
<span class="line"><span style="color:#A6ACCD;">     - demo-page // 组件示例页面</span></span>
<span class="line"><span style="color:#A6ACCD;">     - page // 页面框架</span></span>
<span class="line"><span style="color:#A6ACCD;">   - router.js // 路由</span></span>
<span class="line"><span style="color:#A6ACCD;"> - site.config.mjs // 路由配置文件</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>可以按以上的文件目录从 TDesign 源码中 site 部分复用即可。</p><h3 id="组件示例" tabindex="-1">组件示例 <a class="header-anchor" href="#组件示例" aria-hidden="true">#</a></h3><p>上文说到组件官网示例代码分为两部：</p><ul><li>业务组件示例代码</li><li>TDesign 的示例代码（因为涉及到对 TDesign 的一些样式修改，需要进行预览）</li></ul><p>业务组件的示例代码是新开发的，可以直接在 site.config.mjs 路由配置文件中引用即可。但是 TDesign 的示例代码该怎么处理呢?</p>`,13),m=l(`<p>这里可以用到 git submodule，直接将 github 上 TDeisgn 的仓库作为子仓库。结构如上图所示。在 site.config.mjs 路由配置中链接到子仓库的源码。这样就可以直接依赖子仓库来做示例展示了。</p><p>此外还需要做几件事情：</p><ul><li>在 plugin-tdoc 中需要将原来 common 仓库的引用地址修改到 TDeisgn 子仓库的 common 子仓库的链接。</li><li>拉新仓库时需要安装 TDeisgn 子仓库以及 TDeisgn 子仓库的 common 子仓库。</li></ul><p>这边不对 common 子仓库进行单独的提取，为的是不破坏 TDeisgn 子仓库原有的结构，降低维护成本。所以形成了一个两层子仓库的结构。在 TDesign 版本更新时，直接将子仓库的版本切换到对应的 tag 就可以保持同步。</p><h2 id="业务组件开发" tabindex="-1">业务组件开发 <a class="header-anchor" href="#业务组件开发" aria-hidden="true">#</a></h2><p>业务组件的开发完全遵循 TDesign 的开发规范即可，目录如下：</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">src</span></span>
<span class="line"><span style="color:#A6ACCD;"> - custom-component</span></span>
<span class="line"><span style="color:#A6ACCD;">   - __tests__ // 单元测试文件</span></span>
<span class="line"><span style="color:#A6ACCD;">   - _example</span></span>
<span class="line"><span style="color:#A6ACCD;">     - base.vue // 示例代码 </span></span>
<span class="line"><span style="color:#A6ACCD;">   - style // 组件样式目录</span></span>
<span class="line"><span style="color:#A6ACCD;">   - custom-component.md // 组件文档</span></span>
<span class="line"><span style="color:#A6ACCD;">   - custom-component.tsx</span></span>
<span class="line"><span style="color:#A6ACCD;">   - index.ts // 组件出口</span></span>
<span class="line"><span style="color:#A6ACCD;">   - type.ts // ts 文件</span></span>
<span class="line"><span style="color:#A6ACCD;">   - props.ts // 组件的 props</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="逻辑开发" tabindex="-1">逻辑开发 <a class="header-anchor" href="#逻辑开发" aria-hidden="true">#</a></h3><p>在 TDesign 中，单个组件开发需要遵循以下规范：</p><ul><li>全部使用 tsx 来进行组件开发</li><li>组件命名：推荐使用业务相关前缀对组件进行命名：如 tcustom-title。</li><li>抽离 props 和 types，并对组件进行合理拆分子组件</li><li>在 index.ts 中需要导出 props 和 types，以及组件，供统一入口进行组件安装</li></ul><h3 id="样式开发" tabindex="-1">样式开发 <a class="header-anchor" href="#样式开发" aria-hidden="true">#</a></h3><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">- style</span></span>
<span class="line"><span style="color:#A6ACCD;"> - _index.less</span></span>
<span class="line"><span style="color:#A6ACCD;"> - css.js</span></span>
<span class="line"><span style="color:#A6ACCD;"> - index.js</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>样式开发的目录如上，css.js 和 index.js 中为打包约定的文件，需要按此规范进行配置。在 _index.less 中进行 css 的编码即可。在 TDesign 中，由于样式文件为多个框架复用，less 文件统一放置在 tdesign-common 中。</p><h3 id="api-文档" tabindex="-1">API 文档 <a class="header-anchor" href="#api-文档" aria-hidden="true">#</a></h3><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">---</span></span>
<span class="line"><span style="color:#A6ACCD;">title: 业务组件</span></span>
<span class="line"><span style="color:#A6ACCD;">description: 业务组件</span></span>
<span class="line"><span style="color:#A6ACCD;">isComponent: true</span></span>
<span class="line"><span style="color:#A6ACCD;">usage: { title: &#39;&#39;, description: &#39;&#39; }</span></span>
<span class="line"><span style="color:#A6ACCD;">spline: base</span></span>
<span class="line"><span style="color:#A6ACCD;">---</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">:: BASE_DOC ::</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">### 基础类型</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">{{ base }}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">## API</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">### xxx Props</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">名称 | 类型 | 默认值 | 说明 | 必传</span></span>
<span class="line"><span style="color:#A6ACCD;">-- | -- | -- | -- | --</span></span>
<span class="line"><span style="color:#A6ACCD;">onClick | Function |  | TS 类型：\`(e: MouseEvent) =&gt; void\`&lt;br/&gt;点击时触发 | N</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>组件API文档的入口文件由 <code>custom-component.md</code> 提供。此 MD 文档由 tdoc 进行解析，由三部分组成：</p><ul><li>文档的约定配置项。</li><li>:: BASE_DOC :: 后面的组件示例文件</li><li>组件的 API 表格型文档。</li></ul><h3 id="组件库的安装" tabindex="-1">组件库的安装 <a class="header-anchor" href="#组件库的安装" aria-hidden="true">#</a></h3><p>组件的入口提供了组件库安装方法和所有组件的模块，在安装 TDesign Custom 的同时，可以自动安装所有的 TDesign 组件。在 TDesign 源码中，src/components.ts 中集合了所有的组件，并在 src/index.ts 做安装函数的集成和各组件的导出。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/components.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">tdesign-vue/esm</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 导出 tdesign 提供的所有组件</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./custom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 导出业务组件</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/index.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> components </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./components</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> PKG </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../package.json</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">install</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">....</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 组件安装</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./components</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  install</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> PKG</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">version </span><span style="color:#676E95;font-style:italic;">// 业务组件库版本</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="design-token-定制" tabindex="-1">Design Token 定制 <a class="header-anchor" href="#design-token-定制" aria-hidden="true">#</a></h2><h3 id="css-variable" tabindex="-1">Css variable <a class="header-anchor" href="#css-variable" aria-hidden="true">#</a></h3>`,23),A=l(`<p>组件库全局的主题定制可以在官网的主题定制器中实时预览组件的主题，支持以下组件修改：</p><ul><li>色彩：主题色，中性色，成功色，错误色，警告色</li><li>字体：字体大小，字体行高，字体颜色</li><li>圆角</li><li>阴影</li><li>尺寸</li></ul><p>进行实时预览时，可以直接导出 css 文件在项目中使用。</p><h3 id="less-变量" tabindex="-1">less 变量 <a class="header-anchor" href="#less-变量" aria-hidden="true">#</a></h3><p>css variable 在已经能够满足大部分场景中的定制工作。但是如果需要更精细化的定制。比如在业务中 Button 的主题色为黑色，但是其他组件的主题色还是蓝色。Css variable 显然无法满足。TDesign 也提供组件级别的 less 变量，可以使用 less 变量针对组件进行精细化定制。</p><p>以 Button 为例子，可以从 TDesign-common 中查看到每一个组件的 less 变体。<a href="https://github.com/Tencent/tdesign-common/blob/develop/style/web/components/button/_var.less" target="_blank" rel="noreferrer">Button 组件所有 Design Token</a> 。可以在项目中导出一个针对此类需求的 <code>modifyVars</code> 对象。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modifyVars </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">@btn-color-primary</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#222324</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">@btn-color-primary-hover</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#383838</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><a href="https://tdesign.tencent.com/vue/custom-theme" target="_blank" rel="noreferrer">TDesign 主题定制</a> 中也对这两种样式定制方式进行了详细的描述。</p><h2 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-hidden="true">#</a></h2><p>TDesign 的单元测试使用 vitest 来进行构建。vitest 的配置非常简单，很多配置可以跟 vite 共用。所以可以将 vite 相关的共用配置抽离出来。</p><p>单元测试的配置主要分为两部分：组件单元测试、组件快照集成测试。</p>`,11),g=l(`<h3 id="单元测试目录" tabindex="-1">单元测试目录 <a class="header-anchor" href="#单元测试目录" aria-hidden="true">#</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">- src</span></span>
<span class="line"><span style="color:#A6ACCD;">  - x-component</span></span>
<span class="line"><span style="color:#A6ACCD;">    - __tests__</span></span>
<span class="line"><span style="color:#A6ACCD;">      - index.test.jsx // 组件单元测试</span></span>
<span class="line"><span style="color:#A6ACCD;">- test</span></span>
<span class="line"><span style="color:#A6ACCD;">  - snap</span></span>
<span class="line"><span style="color:#A6ACCD;">    - csr.test.js // 客户端渲染快照集成测试</span></span>
<span class="line"><span style="color:#A6ACCD;">    - ssr.test.js // 服务端渲染快照集成测试</span></span>
<span class="line"><span style="color:#A6ACCD;">  - test-setup.js</span></span>
<span class="line"><span style="color:#A6ACCD;">  - vitest.config.js</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>单元测试配置可以参考： <a href="https://github.com/PengYYYYY/tdesign-custom/blob/master/test/vitest.config.js" target="_blank" rel="noreferrer">TDeisgn vitest 配置</a></li><li>单元测试规范可以参考：<a href="https://github.com/Tencent/tdesign-vue-next/wiki/TDesign-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83" target="_blank" rel="noreferrer">TDesign 单元测试规范</a></li><li>关于 TDesign 在 vitest 的实践可以参考：<a href="./vitest-refactor.html">TDesign 在 vitest 的实践</a></li></ul><h2 id="打包构建与发布" tabindex="-1">打包构建与发布 <a class="header-anchor" href="#打包构建与发布" aria-hidden="true">#</a></h2><h3 id="构建" tabindex="-1">构建 <a class="header-anchor" href="#构建" aria-hidden="true">#</a></h3><p>TDesign Custom 底层基于 TDesign ，将 TDesign 作为 peerDependencies ，但是也需要构建一个 npm 包。打包构建脚本可以完全复用 TDesign 的打包流程。使用 rollup 进行产物的构建，具体的配置不做过多的赘述，可以直接参考源码。也有很多文档介绍组件库的构建相关。</p><ul><li>关于各类构建产物的差别可以参考 ：<a href="https://github.com/Tencent/tdesign-common/blob/develop/develop-install.md" target="_blank" rel="noreferrer">TDesign 产物构建介绍</a></li><li>具体的打包配置可以参考：<a href="https://github.com/PengYYYYY/tdesign-custom/blob/master/scripts/vite.base.config.js" target="_blank" rel="noreferrer">rollup 配置</a></li></ul><h3 id="发布" tabindex="-1">发布 <a class="header-anchor" href="#发布" aria-hidden="true">#</a></h3><p>组件库的发布就是将构建出的产物发布在 npm 上或者公司内部的源上。在 github 上的话可以利用 github actions 自动发布。TDesign 在 github actions 拥有非常 workflow。</p><ul><li>自动发布的配置可以参考：<a href="https://github.com/Tencent/tdesign-vue-next/blob/develop/.github/workflows/auto-release.yml" target="_blank" rel="noreferrer">auto-release</a>。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p>通过上述对组件库官网搭建，业务组件开发，Design Token 定制，单元测试，打包构建的阐述。我们可以充分利用 TDesign 基础组件库的能力高效的去搭建一个业务组件库。<a href="https://pengyyyyy.github.io/tdesign-custom/#/vue/getting-started" target="_blank" rel="noreferrer">TDesign Custom </a>基于 vue2。其他技术栈的业务组件库搭建也可参考本文的流程。</p>`,12),x=JSON.parse('{"title":"基于 TDesign 搭建一个业务组件库","description":"","frontmatter":{},"headers":[{"level":2,"title":"如何开始","slug":"如何开始","link":"#如何开始","children":[{"level":3,"title":"基于源码修改","slug":"基于源码修改","link":"#基于源码修改","children":[]},{"level":3,"title":"基于 TDesign NPM 包","slug":"基于-tdesign-npm-包","link":"#基于-tdesign-npm-包","children":[]}]},{"level":2,"title":"组件库官网","slug":"组件库官网","link":"#组件库官网","children":[{"level":3,"title":"站点构建","slug":"站点构建","link":"#站点构建","children":[]},{"level":3,"title":"组件示例","slug":"组件示例","link":"#组件示例","children":[]}]},{"level":2,"title":"业务组件开发","slug":"业务组件开发","link":"#业务组件开发","children":[{"level":3,"title":"逻辑开发","slug":"逻辑开发","link":"#逻辑开发","children":[]},{"level":3,"title":"样式开发","slug":"样式开发","link":"#样式开发","children":[]},{"level":3,"title":"API 文档","slug":"api-文档","link":"#api-文档","children":[]},{"level":3,"title":"组件库的安装","slug":"组件库的安装","link":"#组件库的安装","children":[]}]},{"level":2,"title":"Design Token 定制","slug":"design-token-定制","link":"#design-token-定制","children":[{"level":3,"title":"Css variable","slug":"css-variable","link":"#css-variable","children":[]},{"level":3,"title":"less 变量","slug":"less-变量","link":"#less-变量","children":[]}]},{"level":2,"title":"单元测试","slug":"单元测试","link":"#单元测试","children":[{"level":3,"title":"单元测试目录","slug":"单元测试目录","link":"#单元测试目录","children":[]}]},{"level":2,"title":"打包构建与发布","slug":"打包构建与发布","link":"#打包构建与发布","children":[{"level":3,"title":"构建","slug":"构建","link":"#构建","children":[]},{"level":3,"title":"发布","slug":"发布","link":"#发布","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"article/record/td-custom.md","lastUpdated":1691596718000}'),F={name:"article/record/td-custom.md"},w=Object.assign(F,{setup(_){return(f,T)=>(p(),t("div",null,[i,r,o,a(n,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=1337%3A484&t=0UGDHRMQ2OaGJaKW-1"}),c,d,a(n,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=1337%3A530&t=0UGDHRMQ2OaGJaKW-1"}),D,b,u,a(n,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=1337-500&t=0UGDHRMQ2OaGJaKW-4"}),C,y,a(n,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=1337%3A549&t=0UGDHRMQ2OaGJaKW-1"}),h,a(n,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=1337-488&t=0UGDHRMQ2OaGJaKW-4"}),m,a(n,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=1337-482&t=0UGDHRMQ2OaGJaKW-4"}),A,a(n,{url:"https://www.figma.com/file/E2utI9rEseFTc7tJ3Bbl9o/blog?type=whiteboard&node-id=1337-514&t=0UGDHRMQ2OaGJaKW-4"}),g]))}});export{x as __pageData,w as default};
