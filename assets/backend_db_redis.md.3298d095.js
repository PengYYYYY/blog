import{_ as s,c as a,o as e,a as l}from"./app.cb2158be.js";const n='{"title":"redis","description":"","frontmatter":{},"headers":[{"level":2,"title":"安装","slug":"安装"},{"level":2,"title":"使用yum安装","slug":"使用yum安装"},{"level":2,"title":"特点","slug":"特点"},{"level":2,"title":"应用场景","slug":"应用场景"},{"level":3,"title":"缓存","slug":"缓存"},{"level":3,"title":"分布式锁","slug":"分布式锁"},{"level":3,"title":"自动过期","slug":"自动过期"},{"level":3,"title":"秒杀的缓存层","slug":"秒杀的缓存层"},{"level":3,"title":"发布订阅","slug":"发布订阅"},{"level":2,"title":"redis问题","slug":"redis问题"},{"level":3,"title":"缓存雪崩","slug":"缓存雪崩"},{"level":3,"title":"缓存穿透","slug":"缓存穿透"},{"level":3,"title":"缓存击穿","slug":"缓存击穿"},{"level":3,"title":"缓存雪崩和缓存击穿的区别","slug":"缓存雪崩和缓存击穿的区别"},{"level":2,"title":"Redis 的过期策略和内存淘汰机制","slug":"redis-的过期策略和内存淘汰机制"},{"level":3,"title":"过期策略","slug":"过期策略"},{"level":3,"title":"内存淘汰机制","slug":"内存淘汰机制"}],"relativePath":"backend/db/redis.md"}',i={},p=[l('<h1 id="redis" tabindex="-1">redis <a class="header-anchor" href="#redis" aria-hidden="true">#</a></h1><p>redis是一个开源数据的kv数据库，它的数据放置于内存当中，常用来做缓存服务器。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-hidden="true">#</a></h2><p>安装</p><div class="language-bash"><pre><code><span class="line"><span style="color:#A6ACCD;">//下载</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">wget </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">http://download.redis.io/releases/redis-5.0.8.tar.gz</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">安装目录/usr/local/redis</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">//解压</span></span>\n<span class="line"><span style="color:#A6ACCD;">tar -zxf xx</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">make</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">// 执行make install进行Redis安装</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">make install</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">//为了方便管理，将Redis文件中的conf配置文件和常用命令移动到统一文件中</span></span>\n<span class="line"><span style="color:#A6ACCD;">mkdir bin etc</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">mv redis.conf /usr/local/redis/etc/</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-rdb redis-cli redis-server /usr/local/redis/bin/</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">// 启动</span></span>\n<span class="line"><span style="color:#A6ACCD;">redis-server</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">// 设置绑定ip</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">vim /etc/redis.conf</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">bind</span><span style="color:#A6ACCD;"> xxx</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">// 设置后台启动redis</span></span>\n<span class="line"><span style="color:#A6ACCD;">vim redis.conf</span></span>\n<span class="line"><span style="color:#A6ACCD;">daemonized yes</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">// 查看redis进程</span></span>\n<span class="line"><span style="color:#A6ACCD;">netstat -tunpl</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">grep 6379</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">// 链接redis客户端</span></span>\n<span class="line"><span style="color:#A6ACCD;">redis-cli</span></span>\n<span class="line"></span></code></pre></div><h2 id="使用yum安装" tabindex="-1">使用yum安装 <a class="header-anchor" href="#使用yum安装" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">//需要安装Remi的软件源</span></span>\n<span class="line"><span style="color:#A6ACCD;">yum install </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">y </span><span style="color:#FFCB6B;">http</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//rpms.famillecollet.com/enterprise/remi-release-7.rpm</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">//然后可以使用下面的命令安装最新版本的redis</span></span>\n<span class="line"><span style="color:#A6ACCD;">yum </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">enablerepo</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">remi install redis</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">//安装完毕后，即可使用下面的命令启动redis服务</span></span>\n<span class="line"><span style="color:#A6ACCD;">service redis start</span></span>\n<span class="line"><span style="color:#A6ACCD;">或者</span></span>\n<span class="line"><span style="color:#A6ACCD;">systemctl start redis</span></span>\n<span class="line"></span></code></pre></div><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-hidden="true">#</a></h2><ul><li>速度快，因为数据在内存当中，类似于HashMap</li><li>支持丰富的数据类型，string, list, set, hash</li><li>支持事物，操作都是原子性的</li><li>丰富的特性，应用场景广泛</li></ul><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-hidden="true">#</a></h2><h3 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-hidden="true">#</a></h3><p>因为redis的读取性能优异，每秒可以处理超过10w次的读写操作。redis可以保存多种数据结构，单个value的最大限制是1GB,而memcached只能保存1md的数据。</p><h3 id="分布式锁" tabindex="-1">分布式锁 <a class="header-anchor" href="#分布式锁" aria-hidden="true">#</a></h3><p>因为redis单线程的特点，对于高并发系统，都是用多服务器部署，在进行逻辑处理的时候可以用到分布式锁来限制程序的并发。</p><h3 id="自动过期" tabindex="-1">自动过期 <a class="header-anchor" href="#自动过期" aria-hidden="true">#</a></h3><p>redis针对数据都可以设置过期时间，可以自动清理过期数据，常见的应用场景：短信验证码，活动开始和截止日期等。</p><h3 id="秒杀的缓存层" tabindex="-1">秒杀的缓存层 <a class="header-anchor" href="#秒杀的缓存层" aria-hidden="true">#</a></h3><p>可以利用redis单线程的特性来控制并发，将redis作为缓存平台，由于其读写能力强，不易产生程序阻塞现象。</p><h3 id="发布订阅" tabindex="-1">发布订阅 <a class="header-anchor" href="#发布订阅" aria-hidden="true">#</a></h3><p>可以使用redis的发布订阅模式实现一些聊天系统。</p><h2 id="redis问题" tabindex="-1">redis问题 <a class="header-anchor" href="#redis问题" aria-hidden="true">#</a></h2><h3 id="缓存雪崩" tabindex="-1">缓存雪崩 <a class="header-anchor" href="#缓存雪崩" aria-hidden="true">#</a></h3><p>缓存雪崩，是指缓存中设置了大批量相同过期时间的数据同时过期失效，而在这一刻访问量剧增，缓存近乎失效，所有请求全部转向DB，DB瞬时压力过重雪崩，甚至down机。和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p><p>解决方案：</p><ul><li>设置热点数据永不过期。</li><li>过期时间设置随机，防止同一时间大量数据过期现象发生。</li><li>若redis缓存是分布式部署，可以把热点数据均匀分布在不同缓存数据库中。</li></ul><h3 id="缓存穿透" tabindex="-1">缓存穿透 <a class="header-anchor" href="#缓存穿透" aria-hidden="true">#</a></h3><p>缓存穿透是指查询一个缓存和数据库中都没有的数据，由于大部分缓存策略是被动加载的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。用户不断发起请求，在流量大时，就可能对DB形成巨大的压力，利用不存在的key频繁攻击应用也是很大的问题。</p><ul><li><p>缓存和数据库中都不存在的数据，可以将此key对应的value设置为一个默认的值，比如“NULL”，并设置一个缓存的失效时间，这时在缓存失效之前，所有通过此key的访问都被缓存挡住了。后面如果此key对应的数据在DB中存在时，缓存失效之后，通过此key再去访问数据，就能拿到新的value了。</p></li><li><p>接口层增加校验，比如用户鉴权校验，id根据数据场景做基础校验，id&lt;=0的直接拦截。</p></li></ul><h3 id="缓存击穿" tabindex="-1">缓存击穿 <a class="header-anchor" href="#缓存击穿" aria-hidden="true">#</a></h3><p>缓存击穿是指缓存中的一个热点Key(比如一个秒杀商品)，在某个时间点过期的时候，恰好在这个时间点访问量剧增，对这个Key有大量的并发请求过来，请求发现缓存过期一般都会从后端DB加载数据并回设回缓存，但就在缓存中的数据还没有完全从DB中加载过来的这个时间段期间，并发瞬间造成大量请求直接击穿到DB，对DB形成巨大压力。</p><p>缓存击穿，又叫热点key问题，是这三个问题中最经典的一个问题。</p><ul><li>设置热点数据永不过期。</li><li>资源保护，服务降级。</li></ul><h3 id="缓存雪崩和缓存击穿的区别" tabindex="-1">缓存雪崩和缓存击穿的区别 <a class="header-anchor" href="#缓存雪崩和缓存击穿的区别" aria-hidden="true">#</a></h3><p>缓存击穿跟缓存雪崩类似，区别就是缓存雪崩是群体失效，缓存击穿是单体失效。</p><h2 id="redis-的过期策略和内存淘汰机制" tabindex="-1">Redis 的过期策略和内存淘汰机制 <a class="header-anchor" href="#redis-的过期策略和内存淘汰机制" aria-hidden="true">#</a></h2><h3 id="过期策略" tabindex="-1">过期策略 <a class="header-anchor" href="#过期策略" aria-hidden="true">#</a></h3><blockquote><p>定期删除</p></blockquote><p>定期删除指的是Redis默认每隔100ms就随机抽取一些设置了过期时间的key，检测这些key是否过期，如果过期了就将其删掉。</p><p>因为key太多，如果全盘扫描所有的key会非常耗性能，所以是随机抽取一些key来删除。这样就有可能删除不完，需要惰性删除配合。</p><blockquote><p>惰性删除</p></blockquote><p>惰性删除不再是Redis去主动删除，而是在客户端要获取某个key的时候，Redis会先去检测一下这个key是否已经过期，如果没有过期则返回给客户端，如果已经过期了，那么Redis会删除这个key，不会返回给客户端。</p><p>所以惰性删除可以解决一些过期了，但没被定期删除随机抽取到的key。但有些过期的key既没有被随机抽取，也没有被客户端访问，就会一直保留在数据库，占用内存，长期下去可能会导致内存耗尽。所以Redis提供了内存淘汰机制来解决这个问题。</p><h3 id="内存淘汰机制" tabindex="-1">内存淘汰机制 <a class="header-anchor" href="#内存淘汰机制" aria-hidden="true">#</a></h3><p>Redis在使用内存达到某个阈值（通过maxmemory配置)的时候，就会触发内存淘汰机制，选取一些key来删除。内存淘汰有许多策略，下面分别介绍这几种不同的策略。</p><ul><li>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。默认策略</li><li>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。</li><li>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。</li><li>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。</li><li>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。</li><li>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。</li></ul>',45)];var r=s(i,[["render",function(s,l,n,i,r,t){return e(),a("div",null,p)}]]);export{n as __pageData,r as default};
