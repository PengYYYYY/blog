import{_ as a,c as e,o as t,U as r}from"./chunks/framework.B9byA8Cw.js";const f=JSON.parse('{"title":"数据流","description":"","frontmatter":{},"headers":[],"relativePath":"font-end-framework/architecture/data.md","filePath":"font-end-framework/architecture/data.md","lastUpdated":1710173044000}'),o={name:"font-end-framework/architecture/data.md"},i=r('<h1 id="数据流" tabindex="-1">数据流 <a class="header-anchor" href="#数据流" aria-label="Permalink to &quot;数据流&quot;">​</a></h1><p>双方数据流对比，</p><h2 id="vue" tabindex="-1">vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;vue&quot;">​</a></h2><p>数据可变</p><h3 id="数据响应式" tabindex="-1">数据响应式 <a class="header-anchor" href="#数据响应式" aria-label="Permalink to &quot;数据响应式&quot;">​</a></h3><ul><li><p>vue2 使用了核心api，Object.defineProperty，</p></li><li><p>vue3 使用了ES6 的 Proxy，对数据进行变化侦测，添加 getter 和 setter，这样就知道数据何时被读取和修改</p></li></ul><h3 id="数据收集" tabindex="-1">数据收集 <a class="header-anchor" href="#数据收集" aria-label="Permalink to &quot;数据收集&quot;">​</a></h3><p>核心是观察者模式</p><ul><li>Vue对于每个数据都收集了与之相关的依赖，这里的依赖其实就是一个对象，保存有该数据的旧值及数据变化后需要执行的函数。每个响应式的数据变化时会遍历通知其对应的每个依赖，依赖收到通知后会判断一下新旧值有没有发生变化，如果变化则执行回调函数响应数据变化（比如修改 dom）。</li></ul><h2 id="react" tabindex="-1">react <a class="header-anchor" href="#react" aria-label="Permalink to &quot;react&quot;">​</a></h2><p>数据不可变</p><p>不可变数据计算数据diff，需要用特定的api去处罚数据的变化。</p><h2 id="差异" tabindex="-1">差异 <a class="header-anchor" href="#差异" aria-label="Permalink to &quot;差异&quot;">​</a></h2><p>vue为immutable的代表，react为mutable。</p>',14),l=[i];function c(d,n,h,s,u,p){return t(),e("div",null,l)}const m=a(o,[["render",c]]);export{f as __pageData,m as default};
