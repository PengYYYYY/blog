import{_ as s,c as e,o as a,U as n}from"./chunks/framework.DezM5FT5.js";const l="/blog/assets/X7kyZl.T5kLp60H.png",b=JSON.parse('{"title":"事件系统","description":"","frontmatter":{},"headers":[],"relativePath":"font-end-framework/architecture/event.md","filePath":"font-end-framework/architecture/event.md","lastUpdated":1719151257000}'),o={name:"font-end-framework/architecture/event.md"},p=n(`<h1 id="事件系统" tabindex="-1">事件系统 <a class="header-anchor" href="#事件系统" aria-label="Permalink to &quot;事件系统&quot;">​</a></h1><h2 id="react" tabindex="-1">react <a class="header-anchor" href="#react" aria-label="Permalink to &quot;react&quot;">​</a></h2><p><code>React</code> 事件机制其实是使用了 <strong>事件委托</strong> 的方式，<code>React</code> 在内部自己实现了浏览器中对应事件的合成事件。在 <code>web</code> 浏览器中，浏览器在生成虚拟 <code>DOM</code> 树的时候，解析出的合成事件挂载到 <code>document</code> 上，部分事件仍然在 <code>DOM</code> 元素上，事件实现机制是插件机制，方便后续拓展。</p><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ol><li><code>React</code> 将事件都挂载在 <code>document</code> 上，减少了 <code>DOM</code> 节点上的事件信息，能够做到性能的优化；</li><li><code>React</code> 事件机制其实和 <code>React Virtual DOM</code> 的功能相似，<code>React</code> 团队希望 <code>React</code> 能够在多端运行，而事件的挂载可以在不同运行环境挂载到不同的节点上，从而事件不同端的运行，只需要在事件机制中做兼容处理；</li><li>事件分发：<code>React</code> 最新的调度算法 <code>Fiber</code> 会优化交互体验，内部优化浏览器渲染，干预事件分发也可以做更多的优化。</li></ol><h3 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h3><p><code>React</code> 事件机制我们主要分三部分来说：</p><ol><li><strong>插件注册</strong>：插件注册到一起，方便后面使用</li><li><strong>事件注册</strong>：<code>DOM</code> 的 <code>props</code> 中有事件属性，将事件挂载到 <code>document</code>，注册相应的 <code>listener</code></li><li><strong>事件分发</strong>：在监听的 <code>listener</code> 中，关联到插件，执行对应事件，根据不同的事件类型，事件执行也有不同的方式</li></ol><h4 id="插件注册" tabindex="-1">插件注册 <a class="header-anchor" href="#插件注册" aria-label="Permalink to &quot;插件注册&quot;">​</a></h4><p>目前 <code>React</code> 一共有 6 个事件插件，但是目前版本中 <code>ChangeEventPlugin</code> 没有在使用，同时 <code>ResponderEventPlugin</code> 只有 RN 在使用。</p><p>每个插件内部包含很多事件，插件主要是用来组合事件信息，提取事件对象的。</p><ul><li><p>左边和右边的插件区别在于，<code>simple</code> 就是简单，一般只有一个事件；而右边插件都是由多个事件组合成的事件；</p></li><li><p><code>SyntheticEvent</code> 是事件的构造函数，<code>SyntheticEvent</code> 对浏览器原生的事件进行 <strong>包装</strong>，生成一个新的 <code>event</code> 对象，里面有合成事件需要的参数，原声 <code>event</code> 变成了 <code>nativeEvent</code>，同时封装了 <code>preventDefault</code>、<code>stopPropagation</code> 等方法，提供了 <code>extend</code> 方法用来继承，采用寄生组合的方式，一些 <code>SyntheticEvent</code> 都是继承自这个构造函数；</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">dispatchConfig </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> dispatchConfig</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">_targetInst </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> targetInst</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">nativeEvent </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> nativeEvent</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><code>SyntheticEvent</code> 有一个 <code>pool</code> 的概念，为了避免每一次都是用构造函数创建实例，在一个实例使用过后清空自身属性（设置为 <code>null</code>），然后需要创建新的实例时，优先获取空实例，添加对应的属性；</p></li><li><p>每一个插件主要由两部分组成，一部分是 <code>eventTypes</code> 也就是插件包括的一些事件和事件依赖的一些事件（合成事件会依赖多个事件），另一部分是 <code>extractEvents</code> 获取事件对象，在事件触发时会调用这个方法获取事件对象</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> plugin </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  eventTypes</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    change</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">      phasedRegistrationNames</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">        bubbled</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">onChange</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        captured</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">onChangeCapture</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">      },</span></span>
<span class="line"><span style="color:#F07178;">      dependencies</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [TOP_BLUR]</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#82AAFF;">  extractEvents</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><p>事件最后都会继承到 <code>EventHub</code> 上，本质上就是一个数组，只不过是固定顺序的数组，同时继承数组时生成一些 <code>Map</code> 方便以后使用</p><ul><li>registrationNameDependencies: eventName -&gt; eventDependencied</li><li>registrationNameModules: eventName -&gt; plugin</li></ul></li></ul><h4 id="事件注册" tabindex="-1">事件注册 <a class="header-anchor" href="#事件注册" aria-label="Permalink to &quot;事件注册&quot;">​</a></h4><p>这一步主要是针对 <code>DOM</code> 树解析，添加事件的流程。<code>Listener</code> 里面包含了事件获取执行。<code>registrationModules</code>、<code>registrationNameDependencies</code> 就是之前插件注册时生成的对象。</p><ul><li>关于合成事件：其实多个事件组合成的事件，但是 <code>simpleEvent</code> 本质上并不算一个合成事件，因为它还是一对一的关系，其他的插件因为有对应多个的 <code>dependencies</code>，所以才是真正的合成事件</li><li>合成事件的监听：许多合成事件浏览器没有对应事件，所以我们需要伪装，其实就是监听事件 <code>dependencies</code> 中的事件</li><li>关于事件监听节点：是监听的节点其实是 <code>document</code>，但是在不同的运行环境下监听的节点可能不同，可能是 <code>iframe</code> 也可能是其他节点</li></ul><h4 id="事件分发" tabindex="-1">事件分发 <a class="header-anchor" href="#事件分发" aria-label="Permalink to &quot;事件分发&quot;">​</a></h4><p><code>React16</code> 以后开始做浏览器的调度工作，其实调度工作不止 <code>DOM diff</code> 上，在事件上也做了部分调度。</p><p><code>React</code> 把事件做了分类：</p><ul><li>DiscreateEvent：失焦、聚焦类事件，调用 <code>dispatchDiscreateEvent</code></li><li>UserBlockingEvent：用户连续行操作，比如鼠标移动、拖拽等，调用 <code>scheduler</code> 的 <code>runWithPriority</code></li><li>ContinuousEvent &amp;&amp; default：连续性事件，直接执行</li></ul><p>上面三种事件其实最后都是调用了 <code>dispatchEvent</code> 函数，但是因为优先级的原因，事件的调度方法不一样，最后执行的时间也不一样。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 事件优先级</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> const</span><span style="color:#BABED8;"> DiscreteEvent</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> EventPriority</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> const</span><span style="color:#BABED8;"> UserBlockingEvent</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> EventPriority</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> const</span><span style="color:#BABED8;"> ContinuousEvent</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> EventPriority</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="对比-react-合成事件与-javascript-原生事件" tabindex="-1">对比 React 合成事件与 JavaScript 原生事件 <a class="header-anchor" href="#对比-react-合成事件与-javascript-原生事件" aria-label="Permalink to &quot;对比 React 合成事件与 JavaScript 原生事件&quot;">​</a></h3><p>下面我们从 4 个方面对比 <code>React</code> 合成事件与 <code>JavaScript</code> 原生事件。</p><h4 id="事件传播与阻止事件传播" tabindex="-1">事件传播与阻止事件传播 <a class="header-anchor" href="#事件传播与阻止事件传播" aria-label="Permalink to &quot;事件传播与阻止事件传播&quot;">​</a></h4><p>浏览器原生 <code>DOM</code> 事件的传播可以分为 3 个阶段：事件捕获阶段、目标对象本身的事件处理程序调用以及事件冒泡。事件捕获会优先调用结构树最外层的元素上绑定的事件监听器，然后依次向内调用，一直调用到目标元素上的事件监听器为止。事件捕获并非是一个通用的技术，在低于 <code>IE9</code> 版本的浏览器无法使用。而事件冒泡则与事件捕获的表现相反，它会从目标元素向外传播事件，由内而外直到最外层。</p><p>可以看出，事件捕获在程序开发中的意义并不大，更致命的是它的兼容性问题。所以，React 的合成事件则并没有实现事件捕获，仅仅支持了事件冒泡机制。这种 API 设计方式统一而简洁，符合 “<em>二八原则</em>”。</p><p>阻止原生事件传播需要使用 <code>e.preventDefault()</code> ，不过对于不支持该方法的浏览器（IE9 以下），只能使用 <code>e.cancelBubble = true</code> 来阻止。而在 REact 合成事件中，只需要使用 <code>e.preventDefault()</code> 即可。</p><h4 id="事件类型" tabindex="-1">事件类型 <a class="header-anchor" href="#事件类型" aria-label="Permalink to &quot;事件类型&quot;">​</a></h4><p><code>React</code> 合成事件的事件类型是 <code>JavaScript</code> 原生事件类型的一个子集。</p><h4 id="事件绑定方式" tabindex="-1">事件绑定方式 <a class="header-anchor" href="#事件绑定方式" aria-label="Permalink to &quot;事件绑定方式&quot;">​</a></h4><p>受到 <code>DOM</code> 标准的影响，绑定浏览器原生事件的方式也有很多种，具体如下所示：</p><ul><li><p>直接在 <code>DOM</code> 元素上写内联绑定：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#C792EA;"> onclick</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#82AAFF;">alert</span><span style="color:#C3E88D;">(</span><span style="color:#F78C6C;">1</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">;&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  Button</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>在 <code>JavaScript</code> 中，通过元素的事件属性赋值的方式实现绑定：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">el</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;font-style:italic;"> e</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">e</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>通过事件监听函数来实现</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">el</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {},</span><span style="color:#FF9CAC;"> false</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">el</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">attachEvent</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">onclick</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><p>相比而言，<code>React</code> 合成事件的绑定方式则简单很多：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#C792EA;"> onclick</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;this.</span><span style="color:#BABED8;">handleClick</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  Button</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="事件对象" tabindex="-1">事件对象 <a class="header-anchor" href="#事件对象" aria-label="Permalink to &quot;事件对象&quot;">​</a></h4><p>原生 <code>DOM</code> 事件对象在 <code>W3C</code> 标准和 IE 标准下存在差异。在低版本的 <code>IE</code> 浏览器中，只能使用 <code>window.event</code> 来获取事件对象。而在 <code>React</code> 合成事件中，<code>React</code> 抹平了各个浏览器的差异，在事件处理函数中可以得到一个统一的合成事件对象。</p><h2 id="vue" tabindex="-1">vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;vue&quot;">​</a></h2><p><code>vue</code> 主要是观察者模式的实现</p><p><img src="`+l+'" alt="img"></p>',39),c=[p];function t(r,i,d,D,F,y){return a(),e("div",null,c)}const h=s(o,[["render",t]]);export{b as __pageData,h as default};
