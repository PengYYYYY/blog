import{_ as s,o as n,c as a,a as l}from"./app.06fa9719.js";const p="/blog/assets/vwW5py.20e02880.png",A=JSON.parse('{"title":"Vue 常见问题","description":"","frontmatter":{},"headers":[{"level":2,"title":"生命周期相关","slug":"生命周期相关","link":"#生命周期相关","children":[{"level":3,"title":"vue 的生命周期","slug":"vue-的生命周期","link":"#vue-的生命周期","children":[]},{"level":3,"title":"Vue 组件中的 data 为什么必须是函数，而根实例没有此限制","slug":"vue-组件中的-data-为什么必须是函数-而根实例没有此限制","link":"#vue-组件中的-data-为什么必须是函数-而根实例没有此限制","children":[]}]},{"level":2,"title":"编译相关","slug":"编译相关","link":"#编译相关","children":[{"level":3,"title":"v-if 与 v-for 哪个优先级更高？如果两个同时出现，应该怎么优化得到更好的性能","slug":"v-if-与-v-for-哪个优先级更高-如果两个同时出现-应该怎么优化得到更好的性能","link":"#v-if-与-v-for-哪个优先级更高-如果两个同时出现-应该怎么优化得到更好的性能","children":[]},{"level":3,"title":"vue 模版渲染","slug":"vue-模版渲染","link":"#vue-模版渲染","children":[]},{"level":3,"title":"template 预编译是什么","slug":"template-预编译是什么","link":"#template-预编译是什么","children":[]},{"level":3,"title":"template 和 jsx 有什么区别","slug":"template-和-jsx-有什么区别","link":"#template-和-jsx-有什么区别","children":[]}]},{"level":2,"title":"渲染与更新相关","slug":"渲染与更新相关","link":"#渲染与更新相关","children":[{"level":3,"title":"vue 中 key 的工作原理","slug":"vue-中-key-的工作原理","link":"#vue-中-key-的工作原理","children":[]},{"level":3,"title":"怎么理解 vue 中的 diff 算法","slug":"怎么理解-vue-中的-diff-算法","link":"#怎么理解-vue-中的-diff-算法","children":[]},{"level":3,"title":"组件的本质","slug":"组件的本质","link":"#组件的本质","children":[]},{"level":3,"title":"自定义模式","slug":"自定义模式","link":"#自定义模式","children":[]},{"level":3,"title":"vue异步更新流程","slug":"vue异步更新流程","link":"#vue异步更新流程","children":[]}]},{"level":2,"title":"重点API","slug":"重点api","link":"#重点api","children":[{"level":3,"title":"computed 与 watch 的区别","slug":"computed-与-watch-的区别","link":"#computed-与-watch-的区别","children":[]},{"level":3,"title":"watch 的实现原理","slug":"watch-的实现原理","link":"#watch-的实现原理","children":[]},{"level":3,"title":"数组数据的响应化过程","slug":"数组数据的响应化过程","link":"#数组数据的响应化过程","children":[]},{"level":3,"title":"transition 动画","slug":"transition-动画","link":"#transition-动画","children":[]},{"level":3,"title":"keep-alive 组件有什么作用","slug":"keep-alive-组件有什么作用","link":"#keep-alive-组件有什么作用","children":[]},{"level":3,"title":"创建 vue 节点的两种方式","slug":"创建-vue-节点的两种方式","link":"#创建-vue-节点的两种方式","children":[]}]},{"level":2,"title":"概念性问题","slug":"概念性问题","link":"#概念性问题","children":[{"level":3,"title":"组件化的理解","slug":"组件化的理解","link":"#组件化的理解","children":[]},{"level":3,"title":"使用组件","slug":"使用组件","link":"#使用组件","children":[]},{"level":3,"title":"vue性能优化","slug":"vue性能优化","link":"#vue性能优化","children":[]}]}],"relativePath":"font-end-framework/vue/question.md","lastUpdated":1691648197000}'),e={name:"font-end-framework/vue/question.md"},o=l(`<h1 id="vue-常见问题" tabindex="-1">Vue 常见问题 <a class="header-anchor" href="#vue-常见问题" aria-hidden="true">#</a></h1><h2 id="生命周期相关" tabindex="-1">生命周期相关 <a class="header-anchor" href="#生命周期相关" aria-hidden="true">#</a></h2><h3 id="vue-的生命周期" tabindex="-1">vue 的生命周期 <a class="header-anchor" href="#vue-的生命周期" aria-hidden="true">#</a></h3><p>beforeCreate：是 new Vue() 之后触发的第一个钩子，在当前阶段 data、methods、computed 以及 watch 上的数据和方法都不能被访问。</p><p>created：在实例创建完成后发生，当前阶段已经完成了数据观测，也就是可以使用数据，更改数据，在这里更改数据不会触发 updated 函数。可以做一些初始数据的获取，在当前阶段无法与 Dom 进行交互，如果非要想，可以通过 vm.$nextTick 来访问 Dom。</p><p>beforeMount：发生在挂载之前，也就是响应式数据发生更新，虚拟 dom 重新渲染之前被触发，你可以在当前阶段进行更改数据，不会造成重渲染。</p><p>mounted：在挂载完成后发生，在当前阶段，真实的Dom挂载完毕，数据完成双向绑定，可以访问到Dom节点，使用$refs属性对Dom进行操作。</p><p>beforeUpdate：发生在更新之前，也就是响应式数据发生更新，虚拟dom重新渲染之前被触发，可以在当前阶段进行更改数据，不会造成重渲染。</p><p>updated：发生在更新完成之后，当前阶段组件 Dom 已完成更新。要避免在此期间更改数据，因为这可能会导致无限循环的更新。</p><p>beforeDestroy：发生在实例销毁之前，在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作。</p><p>destroyed：发生在实例销毁之后，这个时候只剩下了 dom 空壳。组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁。</p><h3 id="vue-组件中的-data-为什么必须是函数-而根实例没有此限制" tabindex="-1">Vue 组件中的 data 为什么必须是函数，而根实例没有此限制 <a class="header-anchor" href="#vue-组件中的-data-为什么必须是函数-而根实例没有此限制" aria-hidden="true">#</a></h3><p>此过程发生在 initData 函数中。</p><p>Vue 组件可能会存在多个实例，如果使用对象形式定义 data，则会导致它们共用一个 data 对象，状态的更新会影响所有组件实例。</p><p>当采用函数形式定义，在 initData 时会将其作为工厂函数返回全新 data 对象，每次都会创建新的对象，有效规避多实例之间状态污染问题。</p><p>而在Vue根实例创建过程中则不存在该限制，是单例的，也是因为根实例只能有一个，不需要担心这种情况。</p><p>在初始化过程中，会判断 data 的类型走不同的方式。根实例与组件实例走的逻辑不一样</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 根例</span></span>
<span class="line"><span style="color:#82AAFF;">mergeDataOrFn</span><span style="color:#A6ACCD;">(parentVal</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> childVal</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> vm)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 组件实例</span></span>
<span class="line"><span style="color:#82AAFF;">mergeDataOrFn</span><span style="color:#A6ACCD;">(parentVal</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> childVal )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mergeDataOrFn</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">parentVal</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">childVal</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">vm</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">vm</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">childVal</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parentVal</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">parentVal</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">childVal</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">mergedDataFn</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">mergeData</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">childVal</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">childVal</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">childVal</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parentVal</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parentVal</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parentVal</span></span>
<span class="line"><span style="color:#F07178;">      )</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">mergedInstanceDataFn</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// instance merge</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">instanceData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">childVal</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">childVal</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vm</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">childVal</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defaultData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parentVal</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parentVal</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vm</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parentVal</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">instanceData</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">mergeData</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">instanceData</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defaultData</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defaultData</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h2 id="编译相关" tabindex="-1">编译相关 <a class="header-anchor" href="#编译相关" aria-hidden="true">#</a></h2><h3 id="v-if-与-v-for-哪个优先级更高-如果两个同时出现-应该怎么优化得到更好的性能" tabindex="-1">v-if 与 v-for 哪个优先级更高？如果两个同时出现，应该怎么优化得到更好的性能 <a class="header-anchor" href="#v-if-与-v-for-哪个优先级更高-如果两个同时出现-应该怎么优化得到更好的性能" aria-hidden="true">#</a></h3><p>在 <code>vue</code> 源码中的 <code>compiler/codegen/index.js</code> 中可以找到答案。</p><ul><li>解决方案1</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">child in children</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">isFolder</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;">child.title</span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>由于在生成渲染函数的时候 <code>v-for</code> 的优先级高于 <code>v-if</code>,<code>v-if</code>会在<code>v-for</code>生成渲染子项的内部。循环会在外面先执行,浪费了性能。</p><ul><li>解决方案2</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">isFolder</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">child in children</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> &gt;{{</span><span style="color:#A6ACCD;">child.title</span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>先判断函数再循环，当condition成立的时候才会去执行渲染列表，否则是个empty函数</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果和渲染子项的数据有关,则把渲染数据放到<code>computed</code>里面做一次<code>filter</code>,留下需要渲染的项目即可。</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果条件出现在循环内部，可通过计算属性提前过滤掉那些不需要显示的项</p></div><h3 id="vue-模版渲染" tabindex="-1">vue 模版渲染 <a class="header-anchor" href="#vue-模版渲染" aria-hidden="true">#</a></h3><p><code>vue</code> 中的模版 <code>template</code> 会被 <code>vue-loader</code> 转换为 <code>render</code> 函数, 并渲染出对应的HTML元素，就可以让视图跑起来了。</p><p>模版编译分三个阶段：解析 <code>parse</code>，优化 <code>optimize</code>，生成 <code>generate</code>，最终生成可执行函数 <code>render</code>。</p><ul><li>parse 阶段：使用大量的正则表达式对 <code>template</code> 字符串进行解析，将标签、指令、属性等转换为 <code>AST</code>。</li><li>optimize 阶段：遍历 <code>AST</code>, 找到其中的一些静态节点，并做标记，方便在页面重渲染的时候进行 <code>diff</code> 比较时，直接跳过这一些静态节点，优化 <code>runtime</code> 的性能。</li><li>generate 阶段：将最终的 <code>AST</code> 转化为 <code>render</code> 函数字符串。</li></ul><h3 id="template-预编译是什么" tabindex="-1">template 预编译是什么 <a class="header-anchor" href="#template-预编译是什么" aria-hidden="true">#</a></h3><p>对于 <code>Vue</code> 组件来说，模板编译只会在组件实例化的时候编译一次，生成渲染函数之后在也不会进行编译。因此，编译对组件的 <code>runtime</code> 是一种性能损耗。</p><p>而模版编译的目的仅仅是将 <code>template</code> 转换为 <code>render function</code>,这个过程，正好可以在项目构建过程中完成，这样可以让实际组件在runtime过程中跳过模版渲染，进而提升性能，这个在项目构建的编译template的过程，就是预编译。</p><h3 id="template-和-jsx-有什么区别" tabindex="-1">template 和 jsx 有什么区别 <a class="header-anchor" href="#template-和-jsx-有什么区别" aria-hidden="true">#</a></h3><p>对于 runtime 来说，只需要保证组件存在 render 函数即可，在预编译之后，只需要保证构建过程中生成 render 函数即可。</p><p>在 webpack 中，只需要保证组件存在 render 函数即可，而我们有了预编译之后，我们只需要保证构建过程中生成 render 函数就可以。</p><p>在 webpack 中，我们使用 vue-loader 编译.vue文件，内部依赖的 vue-template-compiler 模块，在 webpack 构建过程中，将 template 预编译成 render 函数。</p><p>在 jsx 中，添加了语法糖解析器 <code>babel-plugin-transform-vue-jsx</code> 之后，可以直接手写 <code>render</code> 函数。</p><p>所以，<code>template</code> 和 <code>jsx</code> 都是 <code>render</code> 的一种表现形式，不同的是：</p><p><code>jsx</code> 相对于 <code>template</code> 会有更高的灵活性，在复杂组件中，更具有优势。<code>template</code> 在代码结构上更符合视图与逻辑分离的习惯，更简单、更直观、更好维护。</p><h2 id="渲染与更新相关" tabindex="-1">渲染与更新相关 <a class="header-anchor" href="#渲染与更新相关" aria-hidden="true">#</a></h2><h3 id="vue-中-key-的工作原理" tabindex="-1">vue 中 key 的工作原理 <a class="header-anchor" href="#vue-中-key-的工作原理" aria-hidden="true">#</a></h3><p>key 的作用主要应用在更新阶段。有以下几点用处：</p><ul><li>key 的作用主要是为了高效的更新虚拟 DOM，其原理是 vue 在 patch 过程中通过 key 可以精准判断两个节点是否是同一个，从而避免频繁更新不同元素，使得整个 patch 过程更加高效，减少 DOM 操作量，提高性能。</li><li>vue 中在使用相同标签名元素的过渡切换时，也会使用到 key 属性，其目的也是为了让 vue 可以区分它们，否则 vue 只会替换其内部属性而不会触发过渡效果。</li><li>在对节点进行 diff 的过程中，判断是否为相同节点的一个很重要的条件是 key 是否相等，如果是相同节点，则会尽可能的复用原有的 DOM 节点。所以 key 属性是提供给框架在diff的时候使用的，而非开发者。</li></ul><p>总而言之就是为了在 patch 阶段更加高效。</p><h3 id="怎么理解-vue-中的-diff-算法" tabindex="-1">怎么理解 vue 中的 diff 算法 <a class="header-anchor" href="#怎么理解-vue-中的-diff-算法" aria-hidden="true">#</a></h3><ul><li>为什么要 diff 算法</li></ul><p>精确比较，当 data 发生变化，可能存在多个 key,执行新旧两次虚拟 DOM 的 diff。 vue 2.x 中为了降低 Watcher 粒度，每个组件只有一个 Watcher 与之对应，只有引入 diff 才能精确找到 发生变化的地方。</p><ul><li>怎么执行</li></ul><p><code>patchVNode</code> 是 <code>diff</code> 发生的地方，整体策略：深度优先同层遍历。 vue 中 diff 执行的时刻是组件实例执行其更新函数时，它会比对上一次渲染结果 oldVNode 和新的渲染 结果 newVNode</p><ul><li>高效</li></ul><p>双路比较。发生在 <code>updateChildren</code></p><ul><li>diff 算法是虚拟 DOM 技术的必然产物：通过新旧虚拟 DOM 作对比（即 diff），将变化的地方更新在真实 DOM 上；另外，也需要 diff 高效的执行对比过程，从而降低时间复杂度为 O(n)。</li><li>diff 过程整体遵循深度优先、同层比较的策略；两个节点之间比较会根据它们是否拥有子节点或者文本节点做不同操作；比较两组子节点是算法的重点，首先假设头尾节点可能相同做4次比对尝试，如果没有找到相同节点才按照通用方式遍历查找，查找结束再按情况处理剩下的节点；借助 key 通常可以非常精确找到相同节点，因此整个 patch 过程非常高效。</li></ul><p>在新老虚拟 DOM 对比时</p><ul><li>首先，对比节点本身，判断是否是同一节点，如果不为相同节点，则删除该节点重新创建节点进行替换。</li><li>如果为相同节点，进行 <code>patchVNode</code>, 判断如何对该节点的子节点进行处理，先判断一方有子节点一方没有子节点的情况。(如果新的 children 没有子节点，将旧的子节点移除)</li><li>比较如果都有子节点，则进行 updateChildren，判断如何对这些新老节点的子节点进行操作</li><li>匹配时，找到相同的子节点，递归比较子节点</li></ul><h3 id="组件的本质" tabindex="-1">组件的本质 <a class="header-anchor" href="#组件的本质" aria-hidden="true">#</a></h3><ul><li>组件配置 =&gt; VueComponent实例 =&gt; render =&gt; Virtual Dom =&gt; Dom</li></ul><p>组件的本质就是产生虚拟Dom.</p><h3 id="自定义模式" tabindex="-1">自定义模式 <a class="header-anchor" href="#自定义模式" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">comp</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;div&gt;my component&lt;/div&gt;</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>组件化性能高，执行效率变高，<code>watcher</code>粒度化, <code>patch</code> 范围变小。</li><li>组件是独立和可复用的代码组织单元。组件系统是 Vue 核心特性之一，它使开发者使用小型、独立和通常可复用的组件构建大型应用。</li><li>组件化开发能大幅提高应用开发效率、测试性、复用性等。</li><li>组件使用按分类有：页面组件、业务组件、通用组件；</li><li>vue 的组件是基于配置的，我们通常编写的组件是组件配置而非组件，框架后续会生成其构造函数。</li><li>合理的划分组件，有助于提升应用性能</li><li>组件应该是高内聚、低耦合的</li><li>遵循单向数据流的原则</li><li>vue 中常见组件化技术有：属性 prop，自定义事件，插槽等，它们主要用于组件通信、扩展等。</li></ul><h3 id="vue异步更新流程" tabindex="-1">vue异步更新流程 <a class="header-anchor" href="#vue异步更新流程" aria-hidden="true">#</a></h3><ul><li>第一步</li></ul><p>队列保存更新函数，一个 <code>key</code> 对应一个 <code>watcher</code>,如果对相同 <code>key</code> 进行操作，则只会更新一次</p><ul><li>第二步</li></ul><p>批量处理，利用微任务。</p><p>优先级：</p><ol><li>Promise/MutationObserver</li><li>SetImmediate/SetTimeOut</li></ol><h2 id="重点api" tabindex="-1">重点API <a class="header-anchor" href="#重点api" aria-hidden="true">#</a></h2><h3 id="computed-与-watch-的区别" tabindex="-1">computed 与 watch 的区别 <a class="header-anchor" href="#computed-与-watch-的区别" aria-hidden="true">#</a></h3><p>计算属性 <code>computed</code> 和监听器 <code>watch</code> 都可以观察属性的变化从而做出响应，不同的是：</p><ul><li>computed</li></ul><p>计算属性 <code>computed</code> 更多是作为缓存功能的观察者，它可以将一个或者多个 <code>data</code> 的属性进行复杂的计算生成一个新的值，提供给渲染函数使用，当依赖的属性变化时，<code>computed</code> 不会立即重新计算生成新的值，而是先标记为脏数据，当下次 <code>computed</code> 被获取时候，才会进行重新计算并返回。</p><p>存取器的写法看上去就像设置一个属性一样了，而且我们还可以设置计算属性的值，上面的写法会影响到响应式属性 <code>n</code>,当设置 <code>vm.a</code> 时，<code>vm.n</code> 也会发生变化。 <code>computed</code> 默认有缓存效果，当计算属性没有发生变化时，不会重新计算更不会重新渲染。</p><ul><li>watch</li></ul><p>而监听器 watch 并不具备缓存性，监听器 watch 提供一个监听函数，当监听的属性发生变化时，会立即执行该函数。watch 是异步函数，如果我们的属性需要在侦听后再执行某个变化,可以使用 $nextTick 这个API。</p><h4 id="属性值的不同影响-watch-结果" tabindex="-1">属性值的不同影响 watch 结果 <a class="header-anchor" href="#属性值的不同影响-watch-结果" aria-hidden="true">#</a></h4><ul><li>当属性值为简单数据类型时，以 vm.a 为例，由于此时属性值是简单数据类型，所以很容易监听到其发生变化。此时属性值 ！== 改变后的属性值,就会触发 watch。</li><li>当属性值为复杂数据类型时，以 vm.b 为例子，它保存了 <code>{c:2}</code> 这个值。</li></ul><p>如果它的内存地址发生变化，也就是说原先的 <code>{c:2}</code> 和我后来设置的 <code>{c:2}</code> 的内存地址不一致，所以就会触发b变了，</p><h4 id="deep-和-immediate" tabindex="-1">deep 和 immediate <a class="header-anchor" href="#deep-和-immediate" aria-hidden="true">#</a></h4><p>deep 表示深侦听，也就是我设置的属性对应的属性值即使是复杂数据类型，加上 deep，就全方位侦听，包括地址、内层属性的地址、内层属性的属性值。</p><p>immediate 是表示当侦听开始时就先触发 callback 函数，默认为一开始不会触发 watch 效果，而仅仅是侦听。</p><h3 id="watch-的实现原理" tabindex="-1">watch 的实现原理 <a class="header-anchor" href="#watch-的实现原理" aria-hidden="true">#</a></h3><p>watch的分类：</p><ul><li>deep watch（深层次监听）</li><li>user watch（用户监听）</li><li>computed watcher（计算属性）</li><li>sync watcher（同步监听）</li></ul><p>watch实现过程：</p><ul><li>watch 的初始化在 data 初始化之后（此时的data已经通过Object.defineProperty的设置成响应式）</li><li>watch 的 key 会在 Watcher 里进行值的读取，也就是立马执行 get 获取 value（从而实现 data 对应的 key 执行 getter 实现对于 watch 的依赖收集），此时如果有 immediate 属性那么立马执行 watch 对应的回调函数</li><li>当 data 对应的 key 发生变化时，触发 user watch 实现 watch 回调函数的执行</li></ul><h3 id="数组数据的响应化过程" tabindex="-1">数组数据的响应化过程 <a class="header-anchor" href="#数组数据的响应化过程" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> originalProto </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arrProto </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(originalProto)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> methodsToPatch </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">push</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pop</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">shift</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">unshift</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">splice</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sort</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">reverse</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">methodsToPatch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">method</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">arrProto</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">method</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">originalProto</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">method</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="transition-动画" tabindex="-1">transition 动画 <a class="header-anchor" href="#transition-动画" aria-hidden="true">#</a></h3><p>name：用于自动生成 CSS 过渡类名。例如：name: &#39;fade&#39; 将自动拓展为 .fade-enter，.fade-enter-active 等。默认类名为 &quot;v&quot;</p><p><img src="`+p+`" alt="img"></p><h3 id="keep-alive-组件有什么作用" tabindex="-1">keep-alive 组件有什么作用 <a class="header-anchor" href="#keep-alive-组件有什么作用" aria-hidden="true">#</a></h3><p>如果你需要在组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用 keep-alive 组件包裹需要保存的组件。</p><p>对于 <code>keep-alive</code> 组件来说，它拥有两个独有的生命周期钩子函数，分别为 <code>activated</code> 和 <code>deactivated</code> 。用 <code>keep-alive</code>包 裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 <code>deactivated</code> 钩子函数，命中缓存渲染后会执行 <code>actived</code> 钩子函数。</p><p>源码中：<code>core/components/keep-alive</code></p><h3 id="创建-vue-节点的两种方式" tabindex="-1">创建 vue 节点的两种方式 <a class="header-anchor" href="#创建-vue-节点的两种方式" aria-hidden="true">#</a></h3><ul><li>vue-extend</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">create</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">Component</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 继承组件</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Ctor</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">extend</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">Component</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 传参</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">comp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Ctor</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    propsData</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">props</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 挂载</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">comp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$mount</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">comp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$el</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">comp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">remove</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">remove</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">comp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$el</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">comp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$destory</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li>实例化</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">create</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">Component</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vm</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// h是createElement, 返回VNode，是虚拟dom</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 需要挂载才能变成真实dom</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">render</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">h</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">h</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">Component</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$mount</span><span style="color:#F07178;">()</span><span style="color:#676E95;font-style:italic;">// 不指定宿主元素，则会创建真实dom，但是不会追加操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 获取真实dom</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$el</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">comp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$children</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 删除</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">comp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">remove</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">remove</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$el</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$destroy</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">comp</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="概念性问题" tabindex="-1">概念性问题 <a class="header-anchor" href="#概念性问题" aria-hidden="true">#</a></h2><h3 id="组件化的理解" tabindex="-1">组件化的理解 <a class="header-anchor" href="#组件化的理解" aria-hidden="true">#</a></h3><p>定义：组件是可复用的vue实例，准确的来说他们是<code>VueComponent</code>的实例，继承自<code>vue</code> 优点：软件工程中，高内聚，低耦合的一种体现。</p><h3 id="使用组件" tabindex="-1">使用组件 <a class="header-anchor" href="#使用组件" aria-hidden="true">#</a></h3><ul><li>定义：Vue.component(), new vue中的 components选项，sfc.</li><li>分类：有状态组件，函数式组件（functional），抽象组件（abstract，完成特定的功能）</li><li>通信：$on/$emit, props, provide/inject, $children/$parent/$root/$listeners</li><li>内容分发：slot, template, v-slot</li><li>使用和优化：is，keep-alive，异步组件</li></ul><h3 id="vue性能优化" tabindex="-1">vue性能优化 <a class="header-anchor" href="#vue性能优化" aria-hidden="true">#</a></h3><ul><li>路由懒加载</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> router </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">VueRouter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">routes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [ </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">component</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./Foo.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">   ] </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>keep-alive 缓存页面</li></ul><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">keep-alive</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">router-view</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">keep-alive</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>使用 v-show 复用 DOM</li></ul><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cell</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">&lt;!--这种情况用v-show可以复用DOM--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-show</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">on</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Heavy</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:n</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">10000</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">section</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-show</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">off</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Heavy</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:n</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">10000</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">section</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>数据冻结</li></ul><p>不变的大数据使用 <code>object.freeze()</code> 让数据变成不可响应，增加性能。</p><ul><li>事件销毁</li></ul><p>vue 组件销毁时，会自动解绑它的全部指令和事件监听器，但是仅限于组件本身的事件。</p><ul><li>无状态的组件标记为函数组件</li></ul><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">functional</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cell</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,122),c=[o];function t(r,i,F,y,D,d){return n(),a("div",null,c)}const C=s(e,[["render",t]]);export{A as __pageData,C as default};
