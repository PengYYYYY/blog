import{_ as s,o as a,c as n,a as e}from"./app.06fa9719.js";const l="/blog/assets/YdVByD.3afaa391.png",p="/blog/assets/lZoGn3.e01e90f0.png",b=JSON.parse('{"title":"SSR","description":"","frontmatter":{},"headers":[{"level":2,"title":"ssr的架构图","slug":"ssr的架构图","link":"#ssr的架构图","children":[{"level":3,"title":"主要流程","slug":"主要流程","link":"#主要流程","children":[]}]},{"level":2,"title":"ssr中的一些要点","slug":"ssr中的一些要点","link":"#ssr中的一些要点","children":[{"level":3,"title":"为什么需要使用 createAp 工厂函数","slug":"为什么需要使用-createap-工厂函数","link":"#为什么需要使用-createap-工厂函数","children":[]},{"level":3,"title":"webpack 的作用","slug":"webpack-的作用","link":"#webpack-的作用","children":[]},{"level":3,"title":"入口文件","slug":"入口文件","link":"#入口文件","children":[]},{"level":3,"title":"状态预取","slug":"状态预取","link":"#状态预取","children":[]}]},{"level":2,"title":"ssr 解决的问题","slug":"ssr-解决的问题","link":"#ssr-解决的问题","children":[]},{"level":2,"title":"ssr 的优点和缺点","slug":"ssr-的优点和缺点","link":"#ssr-的优点和缺点","children":[{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]},{"level":3,"title":"只是首屏加载快","slug":"只是首屏加载快","link":"#只是首屏加载快","children":[]},{"level":3,"title":"开发成本","slug":"开发成本","link":"#开发成本","children":[]}]},{"level":2,"title":"其他代替方案","slug":"其他代替方案","link":"#其他代替方案","children":[{"level":3,"title":"nuxt","slug":"nuxt","link":"#nuxt","children":[]},{"level":3,"title":"预渲染","slug":"预渲染","link":"#预渲染","children":[]},{"level":3,"title":"html loading","slug":"html-loading","link":"#html-loading","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"font-end-framework/vue/ssr.md","lastUpdated":1691648197000}'),o={name:"font-end-framework/vue/ssr.md"},r=e('<h1 id="ssr" tabindex="-1">SSR <a class="header-anchor" href="#ssr" aria-hidden="true">#</a></h1><h2 id="ssr的架构图" tabindex="-1">ssr的架构图 <a class="header-anchor" href="#ssr的架构图" aria-hidden="true">#</a></h2><p><img src="'+l+'" alt="img"></p><p><img src="'+p+`" alt="img"></p><h3 id="主要流程" tabindex="-1">主要流程 <a class="header-anchor" href="#主要流程" aria-hidden="true">#</a></h3><p>createApp , createStore , createRouter</p><p>entry-server: 路由匹配，</p><p>client-server: 路由与数据状态挂载。</p><h2 id="ssr中的一些要点" tabindex="-1">ssr中的一些要点 <a class="header-anchor" href="#ssr中的一些要点" aria-hidden="true">#</a></h2><p>总结了一些 SSR 中的要点</p><h3 id="为什么需要使用-createap-工厂函数" tabindex="-1">为什么需要使用 <code>createAp</code> 工厂函数 <a class="header-anchor" href="#为什么需要使用-createap-工厂函数" aria-hidden="true">#</a></h3><p>node.js 是一个长期运行的进程。当代码进入该进程时，它将进行一次取值并留存在内存中。这意味着如果只创建一个单例对象，它将在每个传入的请求之间共享。所以需要为每个请求创建一个新的根 Vue 实例。这与每个用户在自己的浏览器中使用新应用程序的实例类似。如果我们在多个请求之间使用一个共享的实例，很容易导致交叉请求状态污染 (cross-request state pollution)。</p><p>同样的规则也适用于 router、store 和 event bus 实例。</p><h3 id="webpack-的作用" tabindex="-1">webpack 的作用 <a class="header-anchor" href="#webpack-的作用" aria-hidden="true">#</a></h3><p>提供工程化能力，打包 bundle。</p><ul><li>服务器端 bundle，用于服务器端渲染(SSR)</li><li>客户端 bundle，用于混合静态标记。</li></ul><h3 id="入口文件" tabindex="-1">入口文件 <a class="header-anchor" href="#入口文件" aria-hidden="true">#</a></h3><p>分两个入口，<code>enrty-client.js</code> 和 <code>entry-server.js</code>。</p><blockquote><p>entry-server</p></blockquote><ul><li>执行服务器端路由匹配 (server-side route matching)</li><li>执行数据预取逻辑 (data pre-fetching logic)</li></ul><h3 id="状态预取" tabindex="-1">状态预取 <a class="header-anchor" href="#状态预取" aria-hidden="true">#</a></h3><blockquote><p>服务器预取</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// entry-server.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./app</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">router</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">store</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#F07178;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onReady</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">matchedComponents</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getMatchedComponents</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">matchedComponents</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">reject</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> code</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">404</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 对所有匹配的路由组件调用 \`asyncData()\`</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">all</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">matchedComponents</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">Component</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">Component</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">asyncData</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Component</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">asyncData</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            route</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">router</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">currentRoute</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 在所有预取钩子(preFetch hook) resolve 后，</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 我们的 store 现在已经填充入渲染应用程序所需的状态。</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 当我们将状态附加到上下文，</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 并且 \`template\` 选项用于 renderer 时，</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 状态将自动序列化为 \`window.__INITIAL_STATE__\`，并注入 HTML。</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">state</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">app</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">reject</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reject</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><blockquote><p>客户端预取</p></blockquote><h2 id="ssr-解决的问题" tabindex="-1">ssr 解决的问题 <a class="header-anchor" href="#ssr-解决的问题" aria-hidden="true">#</a></h2><p><code>spa</code> 颠覆了前端的开发模式，但是 <code>spa</code> 的缺点是首次需要加载大量的资源，当然可以用分包来缩小包体积。<code>spa</code> 的首屏确实是存在问题的。</p><p>并且 <code>spa</code> 首个被加载的 <code>html</code> 内容并不是用户看到的内容，不利于<code>ssr</code>.</p><h2 id="ssr-的优点和缺点" tabindex="-1">ssr 的优点和缺点 <a class="header-anchor" href="#ssr-的优点和缺点" aria-hidden="true">#</a></h2><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-hidden="true">#</a></h3><h4 id="更好的-seo" tabindex="-1">更好的 seo <a class="header-anchor" href="#更好的-seo" aria-hidden="true">#</a></h4><p>爬虫只会爬取源码。使用了<code>Vue</code>或者其它<code>MVVM</code>框架之后，页面大多数<code>DOM</code>元素都是在客户端根据<code>js</code>动态生成，可供爬虫抓取分析的内容大大减少。另外，浏览器爬虫不会等待我们的数据完成之后再去抓取我们的页面数据。服务端渲染返回给客户端的是已经获取了异步数据并执行<code>JavaScript</code>脚本的最终<code>HTML</code>，网络爬中就可以抓取到完整页面的信息。</p><h4 id="更快首屏的渲染" tabindex="-1">更快首屏的渲染 <a class="header-anchor" href="#更快首屏的渲染" aria-hidden="true">#</a></h4><p>首屏的渲染是 <code>node</code> 发送过来的 <code>html</code> 字符串，并不依赖 <code>js</code> 文件,这就会使用户更快的看到页面的内容。大型的单页应用，打包后体积很大，客户端渲染加载所有所需文件时间较长，首页就会有一段白屏时间。</p><h4 id="降级渲染" tabindex="-1">降级渲染 <a class="header-anchor" href="#降级渲染" aria-hidden="true">#</a></h4><p>当服务器负载过大时，我们需要做降级渲染，将渲染过程放到客户端中。实现方式很简单，通过node服务器中的开关，走不同的渲染模式即可。</p><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-hidden="true">#</a></h3><h4 id="服务端压力大" tabindex="-1">服务端压力大 <a class="header-anchor" href="#服务端压力大" aria-hidden="true">#</a></h4><p>统一到服务端<code>node</code>做渲染，会大量占用服务端<code>CPU</code>资源.</p><h4 id="更大的迁移成本" tabindex="-1">更大的迁移成本 <a class="header-anchor" href="#更大的迁移成本" aria-hidden="true">#</a></h4><p>除了对webpack、Vue要熟悉，还需要掌握node、Express相关技术。相对于客户端渲染，项目构建、部署过程更加复杂。</p><h3 id="只是首屏加载快" tabindex="-1">只是首屏加载快 <a class="header-anchor" href="#只是首屏加载快" aria-hidden="true">#</a></h3><p>只是首屏加载快，对用户已经看过的页面没有优势，每次都要请求服务端数据</p><h3 id="开发成本" tabindex="-1">开发成本 <a class="header-anchor" href="#开发成本" aria-hidden="true">#</a></h3><p>某些声明周期钩子函数（如beforeCreate、created）能同时运行在服务端和客户端，因此第三方库要做特殊处理，才能在服务器渲染应用程序中运行。而前端开发的发展的主线一直在解决开发效率的问题。</p><h2 id="其他代替方案" tabindex="-1">其他代替方案 <a class="header-anchor" href="#其他代替方案" aria-hidden="true">#</a></h2><h3 id="nuxt" tabindex="-1">nuxt <a class="header-anchor" href="#nuxt" aria-hidden="true">#</a></h3><p>nuxt 约定配置过多，适合从 0 开始开发一个新的应用，有 ssr 的需求，并且会带来一些学习成本，主要是各种约定。开发体验足够好。这得从公司技术栈的方向上来决定是否使用 nuxt。</p><h3 id="预渲染" tabindex="-1">预渲染 <a class="header-anchor" href="#预渲染" aria-hidden="true">#</a></h3><p>如果只是单方面对 <code>seo</code> 的要求的话,可以使用 <code>pre-render-plugin</code> 这个组件，将重要的需要 <code>seo</code> 的页面单独打出来，这也是官方推荐的一种方式。</p><h3 id="html-loading" tabindex="-1">html loading <a class="header-anchor" href="#html-loading" aria-hidden="true">#</a></h3><p>同时在用户体验方面来说，也可以使用 <code>html</code> 中塞入 <code>loading</code> 片段达到首屏快速呈现 <code>loading</code> 动画的效果。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p>从 0 开始做一套新的 ssr 架构的话，带来的技术难度是成倍增加的。但是很多时候 <code>SSR</code> 又是必须的，如果产品经理和你说，我不接受一开始一个 loading 动画，连骨架屏我也不接受，这时候如果系统架构不支持 SSR 的话，就歇菜了，架构师就要被开会了。</p>`,53),t=[r];function c(i,d,y,F,h,D){return a(),n("div",null,t)}const A=s(o,[["render",c]]);export{b as __pageData,A as default};
