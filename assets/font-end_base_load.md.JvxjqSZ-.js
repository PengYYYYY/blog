import{_ as s,c as o,o as e,U as a}from"./chunks/framework.BgVg8wer.js";const l="/blog/assets/mowrg2.Bj3hYZld.png",h=JSON.parse('{"title":"Load 与 DOMContentLoaded","description":"","frontmatter":{},"headers":[],"relativePath":"font-end/base/load.md","filePath":"font-end/base/load.md","lastUpdated":1719664933000}'),n={name:"font-end/base/load.md"},c=a(`<h1 id="load-与-domcontentloaded" tabindex="-1">Load 与 DOMContentLoaded <a class="header-anchor" href="#load-与-domcontentloaded" aria-label="Permalink to &quot;Load 与 DOMContentLoaded&quot;">​</a></h1><ul><li>load: <code>load</code> 应该仅用于检测一个完全加载的页面，当一个资源及其依赖资源已完成加载时，将触发 <code>load</code> 事件。</li><li>DOMContentLoaded: 当初始的 <code>HTML</code> 文档被完全加载和解析完成之后，<code>DOMContentLoaded</code> 事件被触发，而无需等待样式表、图像和子框架的完成加载。</li></ul><h2 id="html-解析" tabindex="-1">HTML 解析 <a class="header-anchor" href="#html-解析" aria-label="Permalink to &quot;HTML 解析&quot;">​</a></h2><p>解析的意思是将一个元素通过一定的方式转换成另一种形式。 比如 <code>html</code> 的解析。首先要明确，<code>html</code> 下载到浏览器的表现形式就是包含字符串的文件。浏览器将 <code>html</code> 文件里面的字符串读取到内存中，按照 <code>html</code> 规则，对字符串进行取词编译，将字符串转化成另一种易于表达的数据结构。我们看下一段代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#BABED8;">DOCTYPE html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">en</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">meta</span><span style="color:#C792EA;"> charset</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">meta</span><span style="color:#C792EA;"> name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=device-width, initial-scale=1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">meta</span><span style="color:#C792EA;"> http-equiv</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">X-UA-Compatible</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ie=edge</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">只有css</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">link</span><span style="color:#C792EA;"> rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">div1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">link</span><span style="color:#C792EA;"> rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./c1.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">link</span><span style="color:#C792EA;"> rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./c3.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://test.com:9000/mine/load/case2/j1.js</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">link</span><span style="color:#C792EA;"> rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./c4.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">div2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>浏览器会对这个 <code>html</code> 文件进行编译，转化成类似下面的结构.</p><p><img src="`+l+'" alt="img"></p><p>浏览器会对转化后的数据结构自上而下进行分析：首先开启下载线程，对所有的资源进行优先级排序下载（注意，这里仅仅是下载）。同时主线程会对文档进行解析：</p><ul><li><p>遇到 <code>script</code> 标签时，首先阻塞后续内容的解析，同时检查该 <code>script</code> 是否已经下载下来，如果已下载，便执行代码。</p></li><li><p>遇到 <code>link</code> 标签时，不会阻塞后续内容的解析（比如 <code>DOM</code> 构建），检查 <code>link</code> 资源是否已下载，如果已下载，则构建 <code>cssom</code>。</p></li><li><p>遇到 <code>DOM</code> 标签时，执行 <code>DOM</code> 构建，将该 DOM 元素添加到文档树中。</p></li><li><p>DOM 构建</p></li></ul><p>DOM 构建的意思是，将文档中的所有 <code>DOM</code> 元素构建成一个树型结构。</p><ul><li>CSS 构建</li></ul><p>将文档中的所有 css 资源合并。</p><ul><li>render 树 将 <code>DOM</code> 树和 <code>CSS</code> 合并成一棵渲染树，<code>render</code> 树在合适的时机会被渲染到页面中。（比如遇到 <code>script</code> 时, 该 <code>script</code> 还没有下载到本地时）。</li></ul><h2 id="html-文档的加载与页面的首次渲染" tabindex="-1">HTML 文档的加载与页面的首次渲染 <a class="header-anchor" href="#html-文档的加载与页面的首次渲染" aria-label="Permalink to &quot;HTML 文档的加载与页面的首次渲染&quot;">​</a></h2><p>输入一个页面地址，发生了下面的事情：</p><ul><li>浏览器首先下载该地址所对应的 <code>html</code> 页面</li><li>浏览器解析 <code>html</code> 页面的 <code>DOM</code> 结构</li><li>开启下载线程对文档中的所有资源按优先级排序下载。</li><li>主线程继续解析文档，到达 <code>head</code> 节点 ，<code>head</code> 里的外部资源无非是外链样式表和外链 <code>js</code>。</li><li>解析到 <code>body</code><ul><li>只有 <code>DOM</code> 元素：<code>DOM</code> 树构建完，页面执行首次渲染。</li><li>有 <code>DOM</code> 元素、外链 <code>js</code>：当解析到外链 <code>js</code> 的时候，该 <code>js</code> 尚未下载到本地，则 <code>js</code> 之前的 <code>DOM</code> 会被渲染到页面上，同时 <code>js</code> 会阻止后面 <code>DOM</code> 的构建，即后面的 <code>DOM</code> 节点并不会添加到文档的 <code>DOM</code> 树中。所以，<code>js</code> 执行完之前，我们在页面上看不到该 <code>js</code> 后面的 <code>DOM</code> 元素。</li><li>有 <code>DOM</code> 元素、外链 <code>css</code>：外链 <code>css</code> 不会影响 <code>css</code> 后面的 <code>DOM</code> 构建，但是会阻碍渲染。简单点说，外链 <code>css</code> 加载完之前，页面还是白屏。</li><li>有 <code>DOM</code> 元素、外链 <code>js</code>、外链 <code>css</code>：外链 <code>js</code> 和外链 <code>css</code> 的顺序会影响页面渲染，这点尤为重要。当 <code>Body</code> 中 <code>JS</code> 之前的外链 <code>CSS</code> 未加载完之前，页面是不会被渲染的。当 <code>Body</code> 中 <code>JS</code> 之前的 外链 <code>css</code> 加载完之后，<code>js</code> 之前的 <code>DOM</code> 树和 <code>css</code> 合并渲染树，页面渲染出该 <code>js</code> 之前的 <code>DOM</code> 结构。</li></ul></li><li>文档解析完毕，页面重新渲染。当页面引用的所有 <code>js</code> 同步代码执行完毕，触发 <code>DOMContentLoaded</code> 事件。</li><li><code>Html</code> 文档中的图片资源，<code>js</code> 代码中有异步加载的 <code>css</code>、<code>js</code> 、图片资源都加载完毕之后，<code>load</code> 事件触发。</li></ul><h2 id="head-中资源的加载" tabindex="-1">head 中资源的加载 <a class="header-anchor" href="#head-中资源的加载" aria-label="Permalink to &quot;head 中资源的加载&quot;">​</a></h2><ul><li><code>head</code> 中 <code>js</code> 资源加载都会停止后面 <code>DOM</code> 的构建，但是不影响后面资源的下载。</li><li><code>css</code> 资源不会阻碍后面 <code>DOM</code> 的构建，但是会阻碍页面的首次渲染。</li></ul><h2 id="body-中资源的加载" tabindex="-1">body 中资源的加载 <a class="header-anchor" href="#body-中资源的加载" aria-label="Permalink to &quot;body 中资源的加载&quot;">​</a></h2><ul><li><code>body</code> 中 <code>js</code> 资源加载都会停止后面 <code>DOM</code> 的构建，但是不影响后面资源的下载。</li><li><code>CSS</code> 资源不会阻碍后面 <code>DOM</code> 的构建，但是会阻碍页面的首次渲染。</li></ul><h2 id="domcontentloaded-事件的触发" tabindex="-1">DomContentLoaded 事件的触发 <a class="header-anchor" href="#domcontentloaded-事件的触发" aria-label="Permalink to &quot;DomContentLoaded 事件的触发&quot;">​</a></h2><p><code>DOMContentLoaded</code> 事件在 <code>html</code> 文档加载完毕，并且 <code>html</code> 所引用的内联 <code>js</code>、以及外链 <code>js</code> 的同步代码都执行完毕后触发。</p><h2 id="load-事件的触发" tabindex="-1">load 事件的触发 <a class="header-anchor" href="#load-事件的触发" aria-label="Permalink to &quot;load 事件的触发&quot;">​</a></h2><p>当页面 <code>DOM</code> 结构中的 <code>js</code>、<code>css</code>、图片，以及 <code>js</code> 异步加载的 <code>js</code>、<code>css</code> 、图片都加载完成之后，才会触发 <code>load</code> 事件。</p><ul><li>页面中引用的 <code>js</code> 代码如果有异步加载的 <code>js</code>、<code>css</code>、图片，是会影响 <code>load</code> 事件触发的。</li><li><code>video</code>、<code>audio</code>、<code>flash</code> 不会影响 <code>load</code> 事件触发。</li></ul><p><a href="https://juejin.cn/post/6844903623583891469" target="_blank" rel="noreferrer">参考1</a><a href="https://juejin.cn/post/6844903504025223176" target="_blank" rel="noreferrer">参考2</a></p>',26),p=[c];function t(d,r,D,F,i,y){return e(),o("div",null,p)}const m=s(n,[["render",t]]);export{h as __pageData,m as default};
