import{_ as s,c as a,o as n,a as l}from"./app.0a131282.js";const p='{"title":"跨域","description":"","frontmatter":{},"headers":[{"level":2,"title":"why","slug":"why"},{"level":2,"title":"cors跨域","slug":"cors跨域"},{"level":3,"title":"预检请求(OPTIONS)","slug":"预检请求-options"},{"level":3,"title":"附带身份凭证的请求","slug":"附带身份凭证的请求"},{"level":3,"title":"HTTP 响应首部字段","slug":"http-响应首部字段"},{"level":2,"title":"Node中间件代理","slug":"node中间件代理"},{"level":2,"title":"Nginx反向代理","slug":"nginx反向代理"},{"level":2,"title":"JSONP","slug":"jsonp"},{"level":3,"title":"JSONP和AJAX对比","slug":"jsonp和ajax对比"},{"level":2,"title":"postMessage","slug":"postmessage"}],"relativePath":"font-end/browser/cross-domain.md"}',o={},e=[l('<h1 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-hidden="true">#</a></h1><h2 id="why" tabindex="-1">why <a class="header-anchor" href="#why" aria-hidden="true">#</a></h2><p>Q: 为什么会出现跨域问题？</p><p>A: 同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。同源指：协议、域名、端口号必须一致。</p><p>同源策略控制了不同源之间的交互，例如在使用XMLHttpRequest 或标签时则会受到同源策略的约束。这些交互通常分为三类：</p><ul><li>通常浏览器允许进行跨域写操作（Cross-origin writes），如链接（links），重定向以及表单提交。特定少数的HTTP请求需要添加 preflight。</li><li>通常浏览器允许跨域资源嵌入（Cross-origin embedding），如 img、script 标签;</li><li>通常浏览器不允许跨域读操作（Cross-origin reads）。</li></ul><p>允许跨域资源嵌入的示例，一些不受同源策略影响的标签示例：</p><ul><li><code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>标签嵌入跨域脚本。语法错误信息只能在同源脚本中捕捉到。</li><li><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;</code>标签嵌入CSS。CSS的跨域需要一个设置正确的Content-Type消息头.</li><li><code>&lt;img&gt;</code> 嵌入图片。支持的图片格式包括PNG,JPEG,GIF,BMP,SVG</li><li><code>&lt;video&gt;</code> 和 <code>&lt;audio&gt;</code> 嵌入多媒体资源。</li><li><code>@font-face</code>引入的字体。一些浏览器允许跨域字体（ cross-origin fonts），一些需要同源字体（same-origin fonts）。</li><li><code>&lt;frame&gt;和&lt;iframe&gt;</code>载入的任何资源。站点可以使用X-Frame-Options消息头来阻止这种形式的跨域交互。</li></ul><h2 id="cors跨域" tabindex="-1">cors跨域 <a class="header-anchor" href="#cors跨域" aria-hidden="true">#</a></h2><p>跨域资源共享</p><h3 id="预检请求-options" tabindex="-1">预检请求(OPTIONS) <a class="header-anchor" href="#预检请求-options" aria-hidden="true">#</a></h3><p>浏览器限制跨域请求一般有两种方式：</p><ol><li>浏览器限制发起跨域请求</li><li>跨域请求可以正常发起，但是返回的结果被浏览器拦截了</li></ol><p>一般浏览器都是第二种方式限制跨域请求，那就是说请求已到达服务器，并有可能对数据库里的数据进行了操作，但是返回的结果被浏览器拦截了，那么我们就获取不到返回结果，这是一次失败的请求，但是可能对数据库里的数据产生了影响。</p><p>对这种可能对服务器数据产生副作用的HTTP请求方法，浏览器必须先使用OPTIONS方法发起一个预检请求，从而获知服务器是否允许该跨域请求：如果允许，就发送带数据的真实请求；如果不允许，则阻止发送带数据的真实请求。</p><h4 id="简单请求" tabindex="-1">简单请求 <a class="header-anchor" href="#简单请求" aria-hidden="true">#</a></h4><p>使用下列方法之一且没有人为设置对 CORS 安全的首部字段集合之外的其他首部字段：</p><ul><li><p>GET</p></li><li><p>HEAD</p></li><li><p>POST</p></li><li><p>仅当POST方法的Content-Type值等于下列之一才算作简单请求</p><ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul></li></ul><p><img src="/blog/assets/OHAfqO.2ced19e4.png" alt=""></p><h4 id="非简单请求" tabindex="-1">非简单请求 <a class="header-anchor" href="#非简单请求" aria-hidden="true">#</a></h4><p>使用了下面任一 HTTP 方法：</p><ul><li>PUT</li><li>DELETE</li><li>CONNECT</li><li>OPTIONS</li><li>TRACE</li><li>PATCH</li></ul><p>人为设置了对 CORS 安全的首部字段集合之外的其他首部字段</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type (but note the additional requirements below)</li><li>DPR</li><li>Downlink</li><li>Save-Data</li><li>Viewport-Width</li><li>Width</li></ul><p>Content-Type 的值不属于下列之一</p><ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>text/plain</li></ul><p>发送真正请求前会先发送预检请求，如图所示：</p><p><img src="/blog/assets/aQnMed.f2a7ba50.png" alt=""></p><p>1.第一条OPTIONS为预检请求，中同时携带了下面两个首部字段：</p><div class="language-js"><pre><code><span class="line"><span style="color:#A6ACCD;">Access</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Control</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Request</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> POST</span></span>\n<span class="line"><span style="color:#A6ACCD;">Access</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Control</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Request</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Headers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> X</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">PINGOTHER</span></span>\n<span class="line"></span></code></pre></div><ul><li>预检请求的Request中的Access-Control-Request-Method: POST，是告诉服务器，之后的实际请求将使用POST方式。</li><li>Access-Control-Request-Headers 是告诉服务器，实际请求将携带两个自定义请求首部字段：X-PINGOTHER 与 Content-Type。服务器据此决定，该实际请求是否被允许</li></ul><h3 id="附带身份凭证的请求" tabindex="-1">附带身份凭证的请求 <a class="header-anchor" href="#附带身份凭证的请求" aria-hidden="true">#</a></h3><p>一般而言，对于跨域 XMLHttpRequest 或 Fetch 请求，浏览器不会发送身份凭证信息。</p><div class="language-js"><pre><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> xhr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">XMLHttpRequest</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> url </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://bar.other/resources/credentialed-content/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">withCredentials </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onreadystatechange</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>\n<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span></code></pre></div><p>将 XMLHttpRequest 的 withCredentials 标志设置为 true，从而向服务器发送 Cookies。因为这是一个简单 GET 请求，所以浏览器不会对其发起“预检请求”。但是，如果服务器端的响应中未携带 Access-Control-Allow-Credentials: true ，浏览器将不会把响应内容返回给请求的发送者。</p><h4 id="附带身份凭证的请求与通配符" tabindex="-1">附带身份凭证的请求与通配符 <a class="header-anchor" href="#附带身份凭证的请求与通配符" aria-hidden="true">#</a></h4><p>对于附带身份凭证的请求，服务器不得设置 Access-Control-Allow-Origin 的值为“*”。</p><p>因为请求的首部中携带了 Cookie 信息。如果 Access-Control-Allow-Origin 的值为“*”，请求将会失败。而将 Access-Control-Allow-Origin 的值设置为 <a href="http://foo.example" target="_blank" rel="noopener noreferrer">http://foo.example</a>，则请求将成功执行。</p><h3 id="http-响应首部字段" tabindex="-1">HTTP 响应首部字段 <a class="header-anchor" href="#http-响应首部字段" aria-hidden="true">#</a></h3><h4 id="access-control-allow-origin" tabindex="-1">Access-Control-Allow-Origin <a class="header-anchor" href="#access-control-allow-origin" aria-hidden="true">#</a></h4><p>origin 参数的值指定了允许访问该资源的外域 URI.对于不需要携带身份凭证的请求，服务器可以指定该字段的值为通配符，表示允许来自所有域的请求。</p><div class="language-js"><pre><code><span class="line"><span style="color:#A6ACCD;">Access</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Control</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Allow</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Origin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">origin</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> | *</span></span>\n<span class="line"></span></code></pre></div><h4 id="access-control-expose-headers" tabindex="-1">Access-Control-Expose-Headers <a class="header-anchor" href="#access-control-expose-headers" aria-hidden="true">#</a></h4><p>在跨域访问时，XMLHttpRequest对象的getResponseHeader()方法只能拿到一些最基本的响应头，Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头。 Access-Control-Expose-Headers 头让服务器把允许浏览器访问的头放入白名单，例如：</p><div class="language-js"><pre><code><span class="line"><span style="color:#A6ACCD;">Access</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Control</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Expose</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Headers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> X</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">My</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Custom</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Header</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> X</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Another</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Custom</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Header</span></span>\n<span class="line"></span></code></pre></div><h4 id="access-control-max-age" tabindex="-1">Access-Control-Max-Age <a class="header-anchor" href="#access-control-max-age" aria-hidden="true">#</a></h4><p>头指定了请求的结果能够被缓存多久</p><div class="language-js"><pre><code><span class="line"><span style="color:#A6ACCD;">Access</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Control</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Max</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">delta-seconds</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre></div><h4 id="access-control-allow-credentials" tabindex="-1">Access-Control-Allow-Credentials <a class="header-anchor" href="#access-control-allow-credentials" aria-hidden="true">#</a></h4><p>指定了当浏览器的credentials设置为true时是否允许浏览器读取response的内容。</p><h4 id="access-control-allow-methods" tabindex="-1">Access-Control-Allow-Methods <a class="header-anchor" href="#access-control-allow-methods" aria-hidden="true">#</a></h4><p>用于预检请求的响应,指明了实际请求所允许使用的 HTTP 方法。</p><h4 id="access-control-allow-headers" tabindex="-1">Access-Control-Allow-Headers <a class="header-anchor" href="#access-control-allow-headers" aria-hidden="true">#</a></h4><p>用于预检请求的响应。其指明了实际请求中允许携带的首部字段。</p><h4 id="origin" tabindex="-1">Origin <a class="header-anchor" href="#origin" aria-hidden="true">#</a></h4><p>表明预检请求或实际请求的源站。</p><h4 id="access-control-request-method" tabindex="-1">Access-Control-Request-Method <a class="header-anchor" href="#access-control-request-method" aria-hidden="true">#</a></h4><p>用于预检请求。其作用是，将实际请求所使用的 HTTP 方法告诉服务器。</p><h4 id="access-control-request-headers" tabindex="-1">Access-Control-Request-Headers <a class="header-anchor" href="#access-control-request-headers" aria-hidden="true">#</a></h4><p>用于预检请求。其作用是，将实际请求所携带的首部字段告诉服务器。</p><h2 id="node中间件代理" tabindex="-1">Node中间件代理 <a class="header-anchor" href="#node中间件代理" aria-hidden="true">#</a></h2><p>从服务器向服务器请求，无需遵循同源策略。 node中间件，需要做以下几个步骤：</p><ul><li>接受客户端请求 。</li><li>将请求转发给服务器。</li><li>拿到服务器响应数据。</li><li>将响应转发给客户端。</li></ul><p>我们可以使用<code>http-proxy-middleware</code>中间件来做这样的代理</p><div class="language-js"><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> express </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">express</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http-proxy-middleware</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">express</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">`</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">proxy</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">targetUrl</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">changeOrigin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">pathRewrite</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">`${</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">baseUrl</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">cheapflightapi</span><span style="color:#89DDFF;">`</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><p>上面方式适用于以node作为web服务器的场景，比如SSR应用，这样会非常方便的去做各种服务的转发。</p><h2 id="nginx反向代理" tabindex="-1">Nginx反向代理 <a class="header-anchor" href="#nginx反向代理" aria-hidden="true">#</a></h2><p>使用Nginx服务器的反向代理功能来实现跨域请求，非常简单且，只需要修改nginx的配置即可解决跨域问题，支持所有浏览器，支持session，不需要修改任何代码，并且不会影响服务器性能。</p><div class="language-shell"><pre><code><span class="line"><span style="color:#A6ACCD;">// proxy服务器</span></span>\n<span class="line"><span style="color:#A6ACCD;">server </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  listen 80</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  server_name  www.domain1.com</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  location / </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    proxy_pass   http://www.domain2.com</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">#反向代理域</span></span>\n<span class="line"><span style="color:#A6ACCD;">    proxy_cookie_domain www.domain2.com www.domain1.com</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#修改cookie里域名</span></span>\n<span class="line"><span style="color:#A6ACCD;">    index  index.html index.htm</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">    add_header Access-Control-Allow-Origin http://www.domain1.com</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">#当前端只跨域不带cookie时，可为*</span></span>\n<span class="line"><span style="color:#A6ACCD;">    add_header Access-Control-Allow-Credentials </span><span style="color:#82AAFF;">true</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><h2 id="jsonp" tabindex="-1">JSONP <a class="header-anchor" href="#jsonp" aria-hidden="true">#</a></h2><p>利用script标签不受跨域限制而形成的一种方案。</p><div class="language-js"><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">jsonpRequest</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> params</span><span style="color:#89DDFF;">}){</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">script</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">script</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cb</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jsonRequestCb</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">window</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">cb</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">params</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{...</span><span style="color:#A6ACCD;">params</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cb</span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parmas</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">`${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">=</span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;">params[key]</span><span style="color:#89DDFF;">}`</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">`${</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">?</span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&amp;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">}`</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">remove</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onerror</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">reject</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">script</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">jsonpRequest</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">url</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://localhost:3000/say</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">params</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">wd</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">haoxl</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(data</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre></div><p>【JSONP的优缺点】 优点：兼容性好（兼容低版本IE） 缺点： 1.JSONP只支持GET请求； 2.XMLHttpRequest相对于JSONP有着更好的错误处理机制 3.拿不到状态码是什么和header</p><h3 id="jsonp和ajax对比" tabindex="-1">JSONP和AJAX对比 <a class="header-anchor" href="#jsonp和ajax对比" aria-hidden="true">#</a></h3><p>JSONP和AJAX相同，都是客户端向服务器端发送请求，从服务器端获取数据的方式。但AJAX属于同源策略，JSONP属于非同源策略（跨域请求）</p><h2 id="postmessage" tabindex="-1">postMessage <a class="header-anchor" href="#postmessage" aria-hidden="true">#</a></h2><p>window.postMessage(message,targetOrigin) 方法是html5新引进的特性，可以使用它来向其它的window对象发送消息，无论这个window对象是属于同源或不同源.</p><p>实际中使用场景不多，个人认为他属于跨页面通信的一种。我只在一次向iframe发送消息的时候用到过。另外小程序的内嵌H5向原生发送消息的方法与此类似。</p>',78)];var r=s(o,[["render",function(s,l,p,o,r,t){return n(),a("div",null,e)}]]);export{p as __pageData,r as default};
