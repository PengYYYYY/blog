import{_ as a,c as l,o as e,U as s}from"./chunks/framework.UId1oBXU.js";const i="/blog/assets/pPbQaA.fvOt9Y2w.png",o="/blog/assets/3wgpMw.xbZog8Xl.png",m=JSON.parse('{"title":"浏览器安全","description":"","frontmatter":{},"headers":[],"relativePath":"font-end/browser/security.md","filePath":"font-end/browser/security.md","lastUpdated":1704645777000}'),t={name:"font-end/browser/security.md"},n=s('<h1 id="浏览器安全" tabindex="-1">浏览器安全 <a class="header-anchor" href="#浏览器安全" aria-label="Permalink to &quot;浏览器安全&quot;">​</a></h1><h2 id="浏览器安全-1" tabindex="-1">浏览器安全 <a class="header-anchor" href="#浏览器安全-1" aria-label="Permalink to &quot;浏览器安全&quot;">​</a></h2><p>浏览器的安全由浏览器控制，主要从浏览器运行机制的安全，同源策略体现出来</p><h3 id="同源策略" tabindex="-1">同源策略 <a class="header-anchor" href="#同源策略" aria-label="Permalink to &quot;同源策略&quot;">​</a></h3><p><a href="./cross-domain.html">跨域</a></p><p>如果两个 <code>URL</code> 的协议、域名和端口都相同，我们就称这两个 <code>URL</code> 同源。</p><p>两个相同的源之间是可以相互访问资源和操作 DOM ,两个不同的源之间若想要相互访问资源或者操作 DOM，那么会有一套基础的安全策略的制约。 同源策略表现在DOM、Web 数据和网络这三个层面。</p><ul><li>DOM层面：同源策略限制了来自不同的 Javascript 脚本对当前DOM读写的操作。</li><li>数据层面：同源策略限制了不同源的站点读取当前站点的 Cookie、IndexDB、LocalStorage 等数据。</li><li>网络层面：同源策略限制了通过 XMLHttpRequest 等方式将站点的数据发送给不同源的站点。</li></ul><h3 id="浏览器沙箱机制" tabindex="-1">浏览器沙箱机制 <a class="header-anchor" href="#浏览器沙箱机制" aria-label="Permalink to &quot;浏览器沙箱机制&quot;">​</a></h3><p>Google Chrome 是第一个采取多进程架构的浏览器，其主要进程分为：浏览器进程、渲染进程、插件进程、扩展进程。</p><p>插件进程与浏览器进程严格隔离，互不影响。</p><p>渲染引擎由 Sandbox 隔离，网页代码要与浏览器内核进程通信、与操作系统通信都需要通过 IPC channel，在其中会进行一些安全检查。</p><p>Sandbox 目的：让不可信任的代码运行在一定的环境中，限制其访问隔离区外的资源，如果一定要跨域边界产生数据交换，则只能通过指定的数据通道，比如经过封装的 API 来完成，在这些 API 中会严格检查请求的合法性。</p><p><img src="'+i+`" alt="img"></p><h2 id="跨站脚本攻击-xss" tabindex="-1">跨站脚本攻击（XSS） <a class="header-anchor" href="#跨站脚本攻击-xss" aria-label="Permalink to &quot;跨站脚本攻击（XSS）&quot;">​</a></h2><p>XSS(Cross-Site Scripting) 跨站脚本攻击，黑客通过 “HTML注入” 篡改了网页，插入了恶意的脚本，从而在用户浏览网页时，控制用户浏览器的一种攻击。 跨站脚本攻击有可能造成以下影响:</p><ul><li>利⽤虚假输⼊表单骗取⽤户个⼈信息。</li><li>利⽤脚本窃取⽤户的Cookie值，被害者在不知情的情况下，帮助攻击者发送恶意请求。</li><li>显示伪造的⽂章或图⽚。</li><li>窃取 Cookie 信息</li><li>监听用户行为</li><li>可以通过修改 DOM伪造假的登录窗口，用来欺骗用户输入用户名和密码等信息。</li><li>在页面内生成浮窗广告</li></ul><h3 id="反射型xss" tabindex="-1">反射型XSS <a class="header-anchor" href="#反射型xss" aria-label="Permalink to &quot;反射型XSS&quot;">​</a></h3><p>也称“非持久型XSS”，简单的把用户输入的数据“反射”给浏览器，即黑客往往需要诱使用户“点击”一个恶意链接才能攻击成功。</p><ul><li>恶意 JavaScript 脚本属于用户发送给网站请求中的一部 分</li><li>随后网站又把恶意 JavaScript 脚本返回给用户</li><li>当恶意 JavaScript 脚本在用户页面中 被执行时，黑客就可以利用该脚本做一些恶意操作。</li></ul><h3 id="存储型-xss" tabindex="-1">存储型 XSS <a class="header-anchor" href="#存储型-xss" aria-label="Permalink to &quot;存储型 XSS&quot;">​</a></h3><p>也称 <code>持久型 XSS</code>，把用户输入的数据 <code>存储</code> 在服务器，具有很强的稳定性。例如在富文本中加入一些 JavaScript 代码的博客文章，黑客把恶意脚本保存到服务端。</p><p>存储型 XSS 攻击大致需要经过如下步骤:</p><ul><li>首先黑客利用站点漏洞将一段恶意 JavaScript 代码提交到网站的数据库中;</li><li>然后用户向网站请求包含了恶意 JavaScript 脚本的页面;</li><li>当用户浏览该页面的时候，恶意脚本就会将用户的 Cookie 信息等数据上传到服务器。</li></ul><h3 id="xss-攻击的危害" tabindex="-1">XSS 攻击的危害 <a class="header-anchor" href="#xss-攻击的危害" aria-label="Permalink to &quot;XSS 攻击的危害&quot;">​</a></h3><p>利用脚本特性，干脚本能干的一切</p><ul><li>获取⻚⾯数据</li><li>获取 Cookies</li><li>劫持前端逻辑</li><li>发送请求</li><li>偷取⽹站的任意数据</li><li>获取用户信息</li><li>用户欺骗</li></ul><h3 id="防范手段" tabindex="-1">防范手段 <a class="header-anchor" href="#防范手段" aria-label="Permalink to &quot;防范手段&quot;">​</a></h3><blockquote><p>X-XSS-Protection</p></blockquote><p>使用 <code>ctx.set(&quot;X-XSS-Protection&quot;, 1)</code> 来禁止 xss 过滤</p><ul><li>禁止XSS过滤</li><li>启用XSS过滤（通常浏览器是默认的）。 如果检测到跨站脚本攻击，浏览器将清除页面（删除不安全的部分）。</li><li>mode=block: 启用xss过滤。如果检测到攻击，浏览器不会清除页面，而是阻止页面加载</li><li>report= <code>&lt;reporting-URI /&gt;</code> (Chromium only): 启用XSS过滤。 如果检测到跨站脚本攻击，浏览器将清除页面并使用CSP report-uri (en-US)指令的功能发送违规报告。</li></ul><blockquote><p>csp</p></blockquote><p>内容安全策略（Content Security Policy）是一个附加的安全层，用于检测和缓解某些类型的攻击，包括跨站脚本攻击（xss）和数据注入等攻击，</p><p>csp的本质就是建立白名单，开发者明确告诉浏览器有哪些外部资源是可以加载和执行，我们只需要配置规则，如何拦截是浏览器自己实现的。我们可以通过这种方式来尽量减少XSS攻击。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">Content</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">Security</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Policy</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">src </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">self</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;">Content</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">Security</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Policy</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> img</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">src </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">self</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;">Content</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">Security</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Policy</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> child</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">src </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">none</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>cookie</p></blockquote><p>在 Set-Cookie 时给关键 Cookie 植入 HttpOnly 标识；</p><blockquote><p>存储性xss</p></blockquote><p>服务器对输入脚本进行过滤或转码，转译字符</p><ul><li>充分利用 CSP，</li><li>把 Cookie 与客户端IP绑定 <ul><li>构造 GET 和 POST 请求</li><li>XSS 钓鱼</li><li>识别用户浏览器</li><li>识别用户安装的软件</li><li>获取用户的真实 IP 地址</li></ul></li></ul><h4 id="csp" tabindex="-1">CSP <a class="header-anchor" href="#csp" aria-label="Permalink to &quot;CSP&quot;">​</a></h4><p>内容安全策略 (CSP, Content Security Policy) 是⼀个附加的安全层，⽤于帮助检测和缓解某些类型的攻击，包括跨站脚本 (XSS) 和数据注⼊等攻击。 这些攻击可⽤于实现从数据窃取到⽹站破坏或作为恶意软件分发版本等⽤途。</p><p>CSP 本质上就是建⽴⽩名单，开发者明确告诉浏览器哪些外部资源可以加载和执⾏。我们只需要配置规则，如何拦截是由浏览器⾃⼰实现的。我们可以通过这种⽅式来尽量减少 XSS 攻击。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 只允许加载本站资源</span></span>
<span class="line"><span style="color:#BABED8;">Content</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">Security</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Policy</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">src </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">self</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 只允许加载 HTTPS 协议图⽚</span></span>
<span class="line"><span style="color:#BABED8;">Content</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">Security</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Policy</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> img</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">src </span><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 不允许加载任何来源框架</span></span>
<span class="line"><span style="color:#BABED8;">Content</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">Security</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Policy</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> child</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">src </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">none</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>实施严格的 CSP 可以有效地防范 XSS 攻击，具体来讲 CSP 有如下几个功能:</p><ul><li>限制加载其他域下的资源文件，这样即使黑客插入了一个 JavaScript 文件，这个 JavaScript 文件也是无法被加载的;</li><li>禁止向第三方域提交数据，这样用户数据也不会外泄;</li><li>禁止执行内联脚本和未授权的脚本;</li></ul><h3 id="httponly-cookie" tabindex="-1">HttpOnly Cookie <a class="header-anchor" href="#httponly-cookie" aria-label="Permalink to &quot;HttpOnly Cookie&quot;">​</a></h3><p>这是预防XSS攻击窃取⽤户cookie最有效的防御⼿段。Web应 ⽤程序在设置cookie时，将其属性设为HttpOnly，就可以避免该⽹⻚的cookie被客户端恶意JavaScript窃取，保护⽤户cookie信息。</p><h4 id="黑名单" tabindex="-1">⿊名单 <a class="header-anchor" href="#黑名单" aria-label="Permalink to &quot;⿊名单&quot;">​</a></h4><p>⽤户的输⼊永远不可信任的，最普遍的做法就是转义输⼊输出的内容，对于引号、尖括号、斜杠进⾏转义</p><h2 id="跨站请求伪造-csrf-cross-site-request-forgery" tabindex="-1">跨站请求伪造 CSRF（Cross Site Request Forgery） <a class="header-anchor" href="#跨站请求伪造-csrf-cross-site-request-forgery" aria-label="Permalink to &quot;跨站请求伪造 CSRF（Cross Site Request Forgery）&quot;">​</a></h2><p>它利⽤⽤户已登录的身份，在⽤户毫不知情的情况下，以⽤户的名义完成⾮法操作。</p><ol><li>⽤户已经登录了站点 A，并在本地记录了 cookie</li><li>在⽤户没有登出站点 A 的情况下（也就是 cookie ⽣效的情况下），访问了恶意攻击者提供的引诱危险站点 B (B 站点要求访问站点A)。</li><li>站点 A 没有做任何 CSRF 防御</li></ol><p>Cross-site request forgery(跨站请求伪造)，指的是黑客引诱用户打开黑客的网站，在黑客的网站中，利用用户登录状态发起跨站请求。</p><h3 id="攻击流程" tabindex="-1">攻击流程 <a class="header-anchor" href="#攻击流程" aria-label="Permalink to &quot;攻击流程&quot;">​</a></h3><ul><li><p>用户发起登录请求，服务器返回一些登录状态给浏览器，这些信息包括了 cookie,session 等，这样用户在浏览器中就属于登录状态了。</p></li><li><p>接着，黑客通过各种手段去引诱用户打开他的链接，在黑客的链接中，黑客会编写好一个邮件过滤器，通过邮件网站提供的 HTTP 设置设置好新的邮件过滤功能。该过滤会将所有邮箱都转发到黑客的邮箱中。</p></li><li><p>最后，去服务商重置用户的密码。</p></li></ul><h3 id="攻击方案" tabindex="-1">攻击方案 <a class="header-anchor" href="#攻击方案" aria-label="Permalink to &quot;攻击方案&quot;">​</a></h3><ul><li><p>自动发起 get 请求，将接口放到 img 标签中，加载页面时自动发起 get 请求.</p></li><li><p>自动发起 post 请求，直接提交一个表单。</p></li><li><p>引诱用户点击恶意链接。</p></li></ul><h3 id="发起-csrf-的三个必要条件" tabindex="-1">发起 CSRF 的三个必要条件 <a class="header-anchor" href="#发起-csrf-的三个必要条件" aria-label="Permalink to &quot;发起 CSRF 的三个必要条件&quot;">​</a></h3><ul><li>目标站点一定有 CSRF 漏洞</li><li>用户要登录过目标站点，并且在浏览器上保持该站点的登录状态</li><li>需要用户打开一个第三方站点，可以是黑客站点，也可以是一些论坛。</li></ul><h3 id="防御-csrf-攻击" tabindex="-1">防御 CSRF 攻击 <a class="header-anchor" href="#防御-csrf-攻击" aria-label="Permalink to &quot;防御 CSRF 攻击&quot;">​</a></h3><h4 id="利用-cookie-的-samesite-属性" tabindex="-1">利用 Cookie 的 SameSite 属性 <a class="header-anchor" href="#利用-cookie-的-samesite-属性" aria-label="Permalink to &quot;利用 Cookie 的 SameSite 属性&quot;">​</a></h4><p>Cookie 正是浏览器和服务器之间维护登录状态的一个关键数据，通常 CSRF 攻击都是从第三方站点发起的，要防止 CSRF 攻击，我们最好能实现从第三方 站点发送请求时禁止 Cookie 的发送，因此在浏览器通过不同来源发送 HTTP 请求时，有如下区别:</p><ul><li>如果是从第三方站点发起的请求，那么需要浏览器禁止发送某些关键 Cookie 数据到服务器。</li><li>如果是同一个站点发起的请求，那么就需要保证 Cookie 数据正常发送。</li></ul><p>SameSite 选项通常有 Strict、Lax 和 None 三个值。</p><ul><li>Strict 最为严格。如果 SameSite 的值是 Strict，那么浏览器会完全禁止第三方 Cookie。简言之，如果你从极客时间的页面中访问 InfoQ 的资源，而 InfoQ 的某些 Cookie 设置了 SameSite = Strict 的话，那么这些 Cookie 是不会被发送到 InfoQ 的服 务器上的。只有你从 InfoQ 的站点去请求 InfoQ 的资源时，才会带上这些 Cookie。</li><li>Lax 相对宽松一点。在跨站点的情况下，从第三方站点的链接打开和从第三方站点提交 Get 方式的表单这两种方式都会携带 Cookie。但如果在第三方站点中使用 Post 方法， 或者通过 img、iframe 等标签加载的 URL，这些场景都不会携带 Cookie。</li><li>而如果使用 None 的话，在任何情况下都会发送 Cookie 数据。</li></ul><h4 id="验证请求的来源站点" tabindex="-1">验证请求的来源站点 <a class="header-anchor" href="#验证请求的来源站点" aria-label="Permalink to &quot;验证请求的来源站点&quot;">​</a></h4><p>在服务器端验证请求来源的站点，服务器可以禁止来自第三方站点的请求来阻止CSRF攻击：</p><p>Referer 是 HTTP 请求头中的一个字段，记录了该 HTTP 请求的来源地址。</p><p>Referrer-Policy的值:</p><ul><li><p>no-referrer 整个Referrer首部会被移除。访问来源信息不随着请求一起发送。</p></li><li><p>origin</p></li></ul><p>请求源为引用地址</p><ul><li>origin-when-cross-origin</li></ul><p>对于同源的请求，会发送完整的URL作为引用地址，但是对于非同源请求仅发送文件的源</p><ul><li>same-origin</li></ul><p>对于同源的请求会发送引用地址，对于非同源请求则不发生引用地址信息。</p><ul><li>strict-origin</li></ul><p>在同等安全级别的情况下，发送文件的源作为引用地址（http&gt;https），但是在降级的情况下不会发送（https&gt;http）.</p><ul><li>strict-origin-when-cross-origin</li></ul><p>对于同源的请求，会发送完整的URL作为引用地址；在同等安全级别的情况下，发送文件的源作为引用地址(HTTPS-&gt;HTTPS)；在降级的情况下不发送此首部 (HTTPS-&gt;HTTP)。</p><ul><li>unsafe-url</li></ul><p>无论是同源请求还是非同源请求，都发送完整的 URL（移除参数信息之后）作为引用地址。（最不安全的策略了）</p><blockquote><p>origin</p></blockquote><p>Origin 属性只包含了域名信息，并没有包含具体的 URL 路径，这是 Origin 和 Referer 的一个主要区别。Origin 的值之所以不包含详细路径信息，是有些站点因为安全考虑，不想把源站点的详细路径暴露给服务器。 因此，服务器的策略是优先判断 Origin，如果请求头中没有包含 Origin 属性，再根据实际情况判断是否使用 Referer 值。</p><h2 id="点击劫持" tabindex="-1">点击劫持 <a class="header-anchor" href="#点击劫持" aria-label="Permalink to &quot;点击劫持&quot;">​</a></h2><p>点击劫持是⼀种视觉欺骗的攻击⼿段。攻击者将需要攻击的⽹站通过 iframe 嵌套的⽅式嵌⼊⾃⼰的⽹⻚中，并将 iframe 设置为透明，在⻚⾯中透出⼀个按钮诱导⽤户点击。</p><h3 id="如何防御" tabindex="-1">如何防御 <a class="header-anchor" href="#如何防御" aria-label="Permalink to &quot;如何防御&quot;">​</a></h3><p>X-FRAME-OPTIONS</p><p>X-FRAME-OPTIONS 是⼀个 HTTP 响应头，在现代浏览器有⼀个很好的⽀持。这个 HTTP 响应头 就是为了防御⽤ iframe 嵌套的点击劫持攻击。 该响应头有三个值可选，分别是</p><ul><li>DENY，表示⻚⾯不允许通过 iframe 的⽅式展示</li><li>SAMEORIGIN，表示⻚⾯可以在相同域名下通过 iframe 的⽅式展示</li><li>ALLOW-FROM，表示⻚⾯可以在指定来源的 iframe 中展示</li></ul><h2 id="请求劫持" tabindex="-1">请求劫持 <a class="header-anchor" href="#请求劫持" aria-label="Permalink to &quot;请求劫持&quot;">​</a></h2><ul><li>DNS劫持</li></ul><p>顾名思义，DNS服务器(DNS解析各个步骤)被篡改，修改了域名解析的结果，使得访问到的不是预期的ip</p><ul><li>请求劫持</li></ul><p>运营商劫持，此时⼤概只能升级HTTPS了</p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><h3 id="爬虫" tabindex="-1">爬虫 <a class="header-anchor" href="#爬虫" aria-label="Permalink to &quot;爬虫&quot;">​</a></h3><ul><li>针对爬虫机器，首先对应用加上防爬工具，比如利用debug</li></ul><p><img src="`+o+'" alt="img"></p><ul><li>针对黄牛</li></ul><p>黄牛是让人又爱又恨的一群人，一般防他们就是通过数据策略分析，然后判断是否是黄牛。</p><h2 id="网络安全" tabindex="-1">网络安全 <a class="header-anchor" href="#网络安全" aria-label="Permalink to &quot;网络安全&quot;">​</a></h2><p>网络安全必不可少</p><h3 id="安全和便利性的权衡" tabindex="-1">安全和便利性的权衡 <a class="header-anchor" href="#安全和便利性的权衡" aria-label="Permalink to &quot;安全和便利性的权衡&quot;">​</a></h3><p>不过安全性和便利性是相互对立的，让不同的源之间绝对隔离，无疑是最安全的措施，但这也会使得 Web 项目难以开发和使用。</p><p>浏览器出让了同源策略的哪些安全性</p><ul><li>页面中可以嵌入第三方资源：web世界是开放的，可以接入任何资源，同源策略要让一个页面的所有资源都来自于同一个源，会带来XSS攻击。注入外部的恶意脚本。为了解决 XSS 攻击，浏览器中引入了内容安全策略，称为 CSP。CSP的核心思想就是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联 JavaScript 代码。</li><li>跨域资源共享和跨文档消息机制：引入了跨域资源共享（CORS），使用该机制可以进行跨域访问控制。</li></ul><table><thead><tr><th>规则</th><th>问题</th><th>策略</th></tr></thead><tbody><tr><td>页面中可以引用第三方资源</td><td>暴露了很多诸如 XSS 的安全问题</td><td>引入了 CSP 来限制其自由程度</td></tr><tr><td>同源策略</td><td>使用 XMLHttpRequest 和 Fetch 都是无法直接进行跨域请求的</td><td>跨域资源共享策略(CORS)</td></tr><tr><td>同源策略</td><td>两个不同源的 DOM 是不能相互操纵的</td><td>跨文档消息机制(postMessage)</td></tr></tbody></table><h3 id="xss攻击-跨站脚本攻击" tabindex="-1">XSS攻击(跨站脚本攻击) <a class="header-anchor" href="#xss攻击-跨站脚本攻击" aria-label="Permalink to &quot;XSS攻击(跨站脚本攻击)&quot;">​</a></h3><p>XSS 攻击是指黑客往 HTML 文件中或者 DOM 中注入恶意脚本，从而在用户浏览页面时利用注入的恶意脚本对用户实施攻击的一种手段。</p><h4 id="恶意脚本可以做的事情" tabindex="-1">恶意脚本可以做的事情 <a class="header-anchor" href="#恶意脚本可以做的事情" aria-label="Permalink to &quot;恶意脚本可以做的事情&quot;">​</a></h4><ul><li>窃取 Cookie 信息：恶意 JavaScript 可以通过“document.cookie”获取 Cookie 信息，然后通过 XMLHttpRequest 或者 Fetch 加上 CORS 功能将数据发送给恶意服务器。</li><li>监听用户行为：恶意 JavaScript 可以使用“addEventListener”接口来监听键盘事件，比如可以获取用户输入的信用卡等信息，将其发送到恶意服务器。</li><li>修改 DOM伪造假的登录窗口</li><li>在页面内生成浮窗广告</li></ul><h4 id="恶意脚本是怎么注入的" tabindex="-1">恶意脚本是怎么注入的 <a class="header-anchor" href="#恶意脚本是怎么注入的" aria-label="Permalink to &quot;恶意脚本是怎么注入的&quot;">​</a></h4><p>通常情况下，主要有存储型 XSS 攻击、反射型 XSS 攻击和基于 DOM 的 XSS 攻击三种方式来注入恶意脚本。</p><blockquote><p>存储型 XSS 攻击</p></blockquote><ul><li>黑客利用站点漏洞将一段恶意 JavaScript 代码提交到网站的数据库中；</li><li>用户向网站请求包含了恶意 JavaScript 脚本的页面；</li><li>当用户浏览该页面的时候，恶意脚本就会将用户的 Cookie 信息等数据上传到服务器。</li></ul><blockquote><p>反射型 XSS 攻击</p></blockquote><ul><li>用户将一段含有恶意代码的请求提交给 Web 服务器</li><li>Web 服务器接收到请求时，又将恶意代码反射给了浏览器端</li></ul><blockquote><p>基于 DOM 的 XSS 攻击</p></blockquote><p>基于 DOM 的 XSS 攻击是不牵涉到页面 Web 服务器的。其原理就是修改页面中的DOM。</p><h4 id="如何阻止xss攻击" tabindex="-1">如何阻止XSS攻击 <a class="header-anchor" href="#如何阻止xss攻击" aria-label="Permalink to &quot;如何阻止XSS攻击&quot;">​</a></h4><p>存储型 XSS 攻击和反射型 XSS 攻击都是需要经过 Web 服务器，这两种类型的漏洞是服务端的安全漏洞。 而基于 DOM 的 XSS 攻击全部都是在浏览器端完成的，因此基于 DOM 的 XSS 攻击是属于前端的安全漏洞。</p><h4 id="常用的阻止-xss-攻击的策略" tabindex="-1">常用的阻止 XSS 攻击的策略 <a class="header-anchor" href="#常用的阻止-xss-攻击的策略" aria-label="Permalink to &quot;常用的阻止 XSS 攻击的策略&quot;">​</a></h4><ul><li><p>服务器对输入脚本进行过滤或转码</p></li><li><p>实施严格的 CSP 可以有效地防范 XSS 攻击，具体来讲 CSP 有如下几个功能</p></li></ul><ol><li><p>限制加载其他域下的资源文件，这样即使黑客插入了一个 JavaScript 文件，这个 JavaScript 文件也是无法被加载的；</p></li><li><p>禁止向第三方域提交数据，这样用户数据也不会外泄；</p></li><li><p>禁止执行内联脚本和未授权的脚本；</p></li><li><p>还提供了上报机制，这样可以帮助我们尽快发现有哪些 XSS 攻击，以便尽快修复问题。</p></li></ol><ul><li>使用 HttpOnly 属性</li></ul><ol><li>由于很多 XSS 攻击都是来盗用 Cookie 的，因此还可以通过使用 HttpOnly 属性来保护我们 Cookie 的安全。</li><li>使用 HttpOnly 标记的 Cookie 只能使用在 HTTP 请求过程中，所以无法通过 JavaScript 来读取这段 Cookie</li></ol><h3 id="csp常用设置" tabindex="-1">CSP常用设置 <a class="header-anchor" href="#csp常用设置" aria-label="Permalink to &quot;CSP常用设置&quot;">​</a></h3><ul><li>内容均来自同一站点：</li></ul><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span>Content-Security-Policy: default-src &#39;self&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>允许内容来自信任的域名及其子域名:</li></ul><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span>Content-Security-Policy: default-src &#39;self&#39; *.trusted.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>允许网页应用的用户在他们自己的内容中包含来自任何源的图片：</li></ul><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span>Content-Security-Policy: default-src &#39;self&#39;; img-src *; media-src media1.com media2.com; script-src userscripts.example.com`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>一个线上银行网站的管理者想要确保网站的所有内容都要通过SSL方式获取，以避免攻击者窃听用户发出的请求：</li></ul><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span>Content-Security-Policy: default-src https://onlinebanking.jumbobank.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>一个在线邮箱的管理者想要允许在邮件里包含HTML，同样图片允许从任何地方加载，但不允许JavaScript或者其他潜在的危险内容(从任意位置加载):</li></ul><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span>Content-Security-Policy: default-src &#39;self&#39; *.mailsite.com; img-src *</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>对策略进行测试</p></blockquote><p>CSP可以部署为报告(report-only)模式。在此模式下，CSP策略不是强制性的，但是任何违规行为将会报告给一个指定的URI地址。此外，一个报告模式的头部可以用来测试一个修订后的未来将应用的策略而不用实际部署它。</p><p><code>Content-Security-Policy-Report-Only: policy</code></p>',141),p=[n];function r(c,u,d,h,S,b){return e(),l("div",null,p)}const D=a(t,[["render",r]]);export{m as __pageData,D as default};
