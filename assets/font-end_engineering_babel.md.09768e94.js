import{_ as e,o as a,c as l,a as s}from"./app.1ad5e66e.js";const n="/blog/assets/4RpgZD.1b317370.png",y=JSON.parse('{"title":"babel","description":"","frontmatter":{},"headers":[{"level":2,"title":"常用的配置","slug":"常用的配置","link":"#常用的配置","children":[{"level":3,"title":"插件","slug":"插件","link":"#插件","children":[]},{"level":3,"title":"preset","slug":"preset","link":"#preset","children":[]},{"level":3,"title":"Polyfills","slug":"polyfills","link":"#polyfills","children":[]},{"level":3,"title":"@babel/cli","slug":"babel-cli","link":"#babel-cli","children":[]},{"level":3,"title":"@babel/plugin-transform-runtime","slug":"babel-plugin-transform-runtime","link":"#babel-plugin-transform-runtime","children":[]}]},{"level":2,"title":"babel解析原理","slug":"babel解析原理","link":"#babel解析原理","children":[{"level":3,"title":"解析 Parse","slug":"解析-parse","link":"#解析-parse","children":[]},{"level":3,"title":"转换 Transform","slug":"转换-transform","link":"#转换-transform","children":[]},{"level":3,"title":"生成 Generate","slug":"生成-generate","link":"#生成-generate","children":[]},{"level":3,"title":"抽象语法树（AST）是怎么生成的","slug":"抽象语法树-ast-是怎么生成的","link":"#抽象语法树-ast-是怎么生成的","children":[]}]}],"relativePath":"font-end/engineering/babel.md","lastUpdated":1687963195000}'),r={name:"font-end/engineering/babel.md"},p=s(`<h1 id="babel" tabindex="-1">babel <a class="header-anchor" href="#babel" aria-hidden="true">#</a></h1><p>babel相关的知识点，babel配置等.</p><h2 id="常用的配置" tabindex="-1">常用的配置 <a class="header-anchor" href="#常用的配置" aria-hidden="true">#</a></h2><h3 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-hidden="true">#</a></h3><p>Babel 是一个编译器（输入源码 =&gt; 输出编译后的代码）;编译过程分为：解析、转换、和打印输出。这些插件用于转换你的代码。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">plugins</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: [</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">array-includes</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;"> ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><a href="https://www.babeljs.cn/docs/plugins" target="_blank" rel="noreferrer">常用的插件</a></p><h3 id="preset" tabindex="-1">preset <a class="header-anchor" href="#preset" aria-hidden="true">#</a></h3><p>预设是已经定义好的一组插件。</p><p><code>@babel/preset-env</code>: 不需要指定es版本,直接支持到最新标准。 如果需要使用一些实验性质的<code>Presets</code>，需要安装<code>babel-preset-stage-x</code></p><ul><li>stage-0-设想（Strawman）:只是一个想法，可能有Babel插件。</li><li>stage-1-建议（Proposal）:值得跟进的。</li><li>stage-2-草案（Draft）:初始规范。</li><li>stage-3-候选（Candidate）:完成规范并在浏览器上初步实现。</li><li>stage-4-完成（Finished）:将添加到下一个年度版本中的。</li></ul><h3 id="polyfills" tabindex="-1">Polyfills <a class="header-anchor" href="#polyfills" aria-hidden="true">#</a></h3><blockquote><p>@babel/polyfill</p></blockquote><p>在运行环境中并没有实现的一些方法，babel-polyfill 会给其做兼容。 但是这样做也有一个缺点，就是会污染全局变量，而且项目打包以后体积会增大很多，因为把整个依赖包也搭了进去。所以并不推荐在一些方法类库中去使用。</p><p>在babel7中，@babel/polyfill集成了<code>core-js/stable</code>，<code>core.js</code>使用了<code>es5</code>实现<code>es6，7，8，9，10</code>的功能，并且支持按需引入。 <code>regenerator-runtime/runtime</code>，则是一个转化器的补充。像<code>Promise or WeakMap</code>这样的方法。</p><h3 id="babel-cli" tabindex="-1">@babel/cli <a class="header-anchor" href="#babel-cli" aria-hidden="true">#</a></h3><p>babel-cli可以支持在命令行中对js进行转换。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">babel</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xxx.js</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="指定输出文件" tabindex="-1">指定输出文件 <a class="header-anchor" href="#指定输出文件" aria-hidden="true">#</a></h4><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">babel</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">script.js</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--out-file</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">script-compiled.js</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="监听文件" tabindex="-1">监听文件 <a class="header-anchor" href="#监听文件" aria-hidden="true">#</a></h4><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">babel</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">script.js</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--watch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--out-file</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">script-compiled.js</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="加入source-maps" tabindex="-1">加入Source Maps <a class="header-anchor" href="#加入source-maps" aria-hidden="true">#</a></h4><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">babel</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">script.js</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--out-file</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">script-compiled.js</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--source-maps</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="babel-plugin-transform-runtime" tabindex="-1">@babel/plugin-transform-runtime <a class="header-anchor" href="#babel-plugin-transform-runtime" aria-hidden="true">#</a></h3><p>每个Babel编译后的脚本文件，都以导入的方式使用Babel的帮助函数，而不是每个文件都复制一份帮助函数的代码。</p><ul><li>提高代码重用性，缩小编译后的代码体积。</li><li>防止污染全局作用域。（启用corejs配置），babel-polyfill会将Promise等添加成全局变量，污染全局空间。但是@babel/polyfill并不会。</li><li>默认使用@babel/runtime，corejs配置为2时，改为使用@babel/runtime-corejs2。</li></ul><p>几个包的包含关系</p><ul><li>babel-polyfill仅仅是引用core-js、regenerator-runtime这两个npm包</li><li>@babel/runtime包含两个文件夹：helpers（定义了一些处理新的语法关键字的帮助函数）、regenerator（仅仅是引用regenerator-runtime这个npm包）。</li><li>@babel/runtime-corejs2包含三个文件夹：core-js（引用core-js这个npm包）、helpers（定义了一些处理新的语法关键字的帮助函数）、regenerator（仅仅是引用regenerator-runtime这个npm包）。</li></ul><p>@babel/runtime-corejs2 ≈ @babel/runtime + babel-polyfill;</p><p>@babel/runtime只能处理语法关键字，而@babel/runtime-corejs2还能处理新的全局变量（例如，Promise）、新的原生方法（例如，String.padStart</p><h2 id="babel解析原理" tabindex="-1">babel解析原理 <a class="header-anchor" href="#babel解析原理" aria-hidden="true">#</a></h2><p>和编译器类似，babel 的转译过程也分为三个阶段，这三步具体是：</p><p><img src="`+n+'" alt="img"></p><h3 id="解析-parse" tabindex="-1">解析 Parse <a class="header-anchor" href="#解析-parse" aria-hidden="true">#</a></h3><p>将代码解析生成抽象语法树( 即AST )，也就是计算机理解我们代码的方式，一般来说每个 js 引擎都有自己的 AST，比如熟知的 v8，chrome 浏览器会把 js 源码转换为抽象语法树，再进一步转换为字节码或机器代码，而 <code>babel</code> 则是通过 <code>babylon</code> 实现的。简单来说就是一个对于 JS 代码的一个编译过程，进行了词法分析与语法分析的过程。</p><h3 id="转换-transform" tabindex="-1">转换 Transform <a class="header-anchor" href="#转换-transform" aria-hidden="true">#</a></h3><p>对于 AST 进行变换一系列的操作，<code>babel</code> 接受得到 <code>AST</code> 并通过 <code>babel-traverse</code> 对其进行遍历，在此过程中进行添加、更新及移除等操作，通过 ImportDeclaration 可以得到依赖属性。</p><h3 id="生成-generate" tabindex="-1">生成 Generate <a class="header-anchor" href="#生成-generate" aria-hidden="true">#</a></h3><p>将变换后的 AST 再转换为 JS 代码, 使用到的模块是 babel-generator。</p><p>而 babel-core 模块则是将三者结合使得对外提供的API做了一个简化。</p><p>babel 只是转译新标准引入的语法，这些是不会转译的，需要引入对应的 polyfill 来解决。在我们编写插件的主要专注于第二步转换过程的工作，专注于对于代码的转化规则的拓展，解析与生成的偏底层相关操作则有对应的模块支持。</p><h3 id="抽象语法树-ast-是怎么生成的" tabindex="-1">抽象语法树（AST）是怎么生成的 <a class="header-anchor" href="#抽象语法树-ast-是怎么生成的" aria-hidden="true">#</a></h3><ul><li>分词：将整个代码字符串分割成语法单元数组（token）</li></ul><p>JS代码中的语法单元主要指如标识符、运算符、括号、数字、字符串、空格解析成最小单元。</p><ul><li>语义分析：在分词结果的基础上分析语法单元之间的关系。</li></ul><p>将得到的词汇进行一个立体的组合，确定词语之间的关系。</p><ol><li>语句(statement)，即指一个具备边界的代码区域，相邻的两个语句之间从语法上来讲互不影响，即调换顺序也不会产生语法错误。</li><li>表达式(expression)，则指最终有个结果的一小段代码，他可以嵌入到另一个表达式，且包含在语句中。</li></ol><p>简单来说语义分析既是对语句和表达式识别，这是个递归过程，解析中，babel会在解析每个语句和表达式的过程中设置一个暂存器，用来暂存当前读取到的词法单元，如果解析失败，就会返回之前的暂存点，再按照另一种方式进行解析，如果解析成功，则将暂存点销毁。类似于回溯算法。</p>',49),i=[p];function o(t,c,d,b,h,u){return a(),l("div",null,i)}const g=e(r,[["render",o]]);export{y as __pageData,g as default};
