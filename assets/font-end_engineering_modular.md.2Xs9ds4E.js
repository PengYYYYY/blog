import{_ as s,c as a,o as n,U as l}from"./chunks/framework.BWp8c4Qg.js";const m=JSON.parse('{"title":"模块化","description":"","frontmatter":{},"headers":[],"relativePath":"font-end/engineering/modular.md","filePath":"font-end/engineering/modular.md","lastUpdated":1711869862000}'),e={name:"font-end/engineering/modular.md"},o=l(`<h1 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h1><h2 id="为什么需要模块化" tabindex="-1">为什么需要模块化 <a class="header-anchor" href="#为什么需要模块化" aria-label="Permalink to &quot;为什么需要模块化&quot;">​</a></h2><ul><li>污染全局作用域。容易有命名冲突问题</li><li>依赖关系不明显，不利于维护</li><li>开发和后期维护成本较高</li><li>无法做工程化</li></ul><p>模块化有以下规范：</p><ul><li>CommonJS 规范</li><li>AMD</li><li>CMD</li><li>UMD</li><li>ES6 modules</li></ul><h2 id="commonjs-规范" tabindex="-1">CommonJS 规范 <a class="header-anchor" href="#commonjs-规范" aria-label="Permalink to &quot;CommonJS 规范&quot;">​</a></h2><p><code>Node.js</code> 是 <code>commonJS</code> 规范的主要应用者</p><p>module、exports、require、global 是它的关键字</p><h3 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h3><p>通过 <code>require</code> 方法来同步加载所要依赖的其他模块，然后通过 <code>exports</code> 或者 <code>module.exports</code> 来导出需要暴露的接口</p><ul><li>a.js</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> add </span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports.</span><span style="color:#BABED8;">x </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports.</span><span style="color:#BABED8;">add </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> add</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>b.js</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./a.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(example</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">x)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 5</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(example</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 6</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h3><p>其实在编译的过程中，Node 对我们定义的 JS 模块进行了一次基础的包装</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">exports</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> require</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> modules</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> __filename</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> __dirname</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这样我们便可以访问这些传入的 <code>arguments</code> 以及隔离了彼此的作用域。 <code>CommonJS</code> 的一个模块，就是一个脚本文件。<code>require</code> 命令第一次加载该脚本，就会执行整个脚本，然后在内存生成一个对象。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#FFCB6B;">  id</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#FFCB6B;">  exports</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span><span style="color:#89DDFF;"> ...</span><span style="color:#89DDFF;"> },</span></span>
<span class="line"><span style="color:#FFCB6B;">  loaded</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>以后需要用到这个模块的时候，就会到 <code>exports</code> 属性上面取值。即使再次执行 <code>require</code> 命令，也不会再次执行该模块，而是到缓存之中取值。<code>CommonJS</code> 用同步的方式加载模块，只有在代码执行到 <code>require</code> 的时候，才回去执行加载。在服务端，模块文件都存在本地磁盘，读取非常快.</p><p>优点：<code>CommonJS</code> 规范完成了 <code>JavaScript</code> 的 模块化，解决了依赖、全局变量污染的问题 缺点：在浏览器端，限于网络原因，更合理的方案是使用异步加载。这就是 <code>AMD</code> 规范诞生的背景。</p><h2 id="amd" tabindex="-1">AMD <a class="header-anchor" href="#amd" aria-label="Permalink to &quot;AMD&quot;">​</a></h2><p>异步加载模块：这里异步指的是不堵塞浏览器其他任务（ <code>dom</code> 构建，<code>css</code> 渲染等），而加载内部是同步的（加载完模块后立即执行回调）</p><h3 id="amd用法" tabindex="-1">AMD用法 <a class="header-anchor" href="#amd用法" aria-label="Permalink to &quot;AMD用法&quot;">​</a></h3><p>define() 定义模块，用 require() 加载模块</p><ul><li>define(id, [depends], callback)</li><li>require([module], callback)</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定义 moduleA 依赖 a, b模块</span></span>
<span class="line"><span style="color:#82AAFF;">define</span><span style="color:#BABED8;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;">b</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#BABED8;">   a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">doSomething</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#BABED8;">   b</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">doSomething</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用</span></span>
<span class="line"><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./moduleA</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">moduleA</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>优点：适合在浏览器环境中异步加载模块。 可以并行加载多个模块。</p><p>缺点：不能按需加载，而是必须提前加载所有的依赖。</p><h2 id="cmd-规范" tabindex="-1">CMD 规范 <a class="header-anchor" href="#cmd-规范" aria-label="Permalink to &quot;CMD 规范&quot;">​</a></h2><p>按需加载，依赖就近，延迟执行</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">define</span><span style="color:#BABED8;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">require</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> exports</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> module</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    var</span><span style="color:#BABED8;"> a</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> //在需要时申明</span></span>
<span class="line"><span style="color:#BABED8;">    a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">doSomething</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">        var</span><span style="color:#BABED8;"> b</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        b</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">doSomething</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>代码在运行时，首先是不知道依赖的，需要遍历所有的 require 关键字，找出后面的依赖。具体做法是将 function toString 后，用正则匹配出 require 关键字后面的依赖。牺牲性能来换取更多开发便利的方法。</p><p>而 AMD 是依赖前置的，换句话而 AMD是依赖前置的，在解析和执行当前模块之前，模块作者必须指明当前模块所依赖的模块。代码在一旦运行到此处，能立即知晓依赖。而无需遍历整个函数体找到它的依赖，因此性能有所提升，缺点就是开发者必须显式得指明依赖——这会使得开发工作量变大。</p><h2 id="umd" tabindex="-1">UMD <a class="header-anchor" href="#umd" aria-label="Permalink to &quot;UMD&quot;">​</a></h2><p>不是一种规范,是结合 AMD 和 CommonJS 的一种更为通用的 JS 模块解决方案,在webpack打包的时候进行配置</p><h2 id="es6-module" tabindex="-1">ES6 module <a class="header-anchor" href="#es6-module" aria-label="Permalink to &quot;ES6 module&quot;">​</a></h2><p><code>ES6 Modules</code> 不是对象，<code>import</code> 命令会被 <code>JavaScript</code> 引擎静态分析，在编译时就引入模块代码，而不是在代码运行时加载，所以无法实现条件加载。也正因为这个，使得静态分析成为可能。</p><ul><li>之前的几种模块化方案都是前端社区自己实现的，只是得到了大家的认可和广泛使用</li><li><code>ES6</code> 在语言标准的层面上，实现了模块功能，完全可以取代 <code>CommonJS</code> 和 <code>AMD</code> 规范，成为浏览器和服务器通用的模块解决方案。</li><li>由于 <code>ES6</code> 目前在部分浏览器无法执行，所以，我们只能通过 <code>babel</code> 将不被支持的 <code>import</code> 编译为当前受到广泛支持的 <code>require</code>。</li></ul><p>在开发环境中使用众多。</p><p><a href="http://kangax.github.io/compat-table/es6/" target="_blank" rel="noreferrer">支持情况</a></p><h2 id="commonjs-es-module-的区别" tabindex="-1">CommonJS，ES module 的区别 <a class="header-anchor" href="#commonjs-es-module-的区别" aria-label="Permalink to &quot;CommonJS，ES module 的区别&quot;">​</a></h2><p>它们都是一种模块规范，例如 Node 使用的就是 CommonJS 规范。ES module 则是语言标准上的模块规范。</p><ul><li>CommonJS 模块使用 require() 和 module.exports，ES6 模块使用 import和 export。</li><li>CommonJS 模块输出的是一个值的浅拷贝，ES6 模块输出的是值的引用。</li><li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</li><li>CommonJS 模块的 require() 是同步加载模块，ES6 模块的 import 命令是异步加载，有一个独立的模块依赖的解析阶段。</li><li>ES6 模块之中，顶层的 this 指向 undefined；CommonJS 模块的顶层 this 指向当前模块，</li><li>对于循环加载的处理方法不同</li></ul><p>第 3 个差异是因为 CommonJS 加载的是一个对象（即 module.exports 属性），该对象只有在脚本运行完才会生成。</p>`,45),p=[o];function r(c,t,i,D,d,F){return n(),a("div",null,p)}const u=s(e,[["render",r]]);export{m as __pageData,u as default};
