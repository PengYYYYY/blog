import{_ as s,c as a,o as n,U as e}from"./chunks/framework.B9byA8Cw.js";const u=JSON.parse('{"title":"CSS中的BEM命名规范","description":"","frontmatter":{},"headers":[],"relativePath":"font-end/html/bem.md","filePath":"font-end/html/bem.md","lastUpdated":1710234454000}'),l={name:"font-end/html/bem.md"},p=e(`<h1 id="css中的bem命名规范" tabindex="-1">CSS中的BEM命名规范 <a class="header-anchor" href="#css中的bem命名规范" aria-label="Permalink to &quot;CSS中的BEM命名规范&quot;">​</a></h1><p>Bem 是块（block）、元素（element）、修饰符（modifier）的简写，由 Yandex 团队提出的一种前端 CSS 命名方法论。</p><h2 id="划线" tabindex="-1">划线 <a class="header-anchor" href="#划线" aria-label="Permalink to &quot;划线&quot;">​</a></h2><h3 id="中划线" tabindex="-1">-中划线 <a class="header-anchor" href="#中划线" aria-label="Permalink to &quot;-中划线&quot;">​</a></h3><p>仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。</p><h3 id="双下划线" tabindex="-1">__双下划线 <a class="header-anchor" href="#双下划线" aria-label="Permalink to &quot;__双下划线&quot;">​</a></h3><p>双下划线用来连接块和块的子元素</p><h3 id="单下划线" tabindex="-1">_单下划线 <a class="header-anchor" href="#单下划线" aria-label="Permalink to &quot;_单下划线&quot;">​</a></h3><p>单下划线用来描述一个块或者块的子元素的一种状态</p><p>BEM是一个简单又非常有用的命名约定。让你的前端代码更容易阅读和理解，更容易协作，更容易控制，更加健壮和明确，而且更加严密。</p><h2 id="bem命名模式" tabindex="-1">BEM命名模式 <a class="header-anchor" href="#bem命名模式" aria-label="Permalink to &quot;BEM命名模式&quot;">​</a></h2><p>BEM命名约定的模式是：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">block</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">block__element</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">block--modifier</span><span style="color:#89DDFF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>每一个块(block)名应该有一个命名空间（前缀）：</p><ul><li>block代表了更高级别的抽象或组件。</li><li>block__element 代表 .block 的后代，用于形成一个完整的 .block 的整体。</li><li>block--modifier 代表 .block 的不同状态或不同版本。</li></ul><p>使用两个连字符和下划线而不是一个，是为了让你自己的块可以用单个连字符来界定。如：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">sub-block__element</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">sub-block--modifier</span><span style="color:#89DDFF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="如何使用-bem-命名法" tabindex="-1">如何使用 BEM 命名法 <a class="header-anchor" href="#如何使用-bem-命名法" aria-label="Permalink to &quot;如何使用 BEM 命名法&quot;">​</a></h2><h3 id="什么时候应该用-bem-格式" tabindex="-1">什么时候应该用 BEM 格式 <a class="header-anchor" href="#什么时候应该用-bem-格式" aria-label="Permalink to &quot;什么时候应该用 BEM 格式&quot;">​</a></h3><ul><li>使用 BEM 的诀窍是，你要知道什么时候哪些东西是应该写成 BEM 格式的。</li><li>并不是每个地方都应该使用 BEM 命名方式。当需要明确关联性的模块关系时，应当使用 BEM 格式。</li><li>比如只是一条公共的单独的样式，就没有使用 BEM 格式的意义：</li></ul><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">hide</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">    display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> none </span><span style="color:#F78C6C;">!important</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="在-css-预处理器中使用-bem-格式" tabindex="-1">在 CSS 预处理器中使用 BEM 格式 <a class="header-anchor" href="#在-css-预处理器中使用-bem-格式" aria-label="Permalink to &quot;在 CSS 预处理器中使用 BEM 格式&quot;">​</a></h3><ul><li>BEM 的一个槽点是，命名方式长而难看，书写不雅。相比 BEM 格式带来的便利来说，我们应客观看待。</li><li>而且，一般来说会使用通过 LESS/SASS 等预处理器语言来编写 CSS，利用其语言特性书写起来要简单很多。</li></ul><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">header</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">    max-width</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1200px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    &amp;__body {</span></span>
<span class="line"><span style="color:#B2CCD6;">        padding</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 20px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#BABED8;">    &amp;__button </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#B2CCD6;">        padding</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 5px</span><span style="color:#F78C6C;"> 8px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        &amp;--primary {</span><span style="color:#B2CCD6;">background</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> blue</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#BABED8;">        &amp;--success </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">background</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> green</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="pbem" tabindex="-1">PBEM <a class="header-anchor" href="#pbem" aria-label="Permalink to &quot;PBEM&quot;">​</a></h2><p>PBEM 和 BEM 的区别在于使用了前缀 prefix，以 TDesign 为例，常见的 class 为 <code>t-header</code> 之类。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>BEM只是人为提出来的一种规范，在团队作战当中，他可以起到类似于ESlint这样的功能，做命名的约束。</p>`,28),o=[p];function r(c,t,i,d,b,m){return n(),a("div",null,o)}const F=s(l,[["render",r]]);export{u as __pageData,F as default};
