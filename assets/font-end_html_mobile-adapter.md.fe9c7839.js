import{_ as e,o as l,c as a,a as i}from"./app.06fa9719.js";const m=JSON.parse('{"title":"移动端适配","description":"","frontmatter":{},"headers":[{"level":2,"title":"视口 ViewPort","slug":"视口-viewport","link":"#视口-viewport","children":[{"level":3,"title":"在移动端中有三种类型","slug":"在移动端中有三种类型","link":"#在移动端中有三种类型","children":[]},{"level":3,"title":"设置 viewport","slug":"设置-viewport","link":"#设置-viewport","children":[]},{"level":3,"title":"为什么要设置viewport","slug":"为什么要设置viewport","link":"#为什么要设置viewport","children":[]}]},{"level":2,"title":"设备像素比 dpr 与 1px 物理像素","slug":"设备像素比-dpr-与-1px-物理像素","link":"#设备像素比-dpr-与-1px-物理像素","children":[{"level":3,"title":"物理像素（physical pixel）","slug":"物理像素-physical-pixel","link":"#物理像素-physical-pixel","children":[]},{"level":3,"title":"设备独立像素（density-indenpendent pixel）","slug":"设备独立像素-density-indenpendent-pixel","link":"#设备独立像素-density-indenpendent-pixel","children":[]},{"level":3,"title":"屏幕密度","slug":"屏幕密度","link":"#屏幕密度","children":[]},{"level":3,"title":"屏幕密度","slug":"屏幕密度-1","link":"#屏幕密度-1","children":[]},{"level":3,"title":"设备像素比（device pixel ratio）","slug":"设备像素比-device-pixel-ratio","link":"#设备像素比-device-pixel-ratio","children":[]},{"level":3,"title":"1px 的物理像素的解决方案","slug":"_1px-的物理像素的解决方案","link":"#_1px-的物理像素的解决方案","children":[]}]},{"level":2,"title":"设备像素比 dpr 与 rem 的适配方案","slug":"设备像素比-dpr-与-rem-的适配方案","link":"#设备像素比-dpr-与-rem-的适配方案","children":[{"level":3,"title":"rem 如何设置","slug":"rem-如何设置","link":"#rem-如何设置","children":[]},{"level":3,"title":"rem 适配规则","slug":"rem-适配规则","link":"#rem-适配规则","children":[]}]},{"level":2,"title":"视口单位适配方案","slug":"视口单位适配方案","link":"#视口单位适配方案","children":[]}],"relativePath":"font-end/html/mobile-adapter.md","lastUpdated":1691596718000}'),n={name:"font-end/html/mobile-adapter.md"},r=i(`<h1 id="移动端适配" tabindex="-1">移动端适配 <a class="header-anchor" href="#移动端适配" aria-hidden="true">#</a></h1><h2 id="视口-viewport" tabindex="-1">视口 ViewPort <a class="header-anchor" href="#视口-viewport" aria-hidden="true">#</a></h2><h3 id="在移动端中有三种类型" tabindex="-1">在移动端中有三种类型 <a class="header-anchor" href="#在移动端中有三种类型" aria-hidden="true">#</a></h3><ol><li>layoutviewport: 大于实际屏幕，元素的宽度继承于 <code>layoutviewport</code>, 用于保证网站的外观特性与桌面浏览器一样。<code>layoutviewport</code> 每个浏览器不同。可以通过 <code>document.documentElement.clientWidth</code> 去获取</li><li>visualviewport：当前显示在屏幕上的页面，即浏览器可视区域的宽度。</li><li>idealviewport：浏览器定义的可完美适配移动端的理想 viewport，固定不变，可以认为是设备视口宽度。</li></ol><h3 id="设置-viewport" tabindex="-1">设置 viewport <a class="header-anchor" href="#设置-viewport" aria-hidden="true">#</a></h3><p>通过对几种 <code>viewport</code> 设置可以对网页的展示进行有效的控制，在移动端我们经常会在 <code>head</code> 标签中看到这段代码：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">width=device-width,initial-scale=1,user-scale=no</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过对 <code>meta</code> 标签三个 <code>viewport</code> 的设置，最终使页面完美展示：</p><ul><li>width 设置的是 <code>layoutviewport</code> 的宽度</li><li>initial-scale 设置页面的初始缩放值，并且这个初始缩放值是相对于 idealviewport 缩放的，最终得到的结果不仅会决定 visualviewport，还会影响到 layoutviewport</li><li>user-scalable 是否允许用户进行缩放的设置</li></ul><h3 id="为什么要设置viewport" tabindex="-1">为什么要设置viewport <a class="header-anchor" href="#为什么要设置viewport" aria-hidden="true">#</a></h3><p><code>viewport</code> 设置不会对 <code>PC</code> 页面产生影响，但对于移动页面却很重要。</p><ul><li>媒体查询 <code>@media</code> 响应式布局中,会根据媒体查询功能来适配多端布局,必须对 <code>viewport</code> 进行设置,否则根据查询到的尺寸无法正确的匹配视觉宽度而导致布局混乱。如不设置 <code>viewport</code> 参数，移动端媒体查询的结果将是 <code>980px</code> 这个节点布局的参数。</li><li>目前多数手机的drp都不再是1，为了产出高保真页面，我们一般会给出 <code>750px</code> 的设计稿，就需要通过设置 viewport 的参数来进行整体换算。</li></ul><h2 id="设备像素比-dpr-与-1px-物理像素" tabindex="-1">设备像素比 dpr 与 1px 物理像素 <a class="header-anchor" href="#设备像素比-dpr-与-1px-物理像素" aria-hidden="true">#</a></h2><h3 id="物理像素-physical-pixel" tabindex="-1">物理像素（physical pixel） <a class="header-anchor" href="#物理像素-physical-pixel" aria-hidden="true">#</a></h3><p>手机屏幕上显示的最小单元，该最小单元具有颜色及亮度的属性可供设置，iPhone6、7、8 为：<code>750 * 1334</code>，iPhone6+、7+、8+ 为 <code>1242* 2208</code></p><h3 id="设备独立像素-density-indenpendent-pixel" tabindex="-1">设备独立像素（density-indenpendent pixel） <a class="header-anchor" href="#设备独立像素-density-indenpendent-pixel" aria-hidden="true">#</a></h3><p>此为逻辑像素，计算机设备中的一个点，<code>css</code> 中设置的像素指的就是该像素。老早在没有 <code>retina</code> 屏之前，设备独立像素与物理像素是相等的。简称DIPs。</p><h3 id="屏幕密度" tabindex="-1">屏幕密度 <a class="header-anchor" href="#屏幕密度" aria-hidden="true">#</a></h3><p>屏幕密度是指一个设备表面上存在的像素数量，它通常以每英寸有多少像素来计算(PPI)。</p><h3 id="屏幕密度-1" tabindex="-1">屏幕密度 <a class="header-anchor" href="#屏幕密度-1" aria-hidden="true">#</a></h3><p>屏幕密度是指一个设备表面上存在的像素数量，它通常以每英寸有多少像素来计算(PPI)。</p><h3 id="设备像素比-device-pixel-ratio" tabindex="-1">设备像素比（device pixel ratio） <a class="header-anchor" href="#设备像素比-device-pixel-ratio" aria-hidden="true">#</a></h3><p>设备像素比(dpr) = 物理像素/设备独立像素。iPhone 6、7、8 的 dpr 为 2,一个设备独立像素便为 4 个物理像素, 因此在 css 上设置的 1px 在其屏幕上占据的是 2 个物理像素,0.5px 对应的才是其所能展示的最小单位。</p><h3 id="_1px-的物理像素的解决方案" tabindex="-1">1px 的物理像素的解决方案 <a class="header-anchor" href="#_1px-的物理像素的解决方案" aria-hidden="true">#</a></h3><p>对于 dpr=2 的屏幕，1px压缩一半便可与1px的设备像素比匹配，可以通过将缩放比 initial-scale 设置为 0.5=1/2 而实现。dpr=3的屏幕可以将 initial-scale设置为 0.33=1/3 来实现。</p><h2 id="设备像素比-dpr-与-rem-的适配方案" tabindex="-1">设备像素比 dpr 与 rem 的适配方案 <a class="header-anchor" href="#设备像素比-dpr-与-rem-的适配方案" aria-hidden="true">#</a></h2><h3 id="rem-如何设置" tabindex="-1">rem 如何设置 <a class="header-anchor" href="#rem-如何设置" aria-hidden="true">#</a></h3><p>rem 是相对于根元素 html 的 font-size 来做计算，通常在页面初始化时加载时通过对document.documentElement.style.fontSize 设置来实现</p><h3 id="rem-适配规则" tabindex="-1">rem 适配规则 <a class="header-anchor" href="#rem-适配规则" aria-hidden="true">#</a></h3><p>通过对 <code>initial-scale = 1/dpr</code> 的设置，已将对屏幕的描述从物理像素转化到了物理像素上了，这将是后续推导的基础，且设计稿为 <code>750px</code>。</p><ol><li>物理像素为 750 = 375 * 2，若屏幕等分为 10 份，那么 1rem = 75px，10rem = 750px;</li><li>物理像素为 1125 = 375 * 3，若屏幕等分为 10 份，那么 1rem = 112.5px, 10rem = 1125px;</li><li>物理像素为 1242 = 414 * 3, 若屏幕等分为 10 份，那么 1rem = 124.2px, 10rem = 1242px;</li></ol><p>由此可知 <code>rem</code> 的设定方式:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">style</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fontSize </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientWidth </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">px</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="视口单位适配方案" tabindex="-1">视口单位适配方案 <a class="header-anchor" href="#视口单位适配方案" aria-hidden="true">#</a></h2><p>将视口宽度 <code>window.innerWidth</code> 和视口高度 <code>window.innerHeight</code> 等分为 100 份，且将这里的视口理解成 <code>idealviewport</code> ，并不会随着 <code>viewport</code> 的不同设置而改变。</p><ul><li>vw: 1vw 为视口宽度的 1%</li><li>vh: 1vh 为视口高度的 1%</li><li>vmin: vw 和 vh 中的较小值</li><li>vmax: vw 和 vh 中的较大值</li></ul><p>如果设计稿为 750px，那么 1vw = 7.5px，100vw = 750px。使用 <code>pxtoviewport</code> 的库就可以帮我们转换。</p>`,37),s=[r];function p(o,t,d,c,h,v){return l(),a("div",null,s)}const x=e(n,[["render",p]]);export{m as __pageData,x as default};
