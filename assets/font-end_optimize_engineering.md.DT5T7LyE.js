import{_ as s,c as a,o as l,U as n}from"./chunks/framework.BWp8c4Qg.js";const d=JSON.parse('{"title":"工程中的相关优化","description":"","frontmatter":{},"headers":[],"relativePath":"font-end/optimize/engineering.md","filePath":"font-end/optimize/engineering.md","lastUpdated":1711881790000}'),e={name:"font-end/optimize/engineering.md"},p=n(`<h1 id="工程中的相关优化" tabindex="-1">工程中的相关优化 <a class="header-anchor" href="#工程中的相关优化" aria-label="Permalink to &quot;工程中的相关优化&quot;">​</a></h1><h2 id="渲染相关" tabindex="-1">渲染相关 <a class="header-anchor" href="#渲染相关" aria-label="Permalink to &quot;渲染相关&quot;">​</a></h2><h3 id="渲染流程" tabindex="-1">渲染流程 <a class="header-anchor" href="#渲染流程" aria-label="Permalink to &quot;渲染流程&quot;">​</a></h3><ul><li>生成 dom-tree,</li><li>生成 css-tree</li><li>合成 css-dom-tree，也就是 render-tree</li><li>计算布局（layout）:根据生成的 render-tree,进行回流，以计算每个节点的几何信息（位置，大小，字体样式）。</li><li>绘制（painting）：根据渲染树和回流得到的几何信息，得到每个节点的绝对像素</li><li>展示（display）：将像素发送给图形处理器（GPU）,展示到页面上</li></ul><h3 id="页面渲染技术架构" tabindex="-1">页面渲染技术架构 <a class="header-anchor" href="#页面渲染技术架构" aria-label="Permalink to &quot;页面渲染技术架构&quot;">​</a></h3><h4 id="服务端渲染" tabindex="-1">服务端渲染 <a class="header-anchor" href="#服务端渲染" aria-label="Permalink to &quot;服务端渲染&quot;">​</a></h4><ul><li>后端同步渲染、同构直出页面</li></ul><h4 id="客户端渲染" tabindex="-1">客户端渲染 <a class="header-anchor" href="#客户端渲染" aria-label="Permalink to &quot;客户端渲染&quot;">​</a></h4><ul><li>js 渲染：静态化、前后端分离、单页应用</li><li>web app：ang, vue, react</li></ul><h3 id="lazy-load实现" tabindex="-1">lazy-load实现 <a class="header-anchor" href="#lazy-load实现" aria-label="Permalink to &quot;lazy-load实现&quot;">​</a></h3><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">image</span><span style="color:#C792EA;"> src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">default.png</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C792EA;"> :data-src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx.png</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lazy-load-img</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> throttle</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> time</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> isRun</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> false</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">isRun</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#BABED8;">    isRun</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span></span>
<span class="line"><span style="color:#82AAFF;">    setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#BABED8;"> arguments</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">      isRun</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> false</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span><span style="color:#BABED8;"> time</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">scroll </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> throttle</span><span style="color:#BABED8;">(watchScroll</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 200</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> watchScroll</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> bodyScrollHeight</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">body</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">scrollTop</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> windowHeight</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;">  window</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">innerHeight</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> images</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelectorAll</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lazy-load-img</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> images</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">    var</span><span style="color:#BABED8;"> imgHeight</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> images</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">offsetTop</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">imgHeight</span><span style="color:#89DDFF;">  &lt;</span><span style="color:#BABED8;"> windowHeight</span><span style="color:#89DDFF;">  +</span><span style="color:#BABED8;"> bodyScrollHeight</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">       images</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">src</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> images</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getAttribute</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">data-src</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">       images</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">className</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> images</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">className</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lazy-load-img</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="预加载" tabindex="-1">预加载 <a class="header-anchor" href="#预加载" aria-label="Permalink to &quot;预加载&quot;">​</a></h3><p>实现方式</p><ol><li>html 标签</li><li>image对 象</li><li>使用 preload,prefetch,preconnect</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#C792EA;"> rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">preload</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xxx.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#C792EA;"> rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prefetch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scr/image.png</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#C792EA;"> rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dns-prefetch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scr/image.png</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#C792EA;"> rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">preconnect</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://my.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> crossorigin</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="webview" tabindex="-1">webview <a class="header-anchor" href="#webview" aria-label="Permalink to &quot;webview&quot;">​</a></h2><h3 id="ios-uiwebview" tabindex="-1">ios UIWebview <a class="header-anchor" href="#ios-uiwebview" aria-label="Permalink to &quot;ios UIWebview&quot;">​</a></h3><blockquote><p>不足</p></blockquote><ol><li>内存泄露</li><li>极高内存峰值</li><li>Touch Delay(300ms延迟)</li><li>JavaScript 的运行性能还有通信限制</li></ol><h3 id="ios-wkwebview" tabindex="-1">ios wkWebview <a class="header-anchor" href="#ios-wkwebview" aria-label="Permalink to &quot;ios wkWebview&quot;">​</a></h3><blockquote><p>优势</p></blockquote><ol><li>苹果在 wwdc 2014 上推出的新一代 webview 组件</li><li>内存开销变低</li><li>在性能，稳定性，占有内存方面有很大的提升</li><li>高达 60fps 的刷新率</li><li>支持右滑返回</li><li>更多的 html 属性</li></ol><h2 id="监控" tabindex="-1">监控 <a class="header-anchor" href="#监控" aria-label="Permalink to &quot;监控&quot;">​</a></h2><h3 id="h5质量即时检测" tabindex="-1">h5质量即时检测 <a class="header-anchor" href="#h5质量即时检测" aria-label="Permalink to &quot;h5质量即时检测&quot;">​</a></h3><ul><li><p>页面错误</p><ul><li>js 报错</li><li>接口报错</li><li>线上环境检测</li><li>页面白屏</li></ul></li><li><p>页面性能</p><ul><li>页面加载时间检测</li><li>前端 html，css, js 压缩检测</li><li>js，css 个数检测</li><li>服务器 gzip 检测</li><li>服务器缓存设置检测</li></ul></li><li><p>页面安全</p><ul><li>http 和 https 检测</li><li>xss 检测</li></ul></li></ul><h3 id="上线后h5性能和错误监控" tabindex="-1">上线后h5性能和错误监控 <a class="header-anchor" href="#上线后h5性能和错误监控" aria-label="Permalink to &quot;上线后h5性能和错误监控&quot;">​</a></h3><ul><li><p>页面性能监控</p><ul><li>js 错误监控</li><li>API 接口监控</li><li>日志详情</li><li>用户轨迹</li></ul></li><li><p>统计报表</p><ul><li>大盘走势</li><li>地域</li><li>运营商</li><li>浏览器</li></ul></li><li><p>页面管理</p></li><li><p>性能服务</p></li><li><p>报警服务</p></li></ul><h2 id="打包优化手段" tabindex="-1">打包优化手段 <a class="header-anchor" href="#打包优化手段" aria-label="Permalink to &quot;打包优化手段&quot;">​</a></h2><h3 id="treeshaking" tabindex="-1">TreeShaking <a class="header-anchor" href="#treeshaking" aria-label="Permalink to &quot;TreeShaking&quot;">​</a></h3><p><code>TreeShaking</code> 会在静态解析过程中将代码中的冗余代码去除。在 <code>production</code> 环境中默认开启。该功能借鉴自 <code>rollup</code></p><h3 id="scopehoisting" tabindex="-1">ScopeHoisting <a class="header-anchor" href="#scopehoisting" aria-label="Permalink to &quot;ScopeHoisting&quot;">​</a></h3><p><code>ScopeHoisting</code> 主要用于处理构建过程中由于模块处理导致出现的大量匿名闭包函数，在 <code>ES6-</code> 中,通常会通过使用匿名闭包函数来构造模块。</p><p><code>ScopeHoisting</code> 的原理是通过分析代码中的模块执行顺序，替换变量名称来达到减少闭包产生的效果。闭包会形成大量的块级作用域，增加内存损耗。</p><h3 id="splitchunk" tabindex="-1">SplitChunk <a class="header-anchor" href="#splitchunk" aria-label="Permalink to &quot;SplitChunk&quot;">​</a></h3><p>对于大的应用来讲，将所有代码都放到一个文件中不够显示，需要对代码进行分割和懒加载(用到的时候才加载)。</p><p>懒加载 js 脚本的方式</p><ul><li>commonJS: require.ensure</li><li>ES6:动态 import(目前原生未支持，需要babel转换) <code>@babel/plugin-syntax-dynamic-import</code></li></ul><h3 id="terser" tabindex="-1">Terser <a class="header-anchor" href="#terser" aria-label="Permalink to &quot;Terser&quot;">​</a></h3><p>压缩工具，uglify 在遇到 es6 时会报错，terser 可以进行处理。</p><h2 id="eslint" tabindex="-1">Eslint <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;Eslint&quot;">​</a></h2><p>Eslint 代码检查工具</p><h3 id="eslint-的使用" tabindex="-1">eslint 的使用 <a class="header-anchor" href="#eslint-的使用" aria-label="Permalink to &quot;eslint 的使用&quot;">​</a></h3><p>安装 husky，增加 npm script, 通过 lint-staged 增量检查修改方式</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;"> &quot;</span><span style="color:#C792EA;">precommit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">lint-staged</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">,</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lint-staged</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;"> &quot;</span><span style="color:#C792EA;">linters</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#FFCB6B;">*.{js,css}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint --fix</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">git add</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="webpack-打包基础库" tabindex="-1">webpack 打包基础库 <a class="header-anchor" href="#webpack-打包基础库" aria-label="Permalink to &quot;webpack 打包基础库&quot;">​</a></h2><p>webpack 打包基础库,满足以下条件</p><ul><li>需要打包压缩版和非压缩版</li><li>支持 <code>AMD/CJS/ESM</code> 模块引入</li></ul><p>webpack.config.js</p><h3 id="服务端渲染-1" tabindex="-1">服务端渲染 <a class="header-anchor" href="#服务端渲染-1" aria-label="Permalink to &quot;服务端渲染&quot;">​</a></h3><p>渲染：HTML+CSS+JS+Data-&gt;渲染后的 <code>HTML</code> 服务端：</p><ul><li>所有模板等资源都储存在服务端</li><li>内网机器拉取数据快</li><li>一个HTML返回数据</li></ul><p>| |客户端渲染｜ 服务端渲染｜ ｜--｜--｜--｜ ｜请求｜多个请求｜1个请求｜ ｜加载过程｜HTML&amp;数据串行加载｜1个请求返回HTML&amp;数据｜ ｜渲染｜前端渲染｜服务端渲染｜</p><p>服务端渲染的核心是减少请求，减少白屏时间，对SEO更加友好</p><h4 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-label="Permalink to &quot;实现思路&quot;">​</a></h4><ul><li><p>服务端：使用库的 <code>renderToString</code> 方法将组件渲染成字符串，服务端返回对应的模版。</p></li><li><p>客户端：打包出针对服务端的组件</p></li></ul><h3 id="构建包配置" tabindex="-1">构建包配置 <a class="header-anchor" href="#构建包配置" aria-label="Permalink to &quot;构建包配置&quot;">​</a></h3><p>通用性</p><ul><li>业务开发者无需关注构建配置</li><li>统一团队构建脚本</li></ul><p>可维护性</p><ul><li>构建配置合理拆分</li><li>README 文档</li></ul><p>质量</p><ul><li>冒烟测试，单元测试，测试覆盖率</li><li>持续集成</li></ul><h2 id="webpack优化" tabindex="-1">webpack优化 <a class="header-anchor" href="#webpack优化" aria-label="Permalink to &quot;webpack优化&quot;">​</a></h2><p>webpack 的优化分两块</p><ul><li>速度优化</li><li>体积优化</li></ul><h3 id="性能分析" tabindex="-1">性能分析 <a class="header-anchor" href="#性能分析" aria-label="Permalink to &quot;性能分析&quot;">​</a></h3><ul><li>速度分析</li></ul><p>分析整个打包总耗时,每个插件和 loader 的耗时情况</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;">  speedMeasureWebpackPlugin </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">speed-measure-webpack-plugin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> smp </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> speedMeasureWebpackPlugin</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> webpackConfig </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> smp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warp</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  plugins</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#BABED8;">    xxx</span></span>
<span class="line"><span style="color:#BABED8;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>webpack-bundle-analyzer</li></ul><p>依赖的第三方模块文件大小,业务里面的组件代码大小</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> wba </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">webpack-bundle-analyzer</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  plugins</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">    new</span><span style="color:#82AAFF;"> wba</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#BABED8;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="速度优化" tabindex="-1">速度优化 <a class="header-anchor" href="#速度优化" aria-label="Permalink to &quot;速度优化&quot;">​</a></h3><ul><li>HappyPack 解析资源</li></ul><p>每次 webpack 解析一个模块，HappyPack 会将它及它的依赖分配给 worker 线程中</p><ul><li>使用 thread-loader 解析资源</li></ul><p>每次 webpack 解析一个模块，thread-loader 会将它及它的依赖分配给 worker 线程中</p><ul><li>并行压缩</li></ul><p>方法一:使用 parallel-uglify-plugin 插件 方法二: uglifyjs-webpack-plugin 开启 parallel 参数 方法三: terser-webpack-plugin 开启 parallel 参数</p><h3 id="分包-设置-externals" tabindex="-1">分包:设置 Externals <a class="header-anchor" href="#分包-设置-externals" aria-label="Permalink to &quot;分包:设置 Externals&quot;">​</a></h3><ul><li>externals</li></ul><p>将 vue 等基础包通过 cdn 引入，不打入 bundle 中。 使用 html-webpack-externals-plugin</p><h3 id="预编译资源模块" tabindex="-1">预编译资源模块 <a class="header-anchor" href="#预编译资源模块" aria-label="Permalink to &quot;预编译资源模块&quot;">​</a></h3><p>将 vue, vuex、vue-router 基础包和业务基础包打包成一个文件</p><p>使用 DLLPlugin 进行分包，DllReferencePlugin 对 manifest.json 引用</p><p>使用 DllReferencePlugin 引用 manifest.json</p><h3 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-label="Permalink to &quot;缓存&quot;">​</a></h3><p>目的:提升二次构建速度</p><ul><li>babel-loader 开启缓存</li><li>terser-webpack-plugin 开启缓存</li><li>使用 cache-loader 或者 hard-source-webpack-plugin</li></ul><h3 id="缩小构建目标" tabindex="-1">缩小构建目标 <a class="header-anchor" href="#缩小构建目标" aria-label="Permalink to &quot;缩小构建目标&quot;">​</a></h3><p>目的:尽可能的少构建模块,比如 babel-loader 不解析 node_modules</p><h3 id="减少文件搜索范围" tabindex="-1">减少文件搜索范围 <a class="header-anchor" href="#减少文件搜索范围" aria-label="Permalink to &quot;减少文件搜索范围&quot;">​</a></h3><ul><li><p>优化 resolve.modules 配置(减少模块搜索层级)</p></li><li><p>优化 resolve.mainFields 配置</p></li><li><p>优化 resolve.extensions 配置</p></li><li><p>合理使用 alias</p></li></ul><h3 id="体积优化" tabindex="-1">体积优化 <a class="header-anchor" href="#体积优化" aria-label="Permalink to &quot;体积优化&quot;">​</a></h3><ul><li>删除掉无用的 CSS</li></ul><p>PurifyCSS: 遍历代码，识别已经用到的 CSS class uncss: HTML 需要通过 jsdom 加载，所有的样式通过PostCSS解析，通过document.querySelector 来识别在 html 文件里面不存在的选择器</p><p>使用 purgecss-webpack-plugin 和 mini-css-extract-plugin 配合使用。</p><ul><li>动态 Polyfill</li></ul><p>Polyfill Service 原理: 识别 User Agent，下发不同的 Polyfill</p><h3 id="loader-和-plugin" tabindex="-1">loader 和 plugin <a class="header-anchor" href="#loader-和-plugin" aria-label="Permalink to &quot;loader 和 plugin&quot;">​</a></h3><ul><li><p>loader loader 是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中</p><ul><li>处理一个文件可以使用多个 loader，loader 的执行顺序是和本身的顺序是相反的，即最后一个 loader 最先执行，第一个 loader 最后执行。</li><li>第一个执行的 loader 接收源文件内容作为参数，其他loader接收前一个执行的 loader 的返回值作为参数。最后执行的 loader 会返回此模块的 JavaScript 源码</li></ul></li></ul><p>loader 接收一个参数，并且 return 一个内容就 ok 了。</p><ul><li>plugin</li></ul><p>在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p>`,105),o=[p];function r(t,c,i,D,F,y){return l(),a("div",null,o)}const h=s(e,[["render",r]]);export{d as __pageData,h as default};
