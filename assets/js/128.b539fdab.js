(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{477:function(t,a,e){"use strict";e.r(a);var r=e(25),_=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"http-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-code"}},[t._v("#")]),t._v(" http code")]),t._v(" "),e("h2",{attrs:{id:"_100x"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_100x"}},[t._v("#")]),t._v(" 100x")]),t._v(" "),e("p",[t._v("这些状态代码表示临时的响应")]),t._v(" "),e("h3",{attrs:{id:"_100-continue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_100-continue"}},[t._v("#")]),t._v(" 100 Continue")]),t._v(" "),e("p",[t._v("表示目前为止一切正常, 客户端应该继续请求, 如果已完成请求则忽略.")]),t._v(" "),e("p",[t._v("为了让服务器检查请求的首部, 客户端必须在发送请求实体前, 在初始化请求中发送 Expect: 100-continue 首部并接收 100 Continue 响应状态码.")]),t._v(" "),e("h4",{attrs:{id:"expect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expect"}},[t._v("#")]),t._v(" expect")]),t._v(" "),e("p",[t._v("包含一个期望条件，表示服务器只有在满足此期望条件的情况下才能妥善地处理请求。")]),t._v(" "),e("p",[t._v("规范中只规定了一个期望条件，即 Expect: 100-continue, 对此服务器可以做出如下回应：")]),t._v(" "),e("ul",[e("li",[t._v("100 如果消息头中的期望条件可以得到满足，使得请求可以顺利进行的话，")]),t._v(" "),e("li",[t._v("417 (Expectation Failed) 如果服务器不能满足期望条件的话；也可以是其他任意表示客户端错误的状态码（4xx）。")])]),t._v(" "),e("h3",{attrs:{id:"_101-switching-protocols"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_101-switching-protocols"}},[t._v("#")]),t._v(" 101 Switching Protocols")]),t._v(" "),e("p",[t._v("表示服务器应客户端升级协议的请求（Upgrade请求头）正在进行协议切换。 例:")]),t._v(" "),e("div",{staticClass:"language-http line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token response-status"}},[t._v("HTTP/1.1 "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("101 Switching Protocols")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Upgrade:")]),t._v(" websocket \n"),e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Connection:")]),t._v(" Upgrade\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("h2",{attrs:{id:"_200x"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_200x"}},[t._v("#")]),t._v(" 200x")]),t._v(" "),e("p",[t._v("表示请求成功")]),t._v(" "),e("h3",{attrs:{id:"_200-ok"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_200-ok"}},[t._v("#")]),t._v(" 200 OK")]),t._v(" "),e("p",[t._v("表明请求已经成功. 默认情况下状态码为200的响应可以被缓存。")]),t._v(" "),e("h3",{attrs:{id:"_201-created"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_201-created"}},[t._v("#")]),t._v(" 201 Created")]),t._v(" "),e("p",[t._v("表示请求已经被成功处理，并且创建了新的资源。新的资源在应答返回之前已经被创建。")]),t._v(" "),e("h3",{attrs:{id:"_202-accepted"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_202-accepted"}},[t._v("#")]),t._v(" 202 Accepted")]),t._v(" "),e("p",[t._v("表示服务器端已经收到请求消息，但是尚未进行处理。但是对于请求的处理确实无保证的，即稍后无法通过 HTTP 协议给客户端发送一个异步请求来告知其请求的处理结果。")]),t._v(" "),e("h3",{attrs:{id:"_204-no-content"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_204-no-content"}},[t._v("#")]),t._v(" 204 No Content")]),t._v(" "),e("p",[t._v("表示目前请求成功，但客户端不需要更新其现有页面。")]),t._v(" "),e("p",[t._v("使用惯例是，在 PUT 请求中进行资源更新，但是不需要改变当前展示给用户的页面，那么返回 204 No Content。如果新创建了资源，那么返回 201 Created 。如果页面需要更新以反映更新后的资源，那么需要返回 200 。")]),t._v(" "),e("h2",{attrs:{id:"_300x"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_300x"}},[t._v("#")]),t._v(" 300x")]),t._v(" "),e("p",[t._v("表示要完成请求，需要进一步操作.通常，这些状态代码用来重定向。")]),t._v(" "),e("h3",{attrs:{id:"_301-moved-permanently"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_301-moved-permanently"}},[t._v("#")]),t._v(" 301 Moved Permanently")]),t._v(" "),e("p",[t._v("永久重定向。说明请求的资源已经被移动到了由 Location 头部指定的 url 上，是固定的不会再改变。搜索引擎会根据该响应修正。")]),t._v(" "),e("h3",{attrs:{id:"_302-found"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_302-found"}},[t._v("#")]),t._v(" 302 Found")]),t._v(" "),e("p",[t._v("临时重定向。重定向状态码表明请求的资源被暂时的移动到了由 Location 头部指定的 URL 上。浏览器会重定向到这个URL，但是搜索引擎不会对该资源的链接进行更新。")]),t._v(" "),e("h3",{attrs:{id:"_303-see-other"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_303-see-other"}},[t._v("#")]),t._v(" 303 See Other")]),t._v(" "),e("p",[t._v("通常作为 PUT 或 POST 操作的返回结果，它表示重定向链接指向的不是新上传的资源，而是另外一个页面。比如消息确认页面或上传进度页面。而请求重定向页面的方法要总是使用 GET。")]),t._v(" "),e("h3",{attrs:{id:"_304-not-modified"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_304-not-modified"}},[t._v("#")]),t._v(" 304 Not Modified")]),t._v(" "),e("p",[t._v("说明无需再次传输请求的内容，也就是说可以使用缓存的内容。在请求中附带了头部信息： If-None-Match 或If-Modified-Since。")]),t._v(" "),e("p",[t._v("如果返回 200，响应会带有头部 Cache-Control, Content-Location, Date, ETag, Expires，和 Vary.")]),t._v(" "),e("h3",{attrs:{id:"last-modified-和-if-modified-since"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-和-if-modified-since"}},[t._v("#")]),t._v(" Last-Modified 和 If-Modified-Since")]),t._v(" "),e("ul",[e("li",[t._v("客户端请求一个文件（A）。 服务器返回文件A，并返回 Last-Modified。")]),t._v(" "),e("li",[t._v("客户端收到响应后，缓存文件A 和 Last-Modified。")]),t._v(" "),e("li",[t._v("客户端再次请求文件A 时，发现该文件有 Last-Modified ，那么 header 离包含 If-Modified-Since，这个时间就是缓存文件的 Last-Modified。")]),t._v(" "),e("li",[t._v("服务端收到请求，只需要判断这个时间和当前请求的文件的修改时间就可以确定是返回 304 还是 200")])]),t._v(" "),e("p",[t._v("If-Modified-Since 的主要缺点是只能精确到秒的级别，一旦在一秒内出现多次修改，是无法判断出已修改的状态。所以一般用在对时间不太敏感的静态资源。")]),t._v(" "),e("h3",{attrs:{id:"etag-和-if-none-match"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etag-和-if-none-match"}},[t._v("#")]),t._v(" ETag 和 If-None-Match")]),t._v(" "),e("ul",[e("li",[t._v("客户端请求一个文件（A）。 服务器返回文件A，并在给A加上一个 ETag。")]),t._v(" "),e("li",[t._v("客户端收到响应后，并将文件连同 ETag 一起缓存。")]),t._v(" "),e("li",[t._v("户再次请求文件A，会发送 If-None-Match，内容是缓存该文件A的 Etag 值")]),t._v(" "),e("li",[t._v("服务器检查该 ETag，和计算出来的 Etag 匹配，来判断文件是否未被修改。如果未修改就直接返回 304 和一个空的响应体。否则返回 200 和 文件。")])]),t._v(" "),e("p",[t._v("当与 If-Modified-Since 一同使用的时候，If-None-Match 优先级更高（假如服务器支持的话）")]),t._v(" "),e("h3",{attrs:{id:"_307-temporary-redirect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_307-temporary-redirect"}},[t._v("#")]),t._v(" 307 Temporary Redirect")]),t._v(" "),e("p",[t._v("临时重定向。类似 302，区别在于能够确保请求方法和消息主体不会发生改变。")]),t._v(" "),e("h3",{attrs:{id:"_308-permanent-redirect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_308-permanent-redirect"}},[t._v("#")]),t._v(" 308 Permanent Redirect")]),t._v(" "),e("p",[t._v("永久重定向。类似 301，区别在于能够确保请求方法和消息主体不会发生改变。")]),t._v(" "),e("h2",{attrs:{id:"_400x"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_400x"}},[t._v("#")]),t._v(" 400x")]),t._v(" "),e("p",[t._v("这些状态代码表示请求可能出错，妨碍了服务器的处理。")]),t._v(" "),e("h3",{attrs:{id:"_400-bad-request"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_400-bad-request"}},[t._v("#")]),t._v(" 400 Bad Request")]),t._v(" "),e("p",[t._v("表示由于语法无效，服务器无法理解该请求。客户端不应该在未经修改的情况下重复此请求。")]),t._v(" "),e("h3",{attrs:{id:"_401-unauthorized"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_401-unauthorized"}},[t._v("#")]),t._v(" 401 Unauthorized")]),t._v(" "),e("p",[t._v("说明由于缺乏目标资源要求的身份验证凭证，发送的请求未得到满足。")]),t._v(" "),e("p",[t._v("这个状态码会与 WWW-Authenticate 首部一起发送，其中包含有如何进行验证的信息。")]),t._v(" "),e("h3",{attrs:{id:"_403-forbidden"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_403-forbidden"}},[t._v("#")]),t._v(" 403 Forbidden")]),t._v(" "),e("p",[t._v("指的是服务器端有能力处理该请求，但是拒绝授权访问。进入该状态后，不能再继续进行验证。该访问是永久禁止的，并且与应用逻辑密切相关（例如不正确的密码）")]),t._v(" "),e("h3",{attrs:{id:"_404-not-found"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_404-not-found"}},[t._v("#")]),t._v(" 404 Not Found")]),t._v(" "),e("p",[t._v("说明服务器端无法找到所请求的资源。返回该响应的链接通常称为坏链（broken link）或死链（dead link），它们会导向链接出错处理")]),t._v(" "),e("h3",{attrs:{id:"_405-method-not-allowed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_405-method-not-allowed"}},[t._v("#")]),t._v(" 405 Method Not Allowed")]),t._v(" "),e("p",[t._v("表明服务器禁止了使用当前 HTTP 方法的请求。需要注意的是，GET 与 HEAD 两个方法不得被禁止，当然也不得返回状态码 405。")]),t._v(" "),e("h3",{attrs:{id:"_406-not-acceptable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_406-not-acceptable"}},[t._v("#")]),t._v(" 406 Not Acceptable")]),t._v(" "),e("p",[t._v("表示服务器端不支持 Accept、Accept-Charset、Accept-Encoding、 Accept-Language header 所要求的。")]),t._v(" "),e("h3",{attrs:{id:"_409-conflict"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_409-conflict"}},[t._v("#")]),t._v(" 409 Conflict")]),t._v(" "),e("p",[t._v("表示请求与服务器端目标资源的当前状态相冲突。")]),t._v(" "),e("p",[t._v("冲突最有可能发生在对 PUT 请求的响应中。例如，当上传文件的版本比服务器上已存在的要旧，从而导致版本冲突的时候，那么就有可能收到状态码为 409 的响应。")]),t._v(" "),e("h3",{attrs:{id:"_410-gone"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_410-gone"}},[t._v("#")]),t._v(" 410 Gone")]),t._v(" "),e("p",[t._v("说明请求的内容在服务器上不存在了，同时是永久性的丢失。如果不清楚是否为永久或临时的丢失，应该使用404。")]),t._v(" "),e("h3",{attrs:{id:"_413-payload-too-large"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_413-payload-too-large"}},[t._v("#")]),t._v(" 413 Payload Too Large")]),t._v(" "),e("p",[t._v("表示请求主体的大小超过了服务器愿意或有能力处理的限度，服务器可能会（may）关闭连接以防止客户端继续发送该请求。")]),t._v(" "),e("p",[t._v("如果“超出限度”是暂时性的，服务器应该返回 Retry-After 首部字段，说明这是暂时性的，以及客户端可以在什么时间后重试。")]),t._v(" "),e("h3",{attrs:{id:"_412-precondition-failed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_412-precondition-failed"}},[t._v("#")]),t._v(" 412 Precondition Failed")]),t._v(" "),e("p",[t._v("表示客户端错误，意味着对于目标资源的访问请求被拒绝。这通常发生在采用除 GET 和 HEAD 之外的方法进行条件请求时，由首部字段 If-Unmodified-Since 或 If-None-Match 规定的先决条件不成立的情况下。")]),t._v(" "),e("h3",{attrs:{id:"_414-uri-too-long"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_414-uri-too-long"}},[t._v("#")]),t._v(" 414 URI Too Long")]),t._v(" "),e("p",[t._v("表示客户端所请求的 URI 超过了服务器允许的范围。")]),t._v(" "),e("h3",{attrs:{id:"_431-request-header-fields-too-large"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_431-request-header-fields-too-large"}},[t._v("#")]),t._v(" 431 Request Header Fields Too Large")]),t._v(" "),e("p",[t._v("表示由于请求中的首部字段的值过大，服务器拒绝接受客户端的请求。客户端可以在缩减首部字段的体积后再次发送请求。")]),t._v(" "),e("p",[t._v("该响应码可以用于首部总体体积过大的情况，也可以用于单个首部体积过大的情况。")]),t._v(" "),e("h2",{attrs:{id:"_500x"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_500x"}},[t._v("#")]),t._v(" 500x")]),t._v(" "),e("p",[t._v("这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。")]),t._v(" "),e("h3",{attrs:{id:"_500-internal-server-error"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_500-internal-server-error"}},[t._v("#")]),t._v(" 500 Internal Server Error")]),t._v(" "),e("p",[t._v("表示所请求的服务器遇到意外的情况并阻止其执行请求。")]),t._v(" "),e("h3",{attrs:{id:"_501-not-implemented"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_501-not-implemented"}},[t._v("#")]),t._v(" 501 Not Implemented")]),t._v(" "),e("p",[t._v("表示request header 里的 method 或 Content-* 时不被服务器支持，无法被处理。另，服务器必须支持的方法（即不会返回这个状态码的方法）只有 GET 和 HEAD。501 响应默认是可缓存的。")]),t._v(" "),e("h3",{attrs:{id:"_502-bad-gateway"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_502-bad-gateway"}},[t._v("#")]),t._v(" 502 Bad Gateway")]),t._v(" "),e("p",[t._v("表示作为网关或代理角色的服务器，从上游服务器（如node.js web server）中接收到的响应是无效的。")]),t._v(" "),e("h3",{attrs:{id:"_503-service-unavailable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_503-service-unavailable"}},[t._v("#")]),t._v(" 503 Service Unavailable")]),t._v(" "),e("p",[t._v("表示服务器尚未处于可以接受请求的状态。通常造成这种情况的原因是由于服务器停机维护或者已超载。该种响应应该用于临时状况下，与之同时，在可行的情况下，应该在 Retry-After 首部字段中包含服务恢复的预期时间。")]),t._v(" "),e("h3",{attrs:{id:"_504-gateway-timeout"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_504-gateway-timeout"}},[t._v("#")]),t._v(" 504 Gateway Timeout")]),t._v(" "),e("p",[t._v("表示网关或者代理的服务器无法在规定的时间内获得想要的响应。")])])}),[],!1,null,null,null);a.default=_.exports}}]);