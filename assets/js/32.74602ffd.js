(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{382:function(a,s,e){"use strict";e.r(s);var t=e(25),n=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"jsbridge"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsbridge"}},[a._v("#")]),a._v(" JSBridge")]),a._v(" "),e("p",[a._v("JSBridge应用在混合开发中，他所实现的是H5和Native的双向通信。就是JavaScript(H5)与Native通信的桥梁。一般分为 JS 调用 Native 和 Native 主动调用 JS 两种形式。")]),a._v(" "),e("h2",{attrs:{id:"jsbridge与native间通信原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsbridge与native间通信原理"}},[a._v("#")]),a._v(" JSBridge与Native间通信原理")]),a._v(" "),e("p",[a._v("在H5中JavaScript调用Native的方式主要用两种：")]),a._v(" "),e("ul",[e("li",[a._v("注入API，注入Native对象或方法到JavaScript的window对象中（可以类比于RPC调用）。")]),a._v(" "),e("li",[a._v("拦截URL Schema，客户端拦截WebView的请求并做相应的操作（可以类比于JSONP）。")])]),a._v(" "),e("h2",{attrs:{id:"url-scheme"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#url-scheme"}},[a._v("#")]),a._v(" URL Scheme")]),a._v(" "),e("p",[a._v("URL Scheme 是一种特殊的 URL，一般用于在 Web 端唤醒 App，甚至跳转到 App 的某个页面，比如在某个手机网站上付款的时候，可以直接拉起支付宝支付页面。你可以在浏览器里面直接输入 weixin://，系统就会提示你是否要打开微信。输入 mqq:// 就会帮你唤起手机 QQ。可以理解为代理模式（也不完全是代理模式）")]),a._v(" "),e("h2",{attrs:{id:"js-调用-native"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js-调用-native"}},[a._v("#")]),a._v(" JS 调用 Native")]),a._v(" "),e("p",[a._v("JS 调用 Native 通信大致有三种方法：")]),a._v(" "),e("ul",[e("li",[a._v("拦截 Scheme")]),a._v(" "),e("li",[a._v("注入 JS 上下文")])]),a._v(" "),e("h3",{attrs:{id:"拦截-scheme"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#拦截-scheme"}},[a._v("#")]),a._v(" 拦截 Scheme")]),a._v(" "),e("p",[a._v("仔细思考一下，如果是 JS 和 Java 之间传递数据，我们该怎么做呢？\n对于前端开发来说，调 Ajax 请求接口是最常见的需求了。不管对方是 Java 还是 Python，我们都可以通过 http/https 接口来获取数据。实际上这个流程和 JSONP 更加类似。")]),a._v(" "),e("h4",{attrs:{id:"js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js"}},[a._v("#")]),a._v(" JS")]),a._v(" "),e("p",[a._v("iframe 跳转：")]),a._v(" "),e("ol",[e("li",[a._v("使用 a 标签跳转 "),e("code",[a._v('<a href="taobao://">点击我打开淘宝</a>')])]),a._v(" "),e("li",[a._v("重定向 "),e("code",[a._v('location.href = "taobao://"')])]),a._v(" "),e("li",[a._v("iframe 跳转")])]),a._v(" "),e("h3",{attrs:{id:"注入上下文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注入上下文"}},[a._v("#")]),a._v(" 注入上下文")]),a._v(" "),e("p",[a._v("iOS 中内置了 JavaScriptCore 这个框架，可以实现执行 JS 以及注入 Native 对象等功能。\n这种方式不依赖拦截，主要是通过 WebView 向 JS 的上下文注入对象和方法，可以让 JS 直接调用原生。")]),a._v(" "),e("h4",{attrs:{id:"ios-uiwebview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ios-uiwebview"}},[a._v("#")]),a._v(" iOS UIWebView")]),a._v(" "),e("div",{staticClass:"language-oc line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('// 获取 JS 上下文\nJSContext *context = [webview valueForKeyPath:@"documentView.webView.mainFrame.javaScriptContext"];\n// 注入 Block\ncontext[@"callHandler"] = ^(JSValue * data) {\n    // 处理调用方法和参数\n    // 调用 Native 功能\n    // 回调 JS Callback\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br")])]),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[a._v("window"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("callHandler")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    type"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"scan"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    data"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[a._v("callback")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("h4",{attrs:{id:"ios-wkwebview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ios-wkwebview"}},[a._v("#")]),a._v(" iOS WKWebView")]),a._v(" "),e("p",[a._v("WKWebView 里面通过 addScriptMessageHandler 来注入对象到 JS 上下文，可以在 WebView 销毁的时候调用 removeScriptMessageHandler 来销毁这个对象。\n前端调用注入的原生方法之后，可以通过 didReceiveScriptMessage 来接收前端传过来的参数。")]),a._v(" "),e("div",{staticClass:"language-oc line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('WKWebView *wkWebView = [[WKWebView alloc] init];\nWKWebViewConfiguration *configuration = wkWebView.configuration;\nWKUserContentController *userCC = configuration.userContentController;\n\n// 注入对象\n[userCC addScriptMessageHandler:self name:@"nativeObj"];\n// 清除对象\n[userCC removeScriptMessageHandler:self name:@"nativeObj"];\n\n// 客户端处理前端调用\n- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message\n{\n    // 获取前端传来的参数\n    NSDictionary *msgBody = message.body;\n    // 如果是 nativeObj 就进行相应处理\n    if (![message.name isEqualToString:@"nativeObj"]) {\n        // \n        return;\n    }\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br")])]),e("p",[a._v("使用 addScriptMessageHandler 注入的对象实际上只有一个 postMessage 方法，无法调用更多自定义方法。前端的调用方式如下：")]),a._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[a._v("window"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("webkit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("messageHandlers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("nativeObj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("postMessage")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("h2",{attrs:{id:"native-调用-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#native-调用-js"}},[a._v("#")]),a._v(" Native 调用 JS")]),a._v(" "),e("p",[e("code",[a._v("Native")]),a._v(" 调用 "),e("code",[a._v("JS")]),a._v(" 一般就是直接 "),e("code",[a._v("JS")]),a._v(" 代码字符串，有些类似我们调用 JS 中的 "),e("code",[a._v("eval")]),a._v(" 去执行一串代码。一般有 "),e("code",[a._v("loadUrl")]),a._v("、"),e("code",[a._v("evaluateJavascript")]),a._v(" 等几种方法，客户端都只能拿到挂载到 window 对象上面的属性和方法。")])])}),[],!1,null,null,null);s.default=n.exports}}]);