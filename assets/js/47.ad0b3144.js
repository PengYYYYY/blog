(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{398:function(s,t,a){"use strict";a.r(t);var n=a(25),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"上传组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上传组件"}},[s._v("#")]),s._v(" 上传组件")]),s._v(" "),a("p",[s._v("总结一下文件上传组件的要点")]),s._v(" "),a("ul",[a("li",[s._v("实现上传进度")]),s._v(" "),a("li",[s._v("大文件上传(分片上传)")]),s._v(" "),a("li",[s._v("失败重传")]),s._v(" "),a("li",[s._v("断点续传")])]),s._v(" "),a("h2",{attrs:{id:"上传进度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上传进度"}},[s._v("#")]),s._v(" 上传进度")]),s._v(" "),a("p",[s._v("onprogress这个事件，它是XMLHttpRequest对象的一个回调函数，在上传或者下载过程中会周期性执行。接受一个参数event，event有两个参数：")]),s._v(" "),a("ul",[a("li",[s._v("loaded：已经传输的数量")]),s._v(" "),a("li",[s._v("total：要传输的总数量")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" xhr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("XMLHttpRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  method "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'GET'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  url "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'https://developer.mozilla.org/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("onprogress")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("event")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//do something ")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" progressRatio "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("loaded "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("total\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("在axios中的配置选项中也提供了对应的接口：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// `onUploadProgress` 允许为上传处理进度事件")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("onUploadProgress")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("progressEvent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对原生进度事件的处理")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// `onDownloadProgress` 允许为下载处理进度事件")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("onDownloadProgress")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("progressEvent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对原生进度事件的处理")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h2",{attrs:{id:"大文件上传"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大文件上传"}},[s._v("#")]),s._v(" 大文件上传")]),s._v(" "),a("h3",{attrs:{id:"前端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端"}},[s._v("#")]),s._v(" 前端")]),s._v(" "),a("p",[s._v("前端大文件上传网上的大部分文章已经给出了解决方案，核心是利用 "),a("code",[s._v("Blob.prototype.slice")]),s._v(" 方法，和数组的 slice 方法相似，调用的 slice 方法可以返回原文件的某个切片。")]),s._v(" "),a("p",[s._v("这样我们就可以根据预先设置好的切片最大数量将文件切分为一个个切片，然后借助 http 的可并发性，同时上传多个切片，这样从原本传一个大文件，变成了同时传多个小的文件切片，可以大大减少上传时间。由于是并发，传输到服务端的顺序可能会发生变化，所以我们还需要给每个切片记录顺序。")]),s._v(" "),a("h3",{attrs:{id:"服务端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务端"}},[s._v("#")]),s._v(" 服务端")]),s._v(" "),a("p",[s._v("服务端需要负责接受这些切片，并在接收到所有切片后合并切片。")]),s._v(" "),a("ul",[a("li",[s._v("合并切片")])]),s._v(" "),a("p",[s._v("前端在每个切片中都携带切片最大数量的信息，当服务端接受到这个数量的切片时自动合并，也可以额外发一个请求主动通知服务端进行切片的合并")]),s._v(" "),a("ul",[a("li",[s._v("合并切片的方式")])]),s._v(" "),a("p",[s._v("使用 nodejs 的 读写流（readStream/writeStream），将所有切片的流传输到最终文件的流里。")]),s._v(" "),a("h3",{attrs:{id:"上传切片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上传切片"}},[s._v("#")]),s._v(" 上传切片")]),s._v(" "),a("ul",[a("li",[s._v("对文件进行切片")])]),s._v(" "),a("p",[s._v("上传文件时，调用切片方法，将文件切片，切片的数量由文件大小控制。在生成文件切片时，需要给每个切片一个标识作为 hash，这样后端可以知道当前切片是第几个，用于之后的合并切片。")]),s._v(" "),a("ul",[a("li",[s._v("将切片传输给服务端后发送合并请求")])]),s._v(" "),a("p",[s._v("通过promise.all进行并发上传。待上传切片完成后，发送合并请求，通知后端进行合并。")]),s._v(" "),a("h3",{attrs:{id:"显示上传进度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显示上传进度"}},[s._v("#")]),s._v(" 显示上传进度")]),s._v(" "),a("p",[s._v("上传进度分两种，一个是每个切片的上传进度，另一个是整个文件的上传进度，而整个文件的上传进度是基于每个切片上传进度计算而来。")]),s._v(" "),a("p",[s._v("切片上传进度条可以直接使用原生的"),a("code",[s._v("onprogress")]),s._v("即可。")]),s._v(" "),a("ul",[a("li",[s._v("合并上传进度")])]),s._v(" "),a("p",[s._v("每个切片都需要触发独立的监听事件，所以还需要一个工厂函数，根据传入的切片返回不同的监听函数。通过对每个上传对象加上"),a("code",[s._v("percentage")]),s._v("参数，实时更新上传百分比。")]),s._v(" "),a("ul",[a("li",[s._v("文件进度条")])]),s._v(" "),a("p",[s._v("将每个切片已上传的部分累加，除以整个文件的大小，就能得出当前文件的上传进度，所以这里使用 Vue 计算属性")]),s._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("p",[s._v("以上就是大文件上传的一个基本的思路了。")]),s._v(" "),a("h2",{attrs:{id:"断点续传"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#断点续传"}},[s._v("#")]),s._v(" 断点续传")]),s._v(" "),a("p",[s._v("断点续传的原理在于前端/服务端需要记住已上传的切片，这样下次上传就可以跳过之前已上传的部分，有两种方案实现记忆的功能")]),s._v(" "),a("ul",[a("li",[s._v("前端记录已上传的切片 hash")]),s._v(" "),a("li",[s._v("服务端保存已上传的切片 hash，前端每次上传前向服务端获取已上传的切片")])]),s._v(" "),a("p",[s._v("前端不太可控，存储信息可能会丢失，所以使用服务端方案来做。")]),s._v(" "),a("h3",{attrs:{id:"生成hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成hash"}},[s._v("#")]),s._v(" 生成hash")]),s._v(" "),a("p",[s._v("可以通过文件指纹的方式来生成文件的hash，需要用到 "),a("code",[s._v("spark-md5")]),s._v(" ,它可以根据文件内容计算出文件的 "),a("code",[s._v("hash")]),s._v(" 值, 另外考虑到如果上传一个超大文件，读取文件内容计算 hash 是非常耗费时间的，并且会引起 UI 的阻塞，导致页面假死状态，所以我们使用 "),a("code",[s._v("web-worker")]),s._v(" 在 worker 线程计算 hash，这样用户仍可以在主界面正常的交互。")]),s._v(" "),a("p",[s._v("实例化 "),a("code",[s._v("web-worker")]),s._v(" 时，参数是一个 js 文件路径且不能跨域，所以我们单独创建一个 "),a("code",[s._v("hash.js")]),s._v(" 文件放在 public 目录下，另外在 worker 中也是不允许访问 dom 的，但它提供了importScripts 函数用于导入外部脚本，通过它导入 "),a("code",[s._v("spark-md5")])]),s._v(" "),a("p",[s._v("在 "),a("code",[s._v("worker")]),s._v(" 线程中，接受文件切片 "),a("code",[s._v("fileChunkList")]),s._v("，利用 "),a("code",[s._v("FileReader")]),s._v(" 读取每个切片的 "),a("code",[s._v("ArrayBuffer")]),s._v(" 并不断传入 "),a("code",[s._v("spark-md5")]),s._v(" 中，每计算完一个切片通过 "),a("code",[s._v("postMessage")]),s._v(" 向主线程发送一个进度事件，全部完成后将最终的 hash 发送给主线程")]),s._v(" "),a("h2",{attrs:{id:"文件秒传"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件秒传"}},[s._v("#")]),s._v(" 文件秒传")]),s._v(" "),a("p",[s._v("文件秒传，即在服务端已经存在了上传的资源，所以当用户再次上传时会直接提示上传成功, 文件秒传需要依赖上一步生成的 hash，即在上传前，先计算出文件 hash，并把 hash 发送给服务端进行验证，由于 hash 的唯一性，所以一旦服务端能找到 hash 相同的文件，则直接返回上传成功的信息即可.")])])}),[],!1,null,null,null);t.default=e.exports}}]);