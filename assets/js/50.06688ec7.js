(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{427:function(v,_,l){"use strict";l.r(_);var t=l(25),a=Object(t.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h1",{attrs:{id:"设计模式入门"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#设计模式入门"}},[v._v("#")]),v._v(" 设计模式入门")]),v._v(" "),l("h2",{attrs:{id:"创建型模式"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[v._v("#")]),v._v(" 创建型模式")]),v._v(" "),l("ul",[l("li",[v._v("工厂模式")])]),v._v(" "),l("p",[v._v("其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。")]),v._v(" "),l("ul",[l("li",[v._v("原型模式")])]),v._v(" "),l("p",[v._v("能够复制已有对象， 而又无需使代码依赖它们所属的类，链式结构。")]),v._v(" "),l("ul",[l("li",[v._v("单例模式")])]),v._v(" "),l("p",[v._v("多个共享一个")]),v._v(" "),l("h2",{attrs:{id:"结构型模式"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[v._v("#")]),v._v(" 结构型模式")]),v._v(" "),l("ul",[l("li",[v._v("装饰器模式")])]),v._v(" "),l("p",[v._v("允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。")]),v._v(" "),l("ul",[l("li",[v._v("代理模式")])]),v._v(" "),l("p",[v._v("让你能够提供对象的替代品或其占位符。代理控制着对于原对象的访问， 并允许在将请求提交给对象前后进行一些处理。")]),v._v(" "),l("ul",[l("li",[v._v("适配器模式")])]),v._v(" "),l("p",[v._v("它能使接口不兼容的对象能够相互合作。")]),v._v(" "),l("ul",[l("li",[v._v("桥接模式")])]),v._v(" "),l("p",[v._v("可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构， 从而能在开发时分别使用。")]),v._v(" "),l("ul",[l("li",[v._v("组合模式")])]),v._v(" "),l("p",[v._v("你可以使用它将对象组合成树状结构， 并且能像使用独立对象一样使用它们。")]),v._v(" "),l("ul",[l("li",[v._v("外观模式")])]),v._v(" "),l("p",[v._v("能为程序库、 框架或其他复杂类提供一个简单的接口。")]),v._v(" "),l("ul",[l("li",[v._v("享元模式")])]),v._v(" "),l("p",[v._v("它摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象。")]),v._v(" "),l("h2",{attrs:{id:"行为模式"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#行为模式"}},[v._v("#")]),v._v(" 行为模式")]),v._v(" "),l("ul",[l("li",[v._v("责任链模式")])]),v._v(" "),l("p",[v._v("允许你将请求沿着处理者链进行发送。收到请求后， 每个处理者均可对请求进行处理， 或将其传递给链上的下个处理者。")]),v._v(" "),l("ul",[l("li",[v._v("命令模式")])]),v._v(" "),l("p",[v._v("它可将请求转换为一个包含与请求相关的所有信息的独立对象。该转换让你能根据不同的请求将方法参数化、 延迟请求执行或将其放入队列中， 且能实现可撤销操作。")]),v._v(" "),l("ul",[l("li",[v._v("迭代器模式")])]),v._v(" "),l("p",[v._v("让你能在不暴露集合底层表现形式 （列表、 栈和树等） 的情况下遍历集合中所有的元素。")]),v._v(" "),l("ul",[l("li",[v._v("中介者模式")])]),v._v(" "),l("p",[v._v("能让你减少对象之间混乱无序的依赖关系。该模式会限制对象之间的直接交互， 迫使它们通过一个中介者对象进行合作。")]),v._v(" "),l("ul",[l("li",[v._v("备忘录模式")])]),v._v(" "),l("p",[v._v("允许在不暴露对象实现细节的情况下保存和恢复对象之前的状态。")]),v._v(" "),l("ul",[l("li",[v._v("观察者模式")])]),v._v(" "),l("p",[v._v("允许你定义一种订阅机制， 可在对象事件发生时通知多个 “观察” 该对象的其他对象。")]),v._v(" "),l("ul",[l("li",[v._v("状态模式")])]),v._v(" "),l("p",[v._v("让你能在一个对象的内部状态变化时改变其行为， 使其看上去就像改变了自身所属的类一样。")]),v._v(" "),l("ul",[l("li",[v._v("策略模式")])]),v._v(" "),l("p",[v._v("它能让你定义一系列算法， 并将每种算法分别放入独立的类中， 以使算法的对象能够相互替换。")]),v._v(" "),l("ul",[l("li",[v._v("模板方法模式")])]),v._v(" "),l("p",[v._v("它在超类中定义了一个算法的框架， 允许子类在不修改结构的情况下重写算法的特定步骤。")]),v._v(" "),l("ul",[l("li",[v._v("访问者模式")])]),v._v(" "),l("p",[v._v("它能将算法与其所作用的对象隔离开来")])])}),[],!1,null,null,null);_.default=a.exports}}]);