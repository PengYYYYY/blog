(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{469:function(a,r,e){"use strict";e.r(r);var t=e(31),s=Object(t.a)({},(function(){var a=this,r=a.$createElement,e=a._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"包管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#包管理"}},[a._v("#")]),a._v(" 包管理")]),a._v(" "),e("h2",{attrs:{id:"脑图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#脑图"}},[a._v("#")]),a._v(" 脑图")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/PENG_YUE/myImg/raw/master/uPic/TrpMno.png",alt:"img"}})]),a._v(" "),e("h2",{attrs:{id:"yarn"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#yarn"}},[a._v("#")]),a._v(" yarn")]),a._v(" "),e("h3",{attrs:{id:"和npm区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#和npm区别"}},[a._v("#")]),a._v(" 和npm区别")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("yarn")]),a._v(" 在下载和安装依赖包采用的是多线程的方式，而 "),e("code",[a._v("npm")]),a._v(" 是单线程的方式执行，速度上就拉开了差距。")]),a._v(" "),e("li",[e("code",[a._v("yarn")]),a._v("  会在用户本地缓存已下载过的依赖包，优先会从缓存中读取依赖包，只有本地缓存不存在的情况才会采取远端请求的方式；反观 "),e("code",[a._v("npm")]),a._v(" 则是全量请求，速度上再次拉开差距。")]),a._v(" "),e("li",[e("code",[a._v("yarn")]),a._v(" 把所有的依赖躺平至同级，有效的减少了相同依赖包重复下载的情况，加快了下载速度而且也减少了 "),e("code",[a._v("node_modules")]),a._v(" 的体积；"),e("code",[a._v("npm")]),a._v("则是严格的根据依赖树下载并放置到对应位置，导致相同的包多次下载"),e("code",[a._v("node_modules")]),a._v("体积大的问题")])]),a._v(" "),e("h3",{attrs:{id:"yarn工作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#yarn工作流程"}},[a._v("#")]),a._v(" yarn工作流程")]),a._v(" "),e("p",[e("code",[a._v("yarn")]),a._v(" 在安装依赖包时会分为主要 5 个步骤：")]),a._v(" "),e("ul",[e("li",[a._v("checking：检查配置项（.yarnrc、命令行参数、package.json 信息等）、兼容性（cpu、nodejs 版本、操作系统等）是否符合约定")]),a._v(" "),e("li",[a._v("resolveStep：解析依赖包信息，并且会解析出整个依赖树上所有包的具体版本信息")]),a._v(" "),e("li",[a._v("fetchStep：下载全部依赖包，如果依赖包已经在缓存中存在则跳过下载，反之则下载对应依赖包到缓存文件夹内，当这一步都完成后代表着所有依赖包都已经存在缓存中了")]),a._v(" "),e("li",[a._v("linkStep：将缓存的依赖包扁平化的复制副本到项目的依赖目录下")]),a._v(" "),e("li",[a._v("buildStep：对于一些二进制包，需要进行编译，在这一步进行")])]),a._v(" "),e("h2",{attrs:{id:"lerna"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lerna"}},[a._v("#")]),a._v(" lerna")]),a._v(" "),e("p",[a._v("Lerna 是一个管理多个 npm 模块的工具，是 Babel 自己用来维护自己的 Monorepo 并开源出的一个项目。优化维护多包的工作流，解决多个包互相依赖，且发布需要手动维护多个包的问题。")]),a._v(" "),e("h3",{attrs:{id:"monorepo管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#monorepo管理"}},[a._v("#")]),a._v(" monorepo管理")]),a._v(" "),e("p",[a._v("Monorepo 是管理项目代码的一个方式，指在一个项目仓库 (repo) 中管理多个模块/包 (package)，不同于常见的每个模块建一个 repo。常见")]),a._v(" "),e("p",[a._v("目录结构如下:")]),a._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[a._v("├── packages\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("   ├── pkg1\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("   "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("   ├── "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("json\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("   ├── pkg2\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("   "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("   ├── "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("json\n├── "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("json\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("p",[a._v("monorepo 最主要的好处是统一的工作流和Code Sharing。使用统一的流程管理，统一测试、统一发版。只要搭建一套脚手架，就能管理（构建、测试、发布）多个 package。")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/PENG_YUE/myImg/raw/master/uPic/tXnw6a.png",alt:"img"}})]),a._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/lerna/lerna",target:"_blank",rel:"noopener noreferrer"}},[a._v("lerna官网"),e("OutboundLink")],1)]),a._v(" "),e("p",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/71385053",target:"_blank",rel:"noopener noreferrer"}},[a._v("基于lerna和yarn workspace的monorepo工作流"),e("OutboundLink")],1)]),a._v(" "),e("h2",{attrs:{id:"版本规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#版本规范"}},[a._v("#")]),a._v(" 版本规范")]),a._v(" "),e("ul",[e("li",[a._v("beta:内部测试版本")]),a._v(" "),e("li",[a._v("alpha:开放测试")]),a._v(" "),e("li",[a._v("rc:预选发布版本，主要着重于除错")])]),a._v(" "),e("p",[a._v("x.y.z")]),a._v(" "),e("p",[a._v("x：主版本号，当做了不兼容当API修改\ny：次版本号：当你做了向下兼容的功能性新增\nz：修订号：当你做了向下兼容的问题修正")]),a._v(" "),e("h3",{attrs:{id:"修改版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改版本"}},[a._v("#")]),a._v(" 修改版本")]),a._v(" "),e("p",[a._v("如何修改版本")]),a._v(" "),e("p",[e("code",[a._v("npm version [<newVersion> | major | minor | patch | premajor | preminor | prepatch | prerelease [custom version] ]")])])])}),[],!1,null,null,null);r.default=s.exports}}]);