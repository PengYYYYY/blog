import{_ as s,c as a,o as n,U as l}from"./chunks/framework.BWp8c4Qg.js";const F=JSON.parse('{"title":"上传组件","description":"","frontmatter":{},"headers":[],"relativePath":"work/tc-travel/siskin/upload.md","filePath":"work/tc-travel/siskin/upload.md","lastUpdated":1712629317000}'),e={name:"work/tc-travel/siskin/upload.md"},p=l(`<h1 id="上传组件" tabindex="-1">上传组件 <a class="header-anchor" href="#上传组件" aria-label="Permalink to &quot;上传组件&quot;">​</a></h1><p>总结一下文件上传组件的要点</p><ul><li>实现上传进度</li><li>大文件上传(分片上传)</li><li>失败重传</li><li>断点续传</li></ul><h2 id="上传进度" tabindex="-1">上传进度 <a class="header-anchor" href="#上传进度" aria-label="Permalink to &quot;上传进度&quot;">​</a></h2><p>onprogress这个事件，它是XMLHttpRequest对象的一个回调函数，在上传或者下载过程中会周期性执行。接受一个参数event，event有两个参数：</p><ul><li>loaded：已经传输的数量</li><li>total：要传输的总数量</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> xhr </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> XMLHttpRequest</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  method </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  url </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">https://developer.mozilla.org/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#BABED8;">(method</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> url</span><span style="color:#89DDFF;">,</span><span style="color:#FF9CAC;"> true</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onprogress</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //do something </span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> progressRatio</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> event</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">loaded</span><span style="color:#89DDFF;"> /</span><span style="color:#BABED8;"> event</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">total</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#BABED8;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在axios中的配置选项中也提供了对应的接口：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> // \`onUploadProgress\` 允许为上传处理进度事件</span></span>
<span class="line"><span style="color:#FFCB6B;">  onUploadProgress</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">progressEvent</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 对原生进度事件的处理</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // \`onDownloadProgress\` 允许为下载处理进度事件</span></span>
<span class="line"><span style="color:#FFCB6B;">  onDownloadProgress</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">progressEvent</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 对原生进度事件的处理</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="大文件上传" tabindex="-1">大文件上传 <a class="header-anchor" href="#大文件上传" aria-label="Permalink to &quot;大文件上传&quot;">​</a></h2><h3 id="前端" tabindex="-1">前端 <a class="header-anchor" href="#前端" aria-label="Permalink to &quot;前端&quot;">​</a></h3><p>前端大文件上传网上的大部分文章已经给出了解决方案，核心是利用 <code>Blob.prototype.slice</code> 方法，和数组的 slice 方法相似，调用的 slice 方法可以返回原文件的某个切片。</p><p>这样我们就可以根据预先设置好的切片最大数量将文件切分为一个个切片，然后借助 http 的可并发性，同时上传多个切片，这样从原本传一个大文件，变成了同时传多个小的文件切片，可以大大减少上传时间。由于是并发，传输到服务端的顺序可能会发生变化，所以我们还需要给每个切片记录顺序。</p><h3 id="服务端" tabindex="-1">服务端 <a class="header-anchor" href="#服务端" aria-label="Permalink to &quot;服务端&quot;">​</a></h3><p>服务端需要负责接受这些切片，并在接收到所有切片后合并切片。</p><ul><li>合并切片</li></ul><p>前端在每个切片中都携带切片最大数量的信息，当服务端接受到这个数量的切片时自动合并，也可以额外发一个请求主动通知服务端进行切片的合并</p><ul><li>合并切片的方式</li></ul><p>使用 nodejs 的 读写流（readStream/writeStream），将所有切片的流传输到最终文件的流里。</p><h3 id="上传切片" tabindex="-1">上传切片 <a class="header-anchor" href="#上传切片" aria-label="Permalink to &quot;上传切片&quot;">​</a></h3><ul><li>对文件进行切片</li></ul><p>上传文件时，调用切片方法，将文件切片，切片的数量由文件大小控制。在生成文件切片时，需要给每个切片一个标识作为 hash，这样后端可以知道当前切片是第几个，用于之后的合并切片。</p><ul><li>将切片传输给服务端后发送合并请求</li></ul><p>通过promise.all进行并发上传。待上传切片完成后，发送合并请求，通知后端进行合并。</p><h3 id="显示上传进度" tabindex="-1">显示上传进度 <a class="header-anchor" href="#显示上传进度" aria-label="Permalink to &quot;显示上传进度&quot;">​</a></h3><p>上传进度分两种，一个是每个切片的上传进度，另一个是整个文件的上传进度，而整个文件的上传进度是基于每个切片上传进度计算而来。</p><p>切片上传进度条可以直接使用原生的<code>onprogress</code>即可。</p><ul><li>合并上传进度</li></ul><p>每个切片都需要触发独立的监听事件，所以还需要一个工厂函数，根据传入的切片返回不同的监听函数。通过对每个上传对象加上<code>percentage</code>参数，实时更新上传百分比。</p><ul><li>文件进度条</li></ul><p>将每个切片已上传的部分累加，除以整个文件的大小，就能得出当前文件的上传进度，所以这里使用 Vue 计算属性</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>以上就是大文件上传的一个基本的思路了。</p><h2 id="断点续传" tabindex="-1">断点续传 <a class="header-anchor" href="#断点续传" aria-label="Permalink to &quot;断点续传&quot;">​</a></h2><p>断点续传的原理在于前端/服务端需要记住已上传的切片，这样下次上传就可以跳过之前已上传的部分，有两种方案实现记忆的功能</p><ul><li>前端记录已上传的切片 hash</li><li>服务端保存已上传的切片 hash，前端每次上传前向服务端获取已上传的切片</li></ul><p>前端不太可控，存储信息可能会丢失，所以使用服务端方案来做。</p><h3 id="生成hash" tabindex="-1">生成hash <a class="header-anchor" href="#生成hash" aria-label="Permalink to &quot;生成hash&quot;">​</a></h3><p>可以通过文件指纹的方式来生成文件的hash，需要用到 <code>spark-md5</code> ,它可以根据文件内容计算出文件的 <code>hash</code> 值, 另外考虑到如果上传一个超大文件，读取文件内容计算 hash 是非常耗费时间的，并且会引起 UI 的阻塞，导致页面假死状态，所以我们使用 <code>web-worker</code> 在 worker 线程计算 hash，这样用户仍可以在主界面正常的交互。</p><p>实例化 <code>web-worker</code> 时，参数是一个 js 文件路径且不能跨域，所以我们单独创建一个 <code>hash.js</code> 文件放在 public 目录下，另外在 worker 中也是不允许访问 dom 的，但它提供了importScripts 函数用于导入外部脚本，通过它导入 <code>spark-md5</code></p><p>在 <code>worker</code> 线程中，接受文件切片 <code>fileChunkList</code>，利用 <code>FileReader</code> 读取每个切片的 <code>ArrayBuffer</code> 并不断传入 <code>spark-md5</code> 中，每计算完一个切片通过 <code>postMessage</code> 向主线程发送一个进度事件，全部完成后将最终的 hash 发送给主线程</p><h2 id="文件秒传" tabindex="-1">文件秒传 <a class="header-anchor" href="#文件秒传" aria-label="Permalink to &quot;文件秒传&quot;">​</a></h2><p>文件秒传，即在服务端已经存在了上传的资源，所以当用户再次上传时会直接提示上传成功, 文件秒传需要依赖上一步生成的 hash，即在上传前，先计算出文件 hash，并把 hash 发送给服务端进行验证，由于 hash 的唯一性，所以一旦服务端能找到 hash 相同的文件，则直接返回上传成功的信息即可.</p>`,43),o=[p];function r(t,c,i,d,h,D){return n(),a("div",null,o)}const y=s(e,[["render",r]]);export{F as __pageData,y as default};
